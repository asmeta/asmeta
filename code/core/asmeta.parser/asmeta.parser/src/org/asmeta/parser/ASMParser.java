/* ASMParser.java */
/* Generated By:JavaCC: Do not edit this line. ASMParser.java */
package org.asmeta.parser;
//import org.apache.log4j.PropertyConfigurator;
//Import JMIs
import asmeta.*;
import asmeta.definitions.*;
import asmeta.structure.*;
import asmeta.terms.*;
import asmeta.transitionrules.*;
import asmeta.definitions.domains.*;
import asmeta.terms.basicterms.*;
import asmeta.terms.furtherterms.*;
import asmeta.transitionrules.basictransitionrules.*;
import asmeta.transitionrules.derivedtransitionrules.*;
import asmeta.transitionrules.turbotransitionrules.*;
import java.io.FileOutputStream;
import java.io.File;
import java.util.*;
import java.nio.charset.Charset;

public class ASMParser implements ASMParserConstants {

  // asm extension including the . 
  public static final String ASM_EXTENSION = ".asm";

  private String filename; // file name without extension, needed to check that the name of the machine is the same

  private String asmDirLib; // where to find libraries

  private Header header; //the header section of the Asm

  //the declared domains. It associates domain names to the corresponding object.Its tuples are of kind(String,Domain)
  private HashMap < String, Domain > declared_Dom = new HashMap < String, Domain > ();

  // the declared functions: those in the signature and those imported
  private HashMap < String, List < Function > > declared_Func = new HashMap < String, List < Function > > (); //the declared functions of the ASM. It associates function names to the list of functions with that name (a function can be overloaded).Its tuples are of kind(String,List<Function>)

  //the ruleDeclarations of the ASM. It associates rule names to the corresponding object.Its tuples are of kind(String,RuleDeclaration)
  private HashMap < String, List < RuleDeclaration > > declared_Rules = new HashMap < String, List < RuleDeclaration > > ();

  // it keeps memory of the already imported ASMs, to avoid importing of already imported ASM
  // keep static since it is shared among parser instances
  private static HashMap < String, Asm > alreadyImported;

  // real Any Domain
  private static final String anyDomainAnyName = "Any";

  //the structured domains created during parsing. It associates domain names to the corresponding object. Its tuples are of kind(String,StructuredTD)
  // NO LONGER USED
  //private static HashMap<String,Domain> predefined_Dom = new HashMap<String,Domain>();    //the domains created during parsing. It associates domain names to the corresponding object. Its tuples are of kind(String,TypeDomain)
  private Map < String, EnumTd > enumElem = new HashMap<>(); //It associates enumeration element names to their enumeration domain. Its tuples are of kind(String,EnumTD)

  //These hashMap associate the hashcode of the element name to the element name itself. Its tuples are of kind (Integer,String)

  private HashMap<Integer, String> exported_Rules;

  private HashMap<Integer, String> exported_Func;

  private HashMap<Integer, String> exported_Dom;

  private boolean exportAll; //the value "true" indicates all functions and rule are exported

  // forse si puo' eliminare - non serve piu' AG
  // private HashMap programs = new HashMap(); //the hashmap associating names of rule declarations (programs for agents) to the corresponding agent. Its tuples are of kind (Sting,AgentInitialization)

  // these are no longer static because if it reads another (imported ASM)
  // this information must be shared. are shared by passing the argument to the new parser
  // are friendly: must be set before parsing ???
  private AsmetaFactory asmPk;

  private DefinitionsFactory defPack;

  private TermsFactory termsPack;

  private TransitionRulesFactory rulesPack;

  private StructureFactory structurePack;

  private asmeta.definitions.domains.DomainsFactory domainsFactory;

  /** this is set by the setUpReadExport to the parser used to read the first spec*/
  public static ASMParser asmParser;

  // only one logger: DANGER information is mixed
  // errors in imported lib appears errors in pmain file
  // TO BE FIXED
  private static ParserResultLogger Logger = new ParserResultLogger();

  public static ParserResultLogger getResultLogger()
  {
    return Logger;
  }

  /**
	 * It returns the collection of ASM
	 * create the EMF instances
	 * IT IS STATIC BECAUSE may use several parsers (included files and so on).
	 */
  public static AsmCollection setUpReadAsm(File f) throws Exception
  {
    Logger.resetForParsing(f);
    assert (f.exists() && f.isFile());
    assert (f.getName().endsWith(ASM_EXTENSION));
    Logger.logInfo("parsing file " + f.getCanonicalPath());
    // reset the domains
    DomainsFactory.eINSTANCE.resetDomains();
    Utility.reset();
    // BUILD THE MODEL
    // init all imported so far
    alreadyImported = new HashMap<String,Asm>();
    // get the asmetafactory instance
    AsmetaFactory mainpackage = AsmetaFactory.eINSTANCE;
    // builds the parser
    try{
        asmParser = new ASMParser(f, mainpackage);
        // parses  the main Asm
        Optional<asmeta.structure.Asm> asm = asmParser.Asm();
        // build the collection of ASM
        AsmCollection allAsms = new AsmCollection(alreadyImported.values());
        // add this one as first one
        if (asm.isPresent()) {
                allAsms.addMain(asm.get());
                Logger.logInfo("file successfully parsed for asm " + asm.get().getName());
        } else {
                Logger.logInfo("file successfully parsed but empty");
        }
        return allAsms;
    } catch(org.asmeta.parser.ParseException pe) {
        String message = pe.getMessage();
        // get the token
        Token tk = asmParser.token;
        // add token message and re throw
        message = message +  (tk !=null? " Line: " + tk.beginLine + " column: " + tk.beginColumn : "");
        // there is also        
        throw new ParseException(message);
    } finally{
        asmParser.jj_input_stream.inputStream.close();
    }
  }

  /* The input file must have the same name of the ASM spec.
     * A file is needed because we need o set the path where to search
     * for libraries.
     * asmPack is the topmost level package of the metamodel.
     */
  private ASMParser(File f, AsmetaFactory asmPack) throws Exception
  {
    // ho un problema con la nuova implementazione di javacc e JavaCharStream
    // usando la versione vecchia e il plugin di eclipse funziona
    // versione per ph-javacc-maven-plugin
    // this (new java.io.FileInputStream(f),Charset.forName("UTF-8"));
    // versione per javacc-maven-plugin
    this (new java.io.FileInputStream(f),"UTF-8");
    //Check the file name
    if (!f.exists() || !f.isFile())
    {
      Logger.fatal("Error:  " + f.toString() + " is not a file.");
      throw new java.io.FileNotFoundException();
    }
    //DUPLICATED CODE (see main() in MainParser)
    //if (!f.getName().endsWith(asmExtension)) {
    //	Logger.fatal("Error:  " + f.toString() + " is not an asm file.");
    //
    //	throw new Exception("Asm files must have "+ asmExtension +" extension");
    //}
    // get the filename without ".asm" extension
    filename = f.getName().substring(0, f.getName().length() - 4);
    // the library is relative to this file
    asmDirLib = f.getParent();
    // initialize other packages
    // Get references to package
    asmPk = asmPack;
    defPack = asmPk.getDefinitions();
    termsPack = asmPk.getTerms();
    rulesPack = asmPk.getTransitionRules();
    structurePack = asmPk.getStructure();
    domainsFactory = defPack.getDomains();
  }

/***************************************************************/
/*                         GRAMMAR START                       */
/***************************************************************/
/***** MAIN OK!
se il file ï¿½ vuoto non restituisce nulla
*****/
  final public Optional<Asm > Asm() throws ParseException {boolean isAsm = true; // true states an ASM, false states a module
  String name;
  boolean isAsyncr = false;
  Header h;
  Initialization i;
  Body b;
  MacroDeclaration r;
  Asm asmMachine = null;
    if (jj_2_8(2)) {
      if (jj_2_1(2)) {
        jj_consume_token(ASYNCR);
isAsyncr = true;
      } else {
        ;
      }
      if (jj_2_2(2)) {
        jj_consume_token(ASM);
      } else if (jj_2_3(2)) {
        jj_consume_token(MODULE);
isAsm = false;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = ID();
asmMachine = structurePack.createAsm(name, isAsyncr);
      Logger.logDebug("ASM " + name);
      if ((filename != null) && !filename.equals(name)) {if (true) throw new ParseException("Error: The file name \"" + filename + "\" is not equal to the asm name \"" + name + "\".\n");}
      h = Header(asmMachine);
//set the reference
      asmMachine.setHeaderSection(h);
      b = Body(asmMachine);
//set the reference
      asmMachine.setBodySection(b);
      if (jj_2_4(2)) {
        jj_consume_token(MAIN);
        r = MacroDeclaration();
//set the reference
        asmMachine.setMainrule(r);
        // add also the main rule to the body (to avoid dangling resources) 
        b.getRuleDeclaration().add(r);
        if (!isAsm)
        {
          Logger.logWarning("Warning: " + filename + " is a module. It cannot have a Main Rule.\n");
        }
      } else {
        ;
      }
      if (jj_2_7(2)) {
Collection < Initialization > initialStateColl = asmMachine.getInitialState();
        label_1:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_1;
          }
          i = Initialization();
//add it to the collection of initial states
          initialStateColl.add(i);
        }
        jj_consume_token(Default);
        i = Initialization();
//add it to the collection of initial states
        initialStateColl.add(i);
        //set the reference to the default initial state
        asmMachine.setDefaultInitialState(i);
        label_2:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_2;
          }
          i = Initialization();
//set the reference
          asmMachine.getInitialState().add(i);
        }
if (!isAsm)
        {
          Logger.logWarning("Warning: " + filename + " is a module. It cannot have any initial state.\n");
        }
      } else {
        ;
      }
//Check OCL constraints
      if (!OCL_Checker.checkAsm(asmMachine))
      {
        Logger.logErr(OCL_Checker.getMsgErr());
        Logger.logErr("       At the Asm " + name + ".\n");
      }
    } else {
      ;
    }
    jj_consume_token(0);
if (asmMachine== null) {if ("" != null) return Optional.empty();}
    else {if ("" != null) return Optional.of(asmMachine);}
    throw new Error("Missing return statement in function");
}

//---------------------------HEADER OK! ---------------------------//
  final public Header Header(Asm m) throws ParseException {ImportClause i;
  ExportClause e;
  Signature s;
header = structurePack.createHeader();
    s = structurePack.createSignature();
    header.setSignature(s);
    label_3:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_3;
      }
      i = ImportClause();
header.getImportClause().add(i);
    }
    if (jj_2_10(2)) {
      e = ExportClause();
header.setExportClause(e);
    } else {
      ;
    }
    s = Signature(s);
{if ("" != null) return header;}
    throw new Error("Missing return statement in function");
}

/*-----------------------*/
  final public ImportClause ImportClause() throws ParseException {String moduleName;
  String importedID;
  Function f;
  Domain d;
  RuleDeclaration r;
  boolean importAll = true; //the value true indicates to import all the exportClause of the other module

    jj_consume_token(IMPORT);
    moduleName = MOD_ID();
// if it is escaped by double quotes, remove them
    if (moduleName.startsWith("\""))
    {
      moduleName = moduleName.substring(1, moduleName.length() - 1);
    }
    //
    ImportClause impClause = structurePack.createImportClause();
    impClause.setModuleName(moduleName);
    // it should compute again asmLibPath relatively the import ...??
    // if (asmDirLib == null) asmDirLib = ".";
    Asm module_asm = null;
    String moduleFileName = null;
    try
    {
      // find the imported module file
      File moduleFile = Utility.importFile(asmDirLib, moduleName);
      moduleFileName = moduleFile.getCanonicalPath();
      Logger.logDebug("importing  " + moduleFileName);
      // take the module from the already imported modules
      module_asm = alreadyImported.get(moduleFileName);
      // check if already imported
      if (module_asm == null)
      {
        ASMParser nestedParser = new ASMParser(moduleFile, asmPk);
        Logger.logDebug("---------------------------- Beginning of " + moduleName + " parsing----------------------------");
        // to check if already imported
        if (alreadyImported.keySet().contains(moduleFileName)) {
                Logger.logErr("circular import found in " + moduleFileName);
                // it cannot use subclasses since the parser captures the exception and modify it (add number of line and so on)
                {if (true) throw new ParseException("circular import found in " + moduleFileName);}
        }
        // parser started, add null for now
        alreadyImported.put(moduleFileName, null);
        module_asm = nestedParser.Asm().get();
        Logger.logDebug("---------------------------- End of " + moduleName + " parsing----------------------------\n");
        alreadyImported.put(moduleFileName, module_asm);
      }
      else
      {
        // non faccio il parsing ma prendo comunque l'export del modulo e lo metto nell'import
        Logger.logDebug("--------- " + moduleFileName + "  already imported ");
      }
    }
    catch (Exception e)
    {
      e.printStackTrace(System.err);
      {if (true) throw new ParseException("Error: File " + filename + " has errors when importing " + moduleFileName + ":" + e.getMessage());}
    }
    ExportClause module_expCl = module_asm.getHeaderSection().getExportClause();
    Collection < Function > impFunctions = impClause.getImportedFunction();
    Collection < Domain > impDomains = impClause.getImportedDomain();
    Collection < RuleDeclaration > impRules = impClause.getImportedRule();
    Collection < Function > module_func = null;
    Collection < Domain > module_dom = null;
    Collection < RuleDeclaration > module_rules = null;
    if (module_expCl != null)
    {
      module_func = module_expCl.getExportedFunction();
      module_dom = module_expCl.getExportedDomain();
      module_rules = module_expCl.getExportedRule();
    }
    else
    {
      Logger.logWarning("Warning: The ASM " + moduleName + " does not export any function or rule. It cannot be imported by this ASM.\n");
    }
    if (jj_2_18(2)) {
      jj_consume_token(114);
Logger.logDebug("imported elements: ");
      if (jj_2_11(2)) {
        importedID = ID_DOMAIN();
if (module_expCl != null)
        {
          d = Utility.search_domName(module_dom, importedID);
          if (d != null)
          {
            impDomains.add(d);
            Logger.logDebug(importedID);
          }
          else
          {
            Logger.logWarning("Warning: The domain " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
          }
        }
      } else if (jj_2_12(2)) {
        importedID = ID_FUNCTION();
if (module_expCl != null)
        {
          f = Utility.search_funcName(module_func, importedID);
          if (f != null)
          {
            impFunctions.add(f);
            Logger.logDebug(importedID);
            //if it is a Dynamic Function delete all function initializations
            if (f instanceof DynamicFunction) ((DynamicFunction) f).getInitialization().clear();
          }
          else
          {
            Logger.logWarning("Warning: The function " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
          }
        }
      } else if (jj_2_13(2)) {
        importedID = ID_RULE();
if (module_expCl != null)
        {
          r = Utility.search_ruleName(module_rules, importedID);
          if (r != null)
          {
            impRules.add(r);
            Logger.logDebug(importedID);
          }
          else
          {
            Logger.logWarning("Warning: The rule " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(115);
        if (jj_2_15(2)) {
          importedID = ID_DOMAIN();
if (module_expCl != null)
          {
            d = Utility.search_domName(module_dom, importedID);
            if (d != null)
            {
              impDomains.add(d);
              Logger.logDebug("," + importedID);
            }
            else
            {
              Logger.logWarning("Warning: The domain " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
            }
          }
        } else if (jj_2_16(2)) {
          importedID = ID_FUNCTION();
if (module_expCl != null)
          {
            f = Utility.search_funcName(module_func, importedID);
            if (f != null)
            {
              impFunctions.add(f);
              Logger.logDebug("," + importedID);
              //if it is a Dynamic Function delete all function initializations
              if (f instanceof DynamicFunction) ((DynamicFunction) f).getInitialization().clear();
            }
            else
            {
              Logger.logWarning("Warning: The function " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
            }
          }
        } else if (jj_2_17(2)) {
          importedID = ID_RULE();
if (module_expCl != null)
          {
            r = Utility.search_ruleName(module_rules, importedID);
            if (r != null)
            {
              impRules.add(r);
              Logger.logDebug("," + importedID);
            }
            else
            {
              Logger.logWarning("Warning: The rule " + importedID + " is not exported by the ASM " + moduleName + ". It cannot be imported by this ASM.\n");
            }
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(116);
Logger.logDebug("");
      importAll = false;
    } else {
      ;
    }
if (importAll && module_expCl != null)
    { //all domains of the export clause are imported
      impDomains.addAll(module_dom);
      //all functions of the export clause are imported
      for (Function fi : module_func)
      {
        //add the function to the import clause
        impFunctions.add(fi);
        //if it is a Dynamic Function delete all function initializations
        if (fi instanceof DynamicFunction) ((DynamicFunction) fi).getInitialization().clear();
      }
      //all rules of the export clause are imported
      Iterator iter_rules = module_rules.iterator();
      while (iter_rules.hasNext())
      {
        r = (RuleDeclaration) iter_rules.next();
        Logger.logDebug("import rule " + r.getName());
        //add the rule to the import clause
        impRules.add(r);
      }
      Logger.logDebug("imported elements: all");
    }
    {if ("" != null) return impClause;}
    throw new Error("Missing return statement in function");
}

/*-----------------------*/
  final public ExportClause ExportClause() throws ParseException {String exportedID;
    jj_consume_token(EXPORT);
Logger.logDebug("export: ");
    ExportClause expClause = structurePack.createExportClause();
    if (jj_2_26(2)) {
//Some functions, domains and rules are exported, but not all. Their names are stored in the global variables "exported_Func", "exported_Dom" and "exported_Rules"
        exportAll = false;
        exported_Func = new HashMap();
        exported_Dom = new HashMap();
        exported_Rules = new HashMap();
        String oldValue;
      if (jj_2_19(2)) {
        exportedID = ID_DOMAIN();
oldValue = (String) exported_Dom.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
      } else if (jj_2_20(2)) {
        exportedID = ID_FUNCTION();
oldValue = (String) exported_Func.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
      } else if (jj_2_21(2)) {
        exportedID = ID_RULE();
oldValue = (String) exported_Rules.put(new Integer(exportedID.hashCode()), exportedID);
          if (oldValue == null) Logger.logDebug(exportedID);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        if (jj_2_22(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(115);
        if (jj_2_23(2)) {
          exportedID = ID_DOMAIN();
oldValue = (String) exported_Dom.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
        } else if (jj_2_24(2)) {
          exportedID = ID_FUNCTION();
oldValue = (String) exported_Func.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
        } else if (jj_2_25(2)) {
          exportedID = ID_RULE();
oldValue = (String) exported_Rules.put(new Integer(exportedID.hashCode()), exportedID);
            if (oldValue == null) Logger.logDebug("," + exportedID);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else if (jj_2_27(2)) {
      jj_consume_token(MULT);
//All functions, domains and rules declared in this machine are exported
      exportAll = true;
      Logger.logDebug("all");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expClause;}
    throw new Error("Missing return statement in function");
}

/*-----------------------*/
  final public Signature Signature(Signature signature) throws ParseException {Domain d, c;
  Function f;
    jj_consume_token(SIGNATURE);
    jj_consume_token(117);
Logger.logDebug("signature:");
    //create the object
    //Signature signature = structurePack.createSignature();
    Collection < Domain > domains = signature.getDomain();
    Collection < Function > functions = signature.getFunction();
    ExportClause expClause = header.getExportClause();
    Collection < Function > expFunc = null;
    Collection < Domain > expDom = null;
    if (expClause != null)
    {
      expFunc = expClause.getExportedFunction();
      expDom = expClause.getExportedDomain();
    }
    String d_name, c_name;
    boolean inserted;
    // the declarations of imported functions and domains are added to
    // the visible name
    for (ImportClause impClause : header.getImportClause())
    {
      //insert the imported domains
      for (Domain dom : impClause.getImportedDomain())
      {
        d_name = dom.getName();
        if (!declared_Dom.containsKey(d_name))
        {
          //add the domain to the signature
          //domains.add(dom);
          if (!(dom instanceof StructuredTd || dom instanceof BasicTd || dom instanceof AgentDomain || dom instanceof ReserveDomain || dom instanceof AnyDomain))  //insert the domain in the table of declared domains
          declared_Dom.put(d_name, dom);
          //If the imported domain is an enumeration, its enum literals are
          // added to the hash table "enumElem"
          if (dom instanceof EnumTd)
          {
            Iterator iter_enum = ((EnumTd) dom).getElement().iterator();
            EnumElement enumEl;
            while (iter_enum.hasNext())
            {
              enumEl = (EnumElement) iter_enum.next();
              enumElem.put(enumEl.getSymbol(), (EnumTd) dom);
            }
          }
          //check if the domain can be exported
          //Remark: the HashMap exported_Dom is initialized within the ExportClause method so if exported_Dom!=null => expClause!=null
          if (((exported_Dom != null) && exported_Dom.containsKey(new Integer(d_name.hashCode()))) || (exportAll == true))
          { //add the domain to the exportClause
            expDom.add(dom);
            //create the association
            //X AExpClDom.add(expClause,d);
          }
        }
      }
      //insert the imported functions
      for (Function fi : impClause.getImportedFunction())
      {
        inserted = Utility.insert(fi, declared_Func);
        if (inserted)
        { // DO NOT add the function to the signature
          //insert domain and codomain of the function in the declared Domains
          Utility.insert(fi.getDomain(), declared_Dom);
          Utility.insert(fi.getCodomain(), declared_Dom);
          //check if the function can be exported
          //Remark: the HashMap exported_Func is initialized within the ExportClause method so if exported_Func!=null => expClause!=null
          if (((exported_Func != null) && exported_Func.containsKey(new Integer(fi.getName().hashCode()))) || (exportAll == true))
          { //add the function to the exportClause
            expFunc.add(fi);
          }
        }
      }
    }
    //         Logger.logDebug("");

    label_6:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_6;
      }
      d = Domain();
d_name = d.getName();
      //check if the domain has already been declared
      if (!declared_Dom.containsKey(d_name))
      { //add the domain to the signature
        domains.add(d);
        if (!(d instanceof StructuredTd || d instanceof BasicTd || d instanceof AgentDomain || d instanceof ReserveDomain || d instanceof AnyDomain))  //insert the domain in the table of declared domains
        declared_Dom.put(d_name, d);
        if (d instanceof StructuredTd) Logger.logDebug(d_name);
      }
      else {if (true) throw new ParseException("Error: The domain " + d_name + " has been declared twice.");}
      //check if the domain can be exported
      //Remark: the HashMap exported_Dom is initialized within the ExportClause method so if exported_Dom!=null => expClause!=null
      if (((exported_Dom != null) && exported_Dom.containsKey(new Integer(d_name.hashCode()))) || (exportAll == true))
      { //add the domain to the exportClause
        expDom.add(d);
        //create the association
        //X AExpClDom.add(expClause,d);
      }
    }
Logger.logDebug("");
    label_7:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_7;
      }
      f = Function();
inserted = Utility.insert(f, declared_Func);
      if (inserted)
      { //add the function to the signature
        functions.add(f);
        //X ASignFunc.add(signature,f);
      }
      else {if (true) throw new ParseException("Error: The function " + f.getName() + ":" + ((f.getDomain() == null) ? "" : (f.getDomain().getName() + "->")) + f.getCodomain().getName() + " has been declared twice.");}
      //check if the function can be exported
      //Remark: the HashMap exported_Func is initialized within the ExportClause method so if exported_Func!=null => expClause!=null
      if (((exported_Func != null) && exported_Func.containsKey(new Integer(f.getName().hashCode()))) || (exportAll == true))
      { //add the function to the exportClause
        expFunc.add(f);
        //create the association
        //X AExpClFunc.add(expClause,f);
      }
      //check OCL constraint U7: function->forAll(f:Function | not f.oclIsTypeOf(LocalFunction))
      if (OCL_Checker.isLocal(f)) {if (true) throw new ParseException("Error: A local dynamic function cannot be declared in the signature.\n" + "       At the declaration of the function " + f.getName() + ".");}
    }
{if ("" != null) return signature;}
    throw new Error("Missing return statement in function");
}

//-----------------------INITIALIZATION  -----------------------//
  final public Initialization Initialization() throws ParseException {String nameState;
  DomainInitialization d_init;
  FunctionInitialization f_init;
  AgentInitialization a_init;
    jj_consume_token(INIT);
    nameState = ID();
    jj_consume_token(117);
Logger.logDebug("Init " + nameState + ":");
    Initialization initState = structurePack.createInitialization();
    initState.setName(nameState);
    label_8:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_8;
      }
      d_init = DomainInitialization(initState);
initState.getDomainInitialization().add(d_init);
    }
    label_9:
    while (true) {
      if (jj_2_31(2)) {
        ;
      } else {
        break label_9;
      }
      f_init = FunctionInitialization(initState);
initState.getFunctionInitialization().add(f_init);
    }
    label_10:
    while (true) {
      if (jj_2_32(2)) {
        ;
      } else {
        break label_10;
      }
      a_init = AgentInitialization(initState);
initState.getAgentInitialization().add(a_init);
    }
//check OCL constraints
    if (!OCL_Checker.checkInitialization(initState))
    {
      Logger.logErr(OCL_Checker.getMsgErr() + "\n       At the initial state " + nameState + ".\n");
    }
    {if ("" != null) return initState;}
    throw new Error("Missing return statement in function");
}

  final public DomainInitialization DomainInitialization(Initialization initState) throws ParseException {String name;
  Term body;
  HashMap localVar = new HashMap();
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(EQ);
Logger.logDebug("\ndomain " + name + "\nbody:");
    body = Term(localVar, false, null);
Domain dom = (Domain) declared_Dom.get(name);
    //check if the domain has been declared
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + name + " has not been declared. It cannot be initialized.");}
    //check if the domain is a concrete-domain
    if (!(dom instanceof ConcreteDomain)) {if (true) throw new ParseException("Error: The domain " + name + " is not a concrete-domain. It cannot be initialized.");}
    //create the object
    DomainInitialization dom_init = structurePack.createDomainInitialization();
    dom_init.setInitialState(initState);
    //set the reference to the initialized domain
    dom_init.setInitializedDomain(((ConcreteDomain) dom));
    ((ConcreteDomain) dom).getInitialization().add(dom_init);
    //set the reference to the body
    dom_init.setBody(body);
    //check ocl constraints
    if (!OCL_Checker.checkDomainInitialization(dom_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the initialization of the domain " + dom.getName() + ".");}
    {if ("" != null) return dom_init;}
    throw new Error("Missing return statement in function");
}

  final public FunctionInitialization FunctionInitialization(Initialization initState) throws ParseException {Term body;
  String func_name;
  VariableTerm v;
  Domain inDom;
  HashMap localVar = new HashMap();
    jj_consume_token(FUNCTION);
    func_name = ID_FUNCTION();
Logger.logDebug("initialization of function " + func_name);
    //create the object
    FunctionInitialization func_init = structurePack.createFunctionInitialization();
    //set the reference in the function initialization
    func_init.setInitialState(initState);
    Collection func_initVariables = func_init.getVariable();
    //the name of the function domain
    String dom_name = "";
    if (jj_2_34(2)) {
Logger.logDebug("variables: ");
      jj_consume_token(114);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
//set the reference
      func_initVariables.add(v);
      //update variable features
      Utility.updateVariable(v, inDom);
      //if the variables are more then one the associated domains must be type-domains
      //this constraint seems silly, so it is commented
      /*
         if( getToken(1).image.equals(",") && (inDom instanceof ConcreteDomain))
               throw new ParseException("Error: When the function arity is greater than 1, the domains associated to the function variables must be type-domains."+
                                         "       At the initialization of the function "+ func_name +".\n");
		 */
      //update the name of the function domain
      dom_name = inDom.getName();
      Logger.logDebug("\t\t\t" + v.getName() + " updated: D=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_11:
      while (true) {
        if (jj_2_33(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used as parameter of the initialization of function " + func_name + ". It is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
//set the reference
        func_initVariables.add(v);
        //set the association
        //Xa_FuncInit_Var.add(v,func_init);
        //update variable features
        Utility.updateVariable(v, inDom);
        //if the variables are more then one the associated domains must be type-domains
        //this constraint seems silly, so it is commented
        /*
         if( inDom instanceof ConcreteDomain)
               throw new ParseException("Error: When the function arity is greter than 1, the domains related to the variables of a function initialization or definition  must be type-domains."+
                                         "       At the initialization of the function "+ func_name +".\n");
		 */
        //update the name of the function domain
        dom_name = dom_name.concat(",").concat(inDom.getName());
        Logger.logDebug("\t\t\t" + v.getName() + " updated: D=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(116);
    } else {
      ;
    }
    jj_consume_token(EQ);
Logger.logDebug("body:");
    body = Term(localVar, false, null);
//set the reference
    func_init.setBody(body);
    Domain func_dom;
    if (func_initVariables.size() == 0) func_dom = null;
    else if (func_initVariables.size() == 1)
    {
      func_dom = (Domain) declared_Dom.get(dom_name);
      if (func_dom == null) func_dom = Utility.getBasicDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getPredefinedAbstractDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    else
    {
      dom_name = "Prod(".concat(dom_name).concat(")");
      func_dom = (Domain) Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    //check if the function has been declared
    /// attenzione non trova le funzioni importate !!!!
    Function f = Utility.getFunction(func_name, func_dom, false, new HashMap(), declared_Func);
    if (f == null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has not been declared. It cannot be initialized");}
    if (!(f instanceof DynamicFunction)) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " is not a dynamic function. It cannot be initialized");}
    //set the reference to the function to initialize
    func_init.setInitializedFunction((DynamicFunction) f);
    ((DynamicFunction) f).getInitialization().add(func_init);
    //create the association
    //XX AInitializationInitializedFunction a_FuncInit_Func = structurePack.getAInitializationInitializedFunction();
    //XX a_FuncInit_Func.add(func_init,((DynamicFunction)f));
    // ocl constraint 1 and 2 are granted for construction
    // check ocl constraint 3
    //if(!OCL_Checker.body_ok(f,body))
    //      throw new ParseException(OCL_Checker.getMsgErr()+"\n       At the initialization of the function "+ func_name +"("+dom_name+")"+".");
    //
    if (!OCL_Checker.checkFunctionInitialization(func_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the initialization of the function " + func_name + "(" + dom_name + ")" + ".");}
    {if ("" != null) return func_init;}
    throw new Error("Missing return statement in function");
}

  final public AgentInitialization AgentInitialization(Initialization initState) throws ParseException {Domain dom;
  String id_dom;
  MacroCallRule r;
  HashMap localVar = new HashMap();
    jj_consume_token(AGENT);
Logger.logDebug("\tAgent initialization begins");
    id_dom = ID_DOMAIN();
    jj_consume_token(117);
Logger.logDebug("\tagent domain: " + id_dom);
    dom = (Domain) declared_Dom.get(id_dom);
    if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, id_dom);
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + id_dom + " has not been declared. Invariant declaration failed.");}
    AgentInitialization agent_init = structurePack.createAgentInitialization();
    agent_init.setInitialState(initState);
    agent_init.setDomain(dom);
    r = MacroCallRule(localVar, null);
//set the reference
    agent_init.setProgram(r);
    //check OCL constraints
    if (!OCL_Checker.checkAgentInitialization(agent_init)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the initialization of the agent set " + id_dom + ".");}
Logger.logDebug("\tagent initialization ends");
    {if ("" != null) return agent_init;}
    throw new Error("Missing return statement in function");
}

//----------------------------BODY----------------------------//
  final public Body Body(Asm m) throws ParseException {DomainDefinition d_def;
  FunctionDefinition f_def;
  RuleDeclaration r_decl;
  Property p;
  FairnessConstraint fc;
  InvarConstraint ic;
  /*Invariant a;
   //PA 30/12/2010 in order to add the CTLSPEC and LTLSPEC keywords: START 
   CtlSpec ctlSpec;
   LtlSpec ltlSpec;
   //PA 30/12/2010 in order to add the CTLSPEC and LTLSPEC keywords: END
   */

    jj_consume_token(DEFINITIONS);
    jj_consume_token(117);
Logger.logDebug("definitions:");
    Body body = structurePack.createBody();
    Collection < DomainDefinition > dom_definitions = body.getDomainDefinition();
    Collection < FunctionDefinition > func_definitions = body.getFunctionDefinition();
    Collection < RuleDeclaration > rule_declarations = body.getRuleDeclaration();
    //Collection invariants = body.getInvariant();
    //Collection ctlSpecs = body.getCtlSpec();
    //Collection ltlSpecs = body.getLtlSpec();
    Collection < Property > properties = body.getProperty();
    Collection < FairnessConstraint > fairnessConstraints = body.getFairnessConstraint();
    Collection < InvarConstraint > invarConstraints = body.getInvariantConstraint();
    ExportClause expClause = header.getExportClause();
    Collection < RuleDeclaration > expRules = null;
    if (expClause != null)
    expRules = expClause.getExportedRule();
    label_12:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_12;
      }
      d_def = DomainDefinition();
dom_definitions.add(d_def);
      //set the association
      //XX a_Body_DomDef.add(body,d_def);

    }
    label_13:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_13;
      }
      f_def = FunctionDefinition(m);
func_definitions.add(f_def);
      //set the association
      //XX a_Body_FuncDef.add(f_def,body);

    }
//the rule declarations imported are added to declared rules
    for (ImportClause impClause : header.getImportClause())
    {
      for (RuleDeclaration r_d : impClause.getImportedRule())
      {
        String rule_name = rule_name = r_d.getName();
        //check if the rule has already been declared
        List < RuleDeclaration > r_list = declared_Rules.get(rule_name);
        if (r_list == null)
        {
          List < RuleDeclaration > newList = new ArrayList < RuleDeclaration > (Collections.singletonList(r_d));
          declared_Rules.put(rule_name, newList);
        }
        else
        {
          // add this rule in any case
          r_list.add(r_d);
        }
        //check if the rule can be exported
        //Remark: the HashMap exported_Rules is initialized within the ExportClause method so if exported_Rules!=null => expClause!=null
        if (((exported_Rules != null) && exported_Rules.containsKey(new Integer(rule_name.hashCode()))) || exportAll)
        {
          expRules.add(r_d);
        }
        //check if the rule is the program associated to an agent in an AgentInitialization
        /*for (AgentInitialization a_init: programs.get(rule_name)){
                     //set the reference
                     // TODO
                     // MODIFICARE !!!! setNamedProgram --> a_init.setProgram((MacroDeclaration)r_decl);
                     //create the association
                     //X AAgentNamedProg.add(a_init,r_decl);
               }*/
      }
    }
    label_14:
    while (true) {
      if (jj_2_37(2)) {
        ;
      } else {
        break label_14;
      }
      /*LOOKAHEAD(2)*/
          r_decl = RuleDeclaration();
String rule_name = r_decl.getName();
      //check if the rule has already been declared
      if (Utility.searchRuleByName(declared_Rules, rule_name, r_decl.getVariable()) == null)
      {
        rule_declarations.add(r_decl);
        //create the association
        //XX a_Body_Rule.add(body,r_decl);
        //insert the rule in the table of declared rules
        // create a new list of rules
        if (!declared_Rules.containsKey(rule_name))
        {
          List < RuleDeclaration > newList = new ArrayList < RuleDeclaration > (Collections.singletonList(r_decl));
          declared_Rules.put(rule_name, newList);
        }
        else
        {
          declared_Rules.get(rule_name).add(r_decl);
        }
      }
      else
      {
        Logger.logDebug("\trule alredy declared");
        {if (true) throw new ParseException("Error: The rule " + rule_name + " has been declared twice with the same parameters.");}
      }
      //check if the rule can be exported
      //Remark: the HashMap exported_Rules is initialized within the ExportClause method so if exported_Rules!=null => expClause!=null
      if (((exported_Rules != null) && exported_Rules.containsKey(new Integer(rule_name.hashCode()))) || exportAll)
      {
        expRules.add(r_decl);
        //create the association
        //XX AExpClRule.add(expClause,r_decl);
      }
      //check if the rule is the program associated to an agent in an AgentInitialization
      /* r_list = (LinkedList)programs.get(rule_name);
            if(r_list!=null)
            {  iter_r_list = r_list.listIterator(r_list.size());
               while(iter_r_list.hasNext())
               {  a_init = (AgentInitialization)iter_r_list.next();
                  //set the reference
                  // MODIFICARE AG TODO a_init.setNamedProgram((MacroDeclaration)r_decl);
               }
            }*/

    }
    label_15:
    while (true) {
      if (jj_2_38(2)) {
        ;
      } else {
        break label_15;
      }
      ic = InvarConstraint(m);
invarConstraints.add(ic);
    }
    label_16:
    while (true) {
      if (jj_2_39(2)) {
        ;
      } else {
        break label_16;
      }
      fc = FairnessConstraint(m);
fairnessConstraints.add(fc);
    }
    label_17:
    while (true) {
      if (jj_2_40(2)) {
        ;
      } else {
        break label_17;
      }
      p = Property(m);
String name = p.getName();
      if (name != null)
      {
        if (p instanceof CtlSpec)
        {
          for (Property p2 : properties)
          {
            if (p2 instanceof CtlSpec && p2.getName() != null && p2.getName().equals(name))
            {
              {if (true) throw new ParseException("Two CTL specifications can not have the same name.");}
            }
          }
        }
        if (p instanceof LtlSpec)
        {
          for (Property p2 : properties)
          {
            if (p2 instanceof LtlSpec && p2.getName() != null && p2.getName().equals(name))
            {
              {if (true) throw new ParseException("Two LTL specifications can not have the same name.");}
            }
          }
        }
      }
      properties.add(p);
    }
{if ("" != null) return body;}
    throw new Error("Missing return statement in function");
}

  final public DomainDefinition DomainDefinition() throws ParseException {String name;
  Term body;
  HashMap localVar = new HashMap();
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(EQ);
Logger.logDebug("domain " + name);
    Logger.logDebug("body:");
    body = Term(localVar, false, null);
Domain dom = declared_Dom.get(name);
    //check if the domain has been declared
    if (dom == null) {if (true) throw new ParseException("Error: The domain " + name + " has not been declared. It cannot be defined.");}
    //check if the domain is a concrete-domain
    if (!(dom instanceof ConcreteDomain)) {if (true) throw new ParseException("Error: The domain " + name + " is not a concrete-domain. It cannot be defined.");}
    //check if the domain has already been defined
    if (((ConcreteDomain) dom).getDefinition() != null) {if (true) throw new ParseException("Error: The domain " + name + " has been defined twice.");}
    //create the object
    DomainDefinition dom_def = structurePack.createDomainDefinition();
    //set the reference to the defined domain
    dom_def.setDefinedDomain(((ConcreteDomain) dom));
    ((ConcreteDomain) dom).setDefinition(dom_def);
    //create the association
    //X ADefinitionDefinedDomain ADefDom = structurePack.getADefinitionDefinedDomain();
    //X ADefDom.add(dom_def,((ConcreteDomain)dom));
    //set the reference to the body
    dom_def.setBody(body);
    //create the association
    //X ADomainDefinitionBody ADefbody = structurePack.getADomainDefinitionBody();
    //X ADefbody.add(dom_def,body);
    //check ocl constraints
    if (!OCL_Checker.checkDomainDefinition(dom_def)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the definition of the " + (((ConcreteDomain) dom).getIsDynamic() ? "dynamic" : "static") + " domain " + dom.getName() + ".");}
    {if ("" != null) return dom_def;}
    throw new Error("Missing return statement in function");
}

  final public FunctionDefinition FunctionDefinition(Asm m) throws ParseException {Term body;
  String func_name;
  VariableTerm v;
  Domain inDom;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    jj_consume_token(FUNCTION);
    func_name = ID_FUNCTION();
Logger.logDebug("function " + func_name);
    //create the object
    FunctionDefinition func_def = structurePack.createFunctionDefinition();
    List < VariableTerm > variables = func_def.getVariable();
    //the name of the function domain
    String dom_name = "";
    if (jj_2_42(2)) {
Logger.logDebug("variables: ");
      jj_consume_token(114);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
//set the reference
      variables.add(v);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the name of the function domain
      dom_name = inDom.getName();
      Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_18:
      while (true) {
        if (jj_2_41(2)) {
          ;
        } else {
          break label_18;
        }
        jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used as parameter of the definition of function " + func_name + ". It is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
//set the reference
        variables.add(v);
        //update variable features
        Utility.updateVariable(v, inDom);
        //update the name of the function domain
        dom_name = dom_name.concat(",").concat(inDom.getName());
        Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(116);
    } else {
      ;
    }
    jj_consume_token(EQ);
Logger.logDebug("body:");
    body = Term(localVar, false, null);
//set the reference
    func_def.setBody(body);
    Domain func_dom;
    if (variables.size() == 0) func_dom = null;
    else if (variables.size() == 1)
    {
      func_dom = (Domain) declared_Dom.get(dom_name);
      if (func_dom == null) func_dom = Utility.getBasicDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getPredefinedAbstractDomain(domainsFactory, dom_name);
      if (func_dom == null) func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    else
    {
      dom_name = "Prod(".concat(dom_name).concat(")");
      func_dom = Utility.getStructuredDomain(domainsFactory, dom_name, header.getSignature());
      if (func_dom == null) {if (true) throw new ParseException("Error: The domain" + dom_name + " has not been declared. There not exists a function with this domain.");}
    }
    //check if the function has been declared
    Function f = Utility.getFunction(func_name, func_dom, false, new HashMap < String, Domain > (), declared_Func);
    if (f == null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has not been declared. It cannot be defined!");}
    //check if the function has already been defined
    if (f.getDefinition() != null) {if (true) throw new ParseException("Error: The function " + func_name + "(" + dom_name + ")" + " has been defined twice.");}
    //set the reference to the function to define
    func_def.setDefinedFunction(f);
    f.setDefinition(func_def);
    //create the association
    //X ADefinitionDefinedFunction a_FuncDef_Func = structurePack.getADefinitionDefinedFunction();
    //X a_FuncDef_Func.add(f,func_def);
    //check ocl constraint 1
    if (!((f instanceof StaticFunction) || (f instanceof DerivedFunction))) {if (true) throw new ParseException("Error: Only static and derived functions can be defined.\n" + "       At the definition of the function " + func_name + "(" + dom_name + ")" + ".");}
    if (!OCL_Checker.checkFunctionDefinition(func_def)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the definition of the function " + func_name + "(" + dom_name + ")" + ".");}
    {if ("" != null) return func_def;}
    throw new Error("Missing return statement in function");
}

  final public RuleDeclaration RuleDeclaration() throws ParseException {RuleDeclaration result;
    if (jj_2_43(2)) {
      result = MacroDeclaration();
    } else if (jj_2_44(2)) {
      result = TurboDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public MacroDeclaration MacroDeclaration() throws ParseException {Logger.logDebug("macro rule");
  MacroDeclaration ruleDecl = rulesPack.getBasicTransitionRules().createMacroDeclaration();
  String ruleName;
  List < VariableTerm > vars;
  Rule body;
  int arity = 0;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    if (jj_2_45(2)) {
      jj_consume_token(MACRO);
    } else {
      ;
    }
    jj_consume_token(RULE);
    ruleName = ID_RULE();
Logger.logDebug("\t" + ruleName);
    ruleDecl.setName(ruleName);
    List < VariableTerm > variables = ruleDecl.getVariable();
    if (jj_2_47(2)) {
Logger.logDebug("variables: ");
      VariableTerm v;
      Domain inDom;
      jj_consume_token(114);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
//add it to the list
      variables.add(v);
      //create the association
      //X ARuleDeclarationVariable ARuleDeclVar = defPack.getARuleDeclarationVariable();
      //X ARuleDeclVar.add(v,ruleDecl);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the arity value
      arity++;
      Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_19:
      while (true) {
        if (jj_2_46(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used because it is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
//add it to the list
        variables.add(v);
        //create the association
        //X ARuleDeclVar.add(v,ruleDecl);
        //set the variable type-domain
        Utility.updateVariable(v, inDom);
        //(OCL constraint 2) set variable kind
        //if(inDom instanceof RuleDomain)
        //   v.setKind(VariableKind.forName("ruleVar"));
        //update the arity value
        arity++;
        Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(116);
    } else {
      ;
    }
    jj_consume_token(EQ);
// add this rule to the declared rules
    Logger.logDebug("body:");
    body = Rule(localVar, ruleDecl);
//set the reference
    ruleDecl.setRuleBody(body);
    ruleDecl.setArity(arity);
    //constraint 1 is granted for construction
    {if ("" != null) return ruleDecl;}
    throw new Error("Missing return statement in function");
}

  final public TurboDeclaration TurboDeclaration() throws ParseException {Logger.logDebug("turbo rule \n");
  TurboDeclaration ruleDecl = rulesPack.getTurboTransitionRules().createTurboDeclaration();
  String ruleName;
  List < VariableTerm > vars;
  Rule body;
  int arity = 0;
  Domain inDom;
  HashMap < String, VariableTerm > localVar = new HashMap < String, VariableTerm > ();
    jj_consume_token(TURBO);
    jj_consume_token(RULE);
    ruleName = ID_RULE();
ruleDecl.setName(ruleName);
    Logger.logDebug("\t" + ruleName);
    List variables = ruleDecl.getVariable();
    if (jj_2_49(2)) {
Logger.logDebug("variables: ");
      VariableTerm v;
      jj_consume_token(114);
      v = VariableTerm(localVar, true);
      jj_consume_token(IN);
      inDom = getDomainByID();
//add it to the list
      variables.add(v);
      //create the association
      //X ARuleDeclarationVariable ARuleDeclVar = defPack.getARuleDeclarationVariable();
      //X ARuleDeclVar.add(v,ruleDecl);
      //update variable features
      Utility.updateVariable(v, inDom);
      //update the arity value
      arity++;
      Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      label_20:
      while (true) {
        if (jj_2_48(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
        String nextVar = getToken(1).image;
        if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be used because it is already used.");}
        v = VariableTerm(localVar, true);
        jj_consume_token(IN);
        inDom = getDomainByID();
//add it to the list
        variables.add(v);
        //create the association
        //X ARuleDeclVar.add(v,ruleDecl);
        //set the variable type-domain
        Utility.updateVariable(v, inDom);
        //(OCL constraint 2) set variable kind
        //if(inDom instanceof RuleDomain)
        //v.setKind(VariableKind.forName("ruleVar"));
        //update the arity value
        arity++;
        Logger.logDebug("\t\t\t" + v.getName() + " updated: TD=" + v.getDomain().getName() + ", kind=" + v.getKind().toString());
      }
      jj_consume_token(116);
    } else {
      ;
    }
    if (jj_2_50(2)) {
      jj_consume_token(IN);
      inDom = getDomainByID();
Logger.logDebug("\t\t\tReturn type: " + inDom.getName());
      ruleDecl.setResultType(inDom);
      Logger.logDebug("=");
    } else {
      ;
    }
    jj_consume_token(EQ);
Logger.logDebug("body:");
    body = Rule(localVar, ruleDecl);
//set the reference
    ruleDecl.setRuleBody(body);
    ruleDecl.setArity(arity);
    //constraint 1 is granted for construction
    {if ("" != null) return ruleDecl;}
    throw new Error("Missing return statement in function");
}

  final public Property Property(Asm m) throws ParseException {Property p;
    if (jj_2_51(2)) {
      p = Invariant(m);
    } else if (jj_2_52(2)) {
      p = TemporalProperty(m);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return p;}
    throw new Error("Missing return statement in function");
}

  final public TemporalProperty TemporalProperty(Asm m) throws ParseException {TemporalProperty tp;
    if (jj_2_53(2)) {
      tp = CtlSpec(m);
    } else if (jj_2_54(2)) {
      tp = LtlSpec(m);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tp;}
    throw new Error("Missing return statement in function");
}

  final public Invariant Invariant(Asm m) throws ParseException {String idElement;
  Term exp;
  HashMap localVar = new HashMap();
  boolean funHasArg = false;
  String name = "";
    jj_consume_token(INVARIANT);
    if (jj_2_55(2)) {
      name = ID_AXIOM();
    } else {
      ;
    }
    jj_consume_token(OVER);
Logger.logDebug("invariant " + name + "over ");
    Invariant invariant = defPack.createInvariant();
    invariant.setName(name);
    //XX AConstraintConstrainedDomain AAxiomDom = defPack.getAConstraintConstrainedDomain();
    //XX AConstraintConstrainedFunction AAxiomFunc = defPack.getAConstraintConstrainedFunction();
    //XX AConstraintConstrainedRule AAxiomRule = defPack.getAConstraintConstrainedRule();
    Collection domains = invariant.getConstrainedDomain();
    Collection functions = invariant.getConstrainedFunction();
    Collection rules = invariant.getConstrainedRule();
    Domain dom = null;
    Function func = null;
    RuleDeclaration rule;
    if (jj_2_58(2)) {
      idElement = ID_DOMAIN();
dom = (Domain) declared_Dom.get(idElement);
      if (dom == null) dom = Utility.getBasicDomain(domainsFactory, idElement);
      if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, idElement);
      if (dom == null) dom = Utility.getStructuredDomain(domainsFactory, idElement, header.getSignature());
      if (dom == null) {if (true) throw new ParseException("Error: The domain " + idElement + " has not been declared. Invariant declaration failed ");}
      domains.add(dom);
      dom.getConstraint().add(invariant);
      //create the association
      //XX AAxiomDom.add(dom,invariant);
      dom = null;
      Logger.logDebug(idElement);
    } else if (jj_2_59(2)) {
      idElement = ID_FUNCTION();
      if (jj_2_57(2)) {
        jj_consume_token(114);
        if (jj_2_56(2)) {
          dom = getDomainByID();
        } else {
          ;
        }
        jj_consume_token(116);
funHasArg = true;
      } else {
        ;
      }
if (!funHasArg)
      {
        LinkedList f_list = (LinkedList) declared_Func.get(idElement);
        if (f_list == null) {if (true) throw new ParseException("Error: The function " + idElement + " has not been declared. Invariant declaration failed.");}
        else if (f_list.size() == 1) func = (Function) f_list.getFirst();
        else {if (true) throw new ParseException("Error: The function " + idElement + " is overloaded. Specify its domain in the invariant declaration.");}
      }
      else
      {
        func = Utility.getFunction(idElement, dom, false, new HashMap(), declared_Func);
        if (func == null) {if (true) throw new ParseException("Error: The function " + idElement + "(" + dom.getName() + ") has not been declared. Invariant declaration failed ");}
      }
      functions.add(func);
      func.getConstraint().add(invariant);
      //create the association
      //XX AAxiomFunc.add(func,invariant);
      Logger.logDebug(idElement);
      if (func.getDomain() != null) Logger.logDebug("(" + func.getDomain().getName() + ")");
      funHasArg = false;
    } else if (jj_2_60(2)) {
      idElement = ID_RULE();
rule = Utility.getRuleByNameDom(declared_Rules, idElement, null);
      rules.add(rule);
      rule.getConstraint().add(invariant);
      Logger.logDebug(idElement);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_21:
    while (true) {
      if (jj_2_61(2)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(115);
      if (jj_2_64(2)) {
        idElement = ID_DOMAIN();
dom = (Domain) declared_Dom.get(idElement);
        if (dom == null) dom = Utility.getBasicDomain(domainsFactory, idElement);
        if (dom == null) dom = Utility.getPredefinedAbstractDomain(domainsFactory, idElement);
        if (dom == null) dom = Utility.getStructuredDomain(domainsFactory, idElement, header.getSignature());
        if (dom == null) {if (true) throw new ParseException("Error: The domain " + idElement + " has not been declared. Invariant declaration failed.");}
        domains.add(dom);
        dom.getConstraint().add(invariant);
        //create the association
        //XX AAxiomDom.add(dom,invariant);
        dom = null;
        Logger.logDebug("," + idElement);
      } else if (jj_2_65(2)) {
        idElement = ID_FUNCTION();
        if (jj_2_63(2)) {
          jj_consume_token(114);
          if (jj_2_62(2)) {
            dom = getDomainByID();
          } else {
            ;
          }
          jj_consume_token(116);
        } else {
          ;
        }
if (!funHasArg)
        {
          LinkedList f_list = (LinkedList) declared_Func.get(idElement);
          if (f_list == null) {if (true) throw new ParseException("Error: The function " + idElement + " has not been declared. Invariant declaration failed.");}
          else if (f_list.size() == 1) func = (Function) f_list.getFirst();
          else {if (true) throw new ParseException("Error: The function " + idElement + " is overloaded. Specify its domain in the invariant declaration.");}
        }
        else
        {
          func = Utility.getFunction(idElement, dom, false, new HashMap(), declared_Func);
          if (func == null) {if (true) throw new ParseException("Error: The function " + idElement + "(" + dom.getName() + ") has not been declared. Invariant declaration failed.");}
        }
        functions.add(func);
        func.getConstraint().add(invariant);
        //create the association
        //XX AAxiomFunc.add(func,invariant);
        Logger.logDebug("," + idElement);
        if (func.getDomain() != null) Logger.logDebug("(" + func.getDomain().getName() + ")");
        funHasArg = false;
      } else if (jj_2_66(2)) {
        idElement = ID_RULE();
rule = Utility.getRuleByNameDom(declared_Rules, idElement, null);
        rules.add(rule);
        rule.getConstraint().add(invariant);
        //create the association
        //XX AAxiomRule.add(rule,invariant);
        Logger.logDebug("," + idElement);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(117);
Logger.logDebug("body:");
    exp = Term(localVar, false, null);
invariant.setBody(exp);
    //create the association
    //XX AAxiomBody AAxiomBody = defPack.getAAxiomBody();
    //XX AAxiomBody.add(invariant,exp);
    //ocl constraint 1 is granted for construction
    //check ocl constraint 2
    //PA 30/12/2010 poiche' abbiamo introdotto gli operatori temporali come
    //funzioni con codominio Boolean, qui bisognerebbe anche controllare
    //che all'interno di exp non sia stata utilizzata una funzione della
    //CTLlibrary o della LTLlibrary
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an invariant must be a term whose associated type-domain is Boolean.");
      //PA 2 feb 2011: aggiunta ParseException  
      {if (true) throw new ParseException("Error: The expression specifying an invariant must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return invariant;}
    throw new Error("Missing return statement in function");
}

//PA 19/05/2014 in order to add the CTLSPEC, LTLSPEC, FAIRNESS, JUSTICE, COMPASSION, and INVAR keywords: START
  final public CtlSpec CtlSpec(Asm m) throws ParseException {Term exp;
  HashMap localVar = new HashMap();
  String name = null;
    jj_consume_token(CTLSPEC);
    if (jj_2_67(2)) {
      name = ID_CTL();
      jj_consume_token(117);
    } else {
      ;
    }
Logger.logDebug("CTLSPEC");
    CtlSpec ctlSpec = defPack.createCtlSpec();
    if (name != null)
    {
      ctlSpec.setName(name);
    }
Logger.logDebug("body:");
    exp = Term(localVar, false, null);
ctlSpec.setBody(exp);
    //PA 30/12/2010 here we should check that no function of the LTLlibrary is used
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying a CTL propery must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying a CTL propery must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return ctlSpec;}
    throw new Error("Missing return statement in function");
}

  final public LtlSpec LtlSpec(Asm m) throws ParseException {Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(LTLSPEC);
    if (jj_2_68(2)) {
      name = ID_LTL();
      jj_consume_token(117);
    } else {
      ;
    }
Logger.logDebug("LTLSPEC");
    LtlSpec ltlSpec = defPack.createLtlSpec();
    if (name != null)
    {
      ltlSpec.setName(name);
    }
Logger.logDebug("body:");
    exp = Term(localVar, false, null);
ltlSpec.setBody(exp);
    //PA 30/12/2010 here we should check that no function of the CTLlibrary is used
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an LTL property must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying an LTL property must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return ltlSpec;}
    throw new Error("Missing return statement in function");
}

  final public FairnessConstraint FairnessConstraint(Asm m) throws ParseException {FairnessConstraint fc;
    if (jj_2_69(2)) {
      fc = JusticeConstraint(m);
    } else if (jj_2_70(2)) {
      fc = CompassionConstraint(m);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return fc;}
    throw new Error("Missing return statement in function");
}

  final public JusticeConstraint JusticeConstraint(Asm m) throws ParseException {Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(JUSTICE);
Logger.logDebug("JUSTICE");
    JusticeConstraint justiceConstraint = defPack.createJusticeConstraint();
Logger.logDebug("body:");
    exp = Term(localVar, false, null);
justiceConstraint.setBody(exp);
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying a JUSTICE constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying a JUSTICE constraint must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return justiceConstraint;}
    throw new Error("Missing return statement in function");
}

  final public CompassionConstraint CompassionConstraint(Asm m) throws ParseException {Term p, q;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(COMPASSION);
Logger.logDebug("COMPASSION");
    CompassionConstraint compassionConstraint = defPack.createCompassionConstraint();
    jj_consume_token(114);
Logger.logDebug("p:");
    p = Term(localVar, false, null);
    jj_consume_token(115);
Logger.logDebug("q:");
    q = Term(localVar, false, null);
compassionConstraint.setP(p);
    if (!OCL_Checker.isBoolean(p))
    {
      Logger.logErr("Error: The expression p specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression p specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");}
    }
    compassionConstraint.setQ(q);
    if (!OCL_Checker.isBoolean(q))
    {
      Logger.logErr("Error: The expression q specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression q specifying a COMPASSION constraint must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return compassionConstraint;}
    throw new Error("Missing return statement in function");
}

  final public InvarConstraint InvarConstraint(Asm m) throws ParseException {Term exp;
  HashMap localVar = new HashMap();
  String name = null;
  Token t;
    jj_consume_token(INVAR);
Logger.logDebug("INVAR");
    InvarConstraint invarConstraint = defPack.createInvarConstraint();
Logger.logDebug("body:");
    exp = Term(localVar, false, null);
invarConstraint.setBody(exp);
    if (!OCL_Checker.isBoolean(exp))
    {
      Logger.logErr("Error: The expression specifying an INVAR constraint must be a term whose associated type-domain is Boolean.");
      {if (true) throw new ParseException("Error: The expression specifying an INVAR constraint must be a term whose associated type-domain is Boolean.");}
    }
{if ("" != null) return invarConstraint;}
    throw new Error("Missing return statement in function");
}

//PA 19/05/2014 in order to add the CTLSPEC, LTLSPEC, FAIRNESS, JUSTICE, COMPASSION, and INVAR keywords: END
/*-----------------------------------------------------------*/
/**********************    DOMAIN    *************************/
/*-----------------------------------------------------------*/
  final public Domain Domain() throws ParseException {Domain d;
    if (jj_2_71(2)) {
      d = ConcreteDomain();
    } else if (jj_2_72(2)) {
      d = TypeDomain();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

/*----------------------  ConcreteDomain  --------------------*/
  final public ConcreteDomain ConcreteDomain() throws ParseException {String name;
  boolean isDynamic = false;
  Domain typeDom;
    if (jj_2_73(2)) {
      jj_consume_token(DYNAMIC);
isDynamic = true;
    } else {
      ;
    }
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
    jj_consume_token(SUBSETOF);
    typeDom = getDomainByID();
if (!(typeDom instanceof TypeDomain))
    {
      {if (true) throw new ParseException("Error: A concrete domain cannot be defined over a concrete domain.");}
    }
    //create the object
    ConcreteDomain concreteDom = defPack.getDomains().createConcreteDomain();
    concreteDom.setName(name);
    concreteDom.setIsDynamic(isDynamic);
    //set references
    concreteDom.setTypeDomain((TypeDomain) typeDom);
    Logger.logDebug(isDynamic ? "dynamic" : "" + "domain " + name + " subsetof " + typeDom.getName());
    {if ("" != null) return concreteDom;}
    throw new Error("Missing return statement in function");
}

/*----------------------   TypeDomain  Ok! ----------------------*/
  final public TypeDomain TypeDomain() throws ParseException {TypeDomain d;
    if (jj_2_74(2)) {
      d = AnyDomain();
    } else if (jj_2_75(2)) {
      d = StructuredTD();
    } else if (jj_2_76(2)) {
      d = EnumTD();
    } else if (jj_2_77(2)) {
      d = AbstractTD();
    } else if (jj_2_78(2)) {
      d = BasicTD();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

/*---------------  AnyDomain  To be done! ------------------*/
  final public AnyDomain AnyDomain() throws ParseException {String name;
    jj_consume_token(ANYDOMAIN);
    name = ID_DOMAIN();
AnyDomain d = Utility.getAnyDomain(domainsFactory, name);
    if (d == null)
    {
      // TODO
      // check name and in case
      // throw new ParseException("Error: The domain "+ name + " cannot be declared as an AnyDomain");
      d = domainsFactory.createAnyDomain(name);
    }
    Logger.logDebug("anydomain " + name);
    {if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

/*---------------  BasicTD  OK! ------------------*/
  final public BasicTd BasicTD() throws ParseException {String name;
    jj_consume_token(BASIC);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
BasicTd basicTd = Utility.getBasicDomain(domainsFactory, name);
    if (basicTd == null) {if (true) throw new ParseException("Error: A basic domain " + name + " not allowed has been declared.");}
    Logger.logDebug("basic domain " + name);
    {if ("" != null) return basicTd;}
    throw new Error("Missing return statement in function");
}

/*-------------  AbstractTD  OK! -----------------*/
  final public AbstractTd AbstractTD() throws ParseException {String name;
  boolean isDynamic = false;
    if (jj_2_79(2)) {
      jj_consume_token(DYNAMIC);
isDynamic = true;
    } else {
      ;
    }
    jj_consume_token(ABSTRACT);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
// try predefined
    AbstractTd abstractTd = Utility.getPredefinedAbstractDomain(domainsFactory, name);
    // otherwise create new one
    if (abstractTd == null)
    {
      abstractTd = domainsFactory.createAbstractTd();
      abstractTd.setName(name);
      abstractTd.setIsDynamic(isDynamic);
      Logger.logDebug("creating abstract domain " + name);
    }
    else
    {
      Logger.logDebug("abstract domain " + name);
    }
    {if ("" != null) return abstractTd;}
    throw new Error("Missing return statement in function");
}

/*---------------  EnumTD  OK! -------------------*/
  final public EnumTd EnumTD() throws ParseException {String name;
  EnumElement elem;
    jj_consume_token(ENUM);
    jj_consume_token(DOMAIN);
    name = ID_DOMAIN();
EnumTd enumTd = defPack.getDomains().createEnumTd();
    enumTd.setName(name);
    Collection elements = enumTd.getElement();
    Logger.logDebug("enum domain " + name);
    jj_consume_token(EQ);
    jj_consume_token(118);
    elem = EnumElement();
//add the new element to the collection
    elements.add(elem);
    //create the association
    //XX AEnumTdElem.add(elem,enumTd);
    //insert it in the hashMap of enum elements
    String symbol = elem.getSymbol();
    if (enumElem.put(symbol, enumTd) != null)
    {
      {if (true) throw new ParseException("The enum symbol " + symbol + " is duplicate");}
    }
    Logger.logDebug("={" + symbol);
    label_22:
    while (true) {
      if (jj_2_80(2)) {
        ;
      } else {
        break label_22;
      }
      if (jj_2_81(2)) {
        jj_consume_token(119);
      } else if (jj_2_82(2)) {
        jj_consume_token(115);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      elem = EnumElement();
//add new element to the collection
      elements.add(elem);
      //create the association
      //XX AEnumTdElem.add(elem,enumTd);
      //insert it in the hashMap of enum elements
      symbol = elem.getSymbol();
      if (enumElem.put(symbol, enumTd) != null)
      {
        {if (true) throw new ParseException("The enum symbol " + symbol + " is duplicate");}
      }
      Logger.logDebug("|" + symbol);
    }
    jj_consume_token(120);
Logger.logDebug("}");
    {if ("" != null) return enumTd;}
    throw new Error("Missing return statement in function");
}

  final public EnumElement EnumElement() throws ParseException {String symbol;
    symbol = ID_ENUM();
EnumElement elem = defPack.getDomains().createEnumElement();
    elem.setSymbol(symbol);
    {if ("" != null) return elem;}
    throw new Error("Missing return statement in function");
}

/*-------------  StructuredTD  OK! ---------------*/
  final public StructuredTd StructuredTD() throws ParseException {StructuredTd d;
    if (jj_2_83(2)) {
      d = RuleDomain();
    } else if (jj_2_84(2)) {
      d = ProductDomain();
    } else if (jj_2_85(2)) {
      d = SequenceDomain();
    } else if (jj_2_86(2)) {
      d = PowersetDomain();
    } else if (jj_2_87(2)) {
      d = BagDomain();
    } else if (jj_2_88(2)) {
      d = MapDomain();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

  final public RuleDomain RuleDomain() throws ParseException {Domain dom;
    jj_consume_token(RULEDOM);
List ruleElemList = new LinkedList();
    if (jj_2_90(2)) {
      jj_consume_token(114);
      dom = getDomainByID();
ruleElemList.add(dom);
      label_23:
      while (true) {
        if (jj_2_89(2)) {
          ;
        } else {
          break label_23;
        }
        jj_consume_token(115);
        dom = getDomainByID();
ruleElemList.add(dom);
      }
      jj_consume_token(116);
    } else {
      ;
    }
{if ("" != null) return Utility.getRuleDomain(ruleElemList, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

  final public ProductDomain ProductDomain() throws ParseException {Domain dom;
    jj_consume_token(PROD);
List prodElemList = new LinkedList();
    jj_consume_token(114);
    dom = getDomainByID();
//a StructuredTD can not be defined over a concrete domain  NO LONGER APPLIES!!!
    //if(!(dom instanceof TypeDomain))
    //   {   throw new ParseException("Error: A StructuredTD domain can not be defined over a concrete domain.");}
    //add a new element to the Domain list
    prodElemList.add(dom); //prodElemList.add((TypeDomain)dom);

    label_24:
    while (true) {
      jj_consume_token(115);
      dom = getDomainByID();
//a StructuredTD can not be defined over a concrete domain  NO LONGER APPLIES!!!
      //if(!(dom instanceof TypeDomain))
      //   {   throw new ParseException("Error: A StructuredTD domain can not be defined over a concrete domain.");}
      //add a new element to the Domain list
      prodElemList.add(dom); //prodElemList.add((TypeDomain)dom);

      if (jj_2_91(2)) {
        ;
      } else {
        break label_24;
      }
    }
    jj_consume_token(116);
{if ("" != null) return Utility.getProduct(prodElemList, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

//OK!
  final public SequenceDomain SequenceDomain() throws ParseException {Domain dom;
    jj_consume_token(SEQ);
    jj_consume_token(114);
    dom = getDomainByID();
    jj_consume_token(116);
//NO LONGER APPLIES!!!
    //a SeqTD can not be defined over a concrete domain
    //if(!(dom instanceof TypeDomain))
    //{   throw new ParseException("Error: A SequenceTD can not be defined over a concrete domain.");}
    {if ("" != null) return Utility.getSequence(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

  final public PowersetDomain PowersetDomain() throws ParseException {Domain dom;
    jj_consume_token(POWERSET);
    jj_consume_token(114);
    dom = getDomainByID();
    jj_consume_token(116);
//NO LONGER APPLIES!!!
    //a PowerTD can not be defined over a concrete domain
    // if(!(dom instanceof TypeDomain))
    //    {   throw new ParseException("Error: A PowerTD can not be defined over a concrete domain.");}
    {if ("" != null) return Utility.getPowerset(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

  final public BagDomain BagDomain() throws ParseException {Domain dom;
    jj_consume_token(BAG);
    jj_consume_token(114);
    dom = getDomainByID();
    jj_consume_token(116);
//NO LONGER APPLIES!!!
    //a BagTD can not be defined over a concrete domain
    //if(!(dom instanceof TypeDomain))
    //   {   throw new ParseException("Error: A BagTD domain can not be defined over a concrete domain.");}
    {if ("" != null) return Utility.getBag(dom, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

  final public MapDomain MapDomain() throws ParseException {Domain dom1, dom2;
    jj_consume_token(MAP);
    jj_consume_token(114);
    dom1 = getDomainByID();
    jj_consume_token(115);
    dom2 = getDomainByID();
    jj_consume_token(116);
//NO LONGER APPLIES!!!
    //a MapTD domain can not be defined over a concrete domain
    //if(!(dom1 instanceof TypeDomain)||!(dom2 instanceof TypeDomain))
    //    {   throw new ParseException("Error: A MapTD domain can not be defined over a concrete domain.");}
    {if ("" != null) return Utility.getMap(dom1, dom2, defPack, header.getSignature());}
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------//
  final public Domain getDomainByID() throws ParseException {String domName;
  Domain domain;
    if (jj_2_92(2)) {
      domName = ID_DOMAIN();
domain = declared_Dom.get(domName);
      if (domain == null) domain = Utility.getPredefinedDomain(domainsFactory, domName);
      if (domain == null) {
                  {if (true) throw new ParseException("Error: " + domName + " domain is not declared.");}
      }
    } else if (jj_2_93(2)) {
      domain = StructuredTD();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return domain;}
    throw new Error("Missing return statement in function");
}

//------------------------------------------------------------//
/*-----------------------------------------------------------*/
/**********************   FUNCTIONS   OK! ************************/
/*-----------------------------------------------------------*/
  final public Function Function() throws ParseException {Function func;
    if (jj_2_94(2)) {
      func = BasicFunction();
    } else if (jj_2_95(2)) {
      func = DerivedFunction();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public BasicFunction BasicFunction() throws ParseException {BasicFunction func;
    if (jj_2_96(2)) {
      func = StaticFunction();
    } else if (jj_2_97(2)) {
      func = DynamicFunction();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public DerivedFunction DerivedFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
    jj_consume_token(DERIVED);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
DerivedFunction func = defPack.createDerivedFunction();
    func.setName(funcName);
    if (jj_2_98(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("derived function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public StaticFunction StaticFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
StaticFunction func = defPack.createStaticFunction();
    jj_consume_token(STATIC);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_99(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("static function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

//OK!
  final public DynamicFunction DynamicFunction() throws ParseException {DynamicFunction result;
    if (jj_2_100(2)) {
      result = OutFunction();
    } else if (jj_2_101(2)) {
      result = MonitoredFunction();
    } else if (jj_2_102(2)) {
      result = SharedFunction();
    } else if (jj_2_103(2)) {
      result = ControlledFunction();
    } else if (jj_2_104(2)) {
      result = LocalFunction();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

  final public LocalFunction LocalFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
LocalFunction func = defPack.createLocalFunction();
    if (jj_2_105(2)) {
      jj_consume_token(DYNAMIC);
    } else {
      ;
    }
    jj_consume_token(LOCAL);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_106(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("local function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public ControlledFunction ControlledFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
ControlledFunction func = defPack.createControlledFunction();
    if (jj_2_107(2)) {
      jj_consume_token(DYNAMIC);
    } else {
      ;
    }
    jj_consume_token(CONTROLLED);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_108(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
      //create the association
      //XX  AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX  AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("controlled function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public SharedFunction SharedFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
SharedFunction func = defPack.createSharedFunction();
    if (jj_2_109(2)) {
      jj_consume_token(DYNAMIC);
    } else {
      ;
    }
    jj_consume_token(SHARED);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_110(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("shared function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public MonitoredFunction MonitoredFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
MonitoredFunction func = defPack.createMonitoredFunction();
    if (jj_2_111(2)) {
      jj_consume_token(DYNAMIC);
    } else {
      ;
    }
    jj_consume_token(MONITORED);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_112(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
      //create the association
      //XX AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX  AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("monitored function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

  final public OutFunction OutFunction() throws ParseException {String funcName;
  Domain dom = null;
  Domain cod;
OutFunction func = defPack.createOutFunction();
    if (jj_2_113(2)) {
      jj_consume_token(DYNAMIC);
    } else {
      ;
    }
    jj_consume_token(OUT);
    funcName = ID_FUNCTION();
    jj_consume_token(117);
func.setName(funcName);
    if (jj_2_114(2147483647)) {
      dom = getDomainByID();
      jj_consume_token(121);
func.setDomain(dom);
      //create the association
      //XX  AFunctionDomain AFuncDom =  defPack.getAFunctionDomain();
      //XX AFuncDom.add(func,dom);

    } else {
      ;
    }
    cod = getDomainByID();
func.setCodomain(cod);
    //create the association
    //XX AFunctionCodomain AFuncCod =  defPack.getAFunctionCodomain();
    //XX AFuncCod.add(func,cod);
    int arity = OCL_Checker.evalArity(func);
    func.setArity(arity);
    Logger.logDebug("out function " + funcName + ":" + ((dom != null) ? (dom.getName() + "->") : "") + cod.getName() + "\t arity = " + arity);
    {if ("" != null) return func;}
    throw new Error("Missing return statement in function");
}

/*-----------------------------------------------------------*/
/************************   TERMs    ***************************/
/*-----------------------------------------------------------*/
  final public Term Term(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c) throws ParseException {Term t;
    t = TermForUpdateRule(localVar, areAllowedNewVar, c, null);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term TermForUpdateRule(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c, Domain expDom) throws ParseException {Term t;
    if (jj_2_115(2147483647)) {
      t = Expression(localVar, areAllowedNewVar);
    } else if (jj_2_116(2)) {
      t = ExtendedTerm(localVar, areAllowedNewVar, c, expDom);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*    Expression   */
//IMPLIES
  final public Term Expression(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = or_xorLogicExpr(localVar, areAllowedNewVar);
    label_25:
    while (true) {
      if (jj_2_117(2)) {
        ;
      } else {
        break label_25;
      }
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("implies")) {
        tok = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\timplies\t\toperator");
        arg2 = or_xorLogicExpr(localVar, areAllowedNewVar);
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("iff")) {
        tok = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\tiff\t\toperator");
        arg2 = or_xorLogicExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

// OR  //XOR
  final public Term or_xorLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term arg1, arg2;
  Token op;
    arg1 = andLogicExpr(localVar, areAllowedNewVar);
    label_26:
    while (true) {
      if (jj_2_118(2)) {
        ;
      } else {
        break label_26;
      }
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("or")) {
        op = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\tor\t\toperator");
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("xor")) {
        op = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\txor\t\toperator");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      arg2 = andLogicExpr(localVar, areAllowedNewVar);
String funcName = Utility.getFunctionName(op.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      arg1 = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
      if (arg1 == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return arg1;}
    throw new Error("Missing return statement in function");
}

// AND
  final public Term andLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = relationalExpr(localVar, areAllowedNewVar);
    label_27:
    while (true) {
      if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("and")) {
        ;
      } else {
        break label_27;
      }
      tok = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\tand\t\toperator");
      arg2 = relationalExpr(localVar, areAllowedNewVar);
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/* NEVER USED
// in e !in (appartenenza)
Term includesExpr(HashMap localVar, boolean areAllowedNewVar) :
{
  Term t, arg1, arg2;
  Token tok;
}
{
  t = relationalExpr(localVar, areAllowedNewVar)
  (
    (
      LOOKAHEAD({ getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("in") })
      tok = < ID_FUNCTION >
      {
        Logger.logDebug("\tin\t\toperator");
      }
      arg2 = relationalExpr(localVar, areAllowedNewVar)
    | LOOKAHEAD({ getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("notin") })
      tok = < ID_FUNCTION >
      {
        Logger.logDebug("\tnotin\t\toperator");
      }
      arg2 = relationalExpr(localVar, areAllowedNewVar)
    )
    {
      arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) throw new ParseException("Error at ");
    }
  )?
  {
    return t;
  }
}*/

// == != > >= < <=
  final public Term relationalExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = notLogicExpr(localVar, areAllowedNewVar);
    label_28:
    while (true) {
      if (jj_2_119(2)) {
        ;
      } else {
        break label_28;
      }
      if (jj_2_120(2)) {
        tok = jj_consume_token(EQ);
Logger.logDebug("\t=\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else if (jj_2_121(2)) {
        tok = jj_consume_token(NEQ);
Logger.logDebug("\t!=\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else if (jj_2_122(2)) {
        tok = jj_consume_token(LT);
Logger.logDebug("\t<\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else if (jj_2_123(2)) {
        tok = jj_consume_token(LE);
Logger.logDebug("\t<=\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else if (jj_2_124(2)) {
        tok = jj_consume_token(GT);
Logger.logDebug("\t>\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else if (jj_2_125(2)) {
        tok = jj_consume_token(GE);
Logger.logDebug("\t>=\t\toperator");
        arg2 = notLogicExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
      if (t == null)
                {if (true) throw new ParseException("Error reading relationalExpr ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

// NOT
  final public Term notLogicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg;
  Token op;
    if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("not")) {
      op = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\tnot\t\toperator");
      arg = additiveExpr(localVar, areAllowedNewVar);
String funcName = Utility.getFunctionName(op.image);
      TupleTerm tupleT = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    } else if (jj_2_126(2)) {
      t = additiveExpr(localVar, areAllowedNewVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

//
// a +b
//
  final public Term additiveExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = multiplicativeExpr(localVar, areAllowedNewVar);
    label_29:
    while (true) {
      if (jj_2_127(2)) {
        ;
      } else {
        break label_29;
      }
      if (jj_2_128(2)) {
        tok = jj_consume_token(PLUS);
Logger.logDebug("\t+\t\toperator");
        arg2 = multiplicativeExpr(localVar, areAllowedNewVar);
      } else if (jj_2_129(2)) {
        tok = jj_consume_token(MINUS);
Logger.logDebug("\t-\t\toperator");
        arg2 = multiplicativeExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term multiplicativeExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = powerExpr(localVar, areAllowedNewVar);
    label_30:
    while (true) {
      if (jj_2_130(2)) {
        ;
      } else {
        break label_30;
      }
      if (jj_2_131(2)) {
        tok = jj_consume_token(MULT);
Logger.logDebug("\t*\t\toperator");
        arg2 = powerExpr(localVar, areAllowedNewVar);
      } else if (jj_2_132(2)) {
        tok = jj_consume_token(DIV);
Logger.logDebug("\t/\t\toperator");
        arg2 = powerExpr(localVar, areAllowedNewVar);
      } else if (getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("mod")) {
        tok = jj_consume_token(ID_FUNCTION);
Logger.logDebug("\tmod\t\toperator");
        // se definisco il token mod non posso piÃ¹ usarlo come funzione,
              // invece mod Ã¨ definito nella standard library anche come funzione
              // quindi quando trova <MOD> invece che function protesta
              // tok = <MOD> {Logger.logDebug("\tmod\t\toperator");}
              arg2 = powerExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term powerExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t, arg1, arg2;
  Token tok;
    t = unaryExpr(localVar, areAllowedNewVar);
    label_31:
    while (true) {
      if (jj_2_133(2)) {
        ;
      } else {
        break label_31;
      }
      tok = jj_consume_token(PWR);
Logger.logDebug("\t^\t\toperator");
      arg2 = unaryExpr(localVar, areAllowedNewVar);
arg1 = t;
      String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createPair(arg1, arg2, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term unaryExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t = null, arg;
  Token tok;
    if (jj_2_136(2)) {
      if (jj_2_134(2)) {
        tok = jj_consume_token(PLUS);
Logger.logDebug("\tPLUS UNARY -\t\toperator");
        arg = unaryExpr(localVar, areAllowedNewVar);
      } else if (jj_2_135(2)) {
        tok = jj_consume_token(MINUS);
Logger.logDebug("\t MINUS  UNARY -\t\toperator");
        arg = unaryExpr(localVar, areAllowedNewVar);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
String funcName = Utility.getFunctionName(tok.image);
      TupleTerm tupleT = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
      //assert tupleT.getTerms().size() == tupleT.getArity();
      t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
      if (t == null) {if (true) throw new ParseException("Problems in creating unary espressions (" + funcName + ")");}
      {if ("" != null) return t;}
    } else if (jj_2_137(2)) {
      t = basicExpr(localVar, areAllowedNewVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public Term basicExpr(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term t;
    if (jj_2_138(2147483647)) {
      t = BasicTerm(localVar, areAllowedNewVar);
    } else if (jj_2_139(2)) {
      t = DomainTerm();
    } else if (jj_2_140(2147483647)) {
      t = FiniteQuantificationTerm(localVar);
    } else if (jj_2_141(2)) {
      jj_consume_token(114);
Logger.logDebug("\t(");
      t = Expression(localVar, areAllowedNewVar);
      jj_consume_token(116);
Logger.logDebug("\t)");
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////////////////////////////////////
  final public BasicTerm BasicTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {BasicTerm t;
    if (jj_2_142(2)) {
      t = ConstantTerm();
    } else if (jj_2_143(2)) {
      t = VariableTerm(localVar, areAllowedNewVar);
    } else if (jj_2_144(2)) {
      t = FunctionTerm(localVar, areAllowedNewVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public FunctionTerm FunctionTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {String funcName;
  String agentName = null;
  TupleTerm tupleT = null;
  FunctionTerm t;
Logger.logDebug("\t");
    if (jj_2_145(2)) {
      agentName = ID_AGENT();
      jj_consume_token(122);
Logger.logDebug(agentName + ".");
    } else {
      ;
    }
    funcName = ID_FUNCTION();
Logger.logDebug(funcName + "\t\tFunctionTerm beginning");
    if (jj_2_146(2)) {
      tupleT = TupleTerm(localVar, areAllowedNewVar);
    } else {
      ;
    }
if (agentName != null)
    { //create a new functionTerm representing the agent
      FunctionTerm agent_funT;
      if (agentName.equals("self"))
      {
        if ((agent_funT = Utility.createFunctionTerm("self", null, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
      }
      else
      {
        Term arg = Utility.createStringT(agentName, termsPack, domainsFactory);
        TupleTerm agentArg = Utility.createSingle(arg, termsPack, defPack, header.getSignature());
        //assert agentArg.getTerms().size() == agentArg.getArity();
        if ((agent_funT = Utility.createFunctionTerm("getAgent", agentArg, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
      }
      //insert the functionTerm created as first element of tupleT
      if (tupleT == null)
      { //create a new TupleTerm for the FunctionTerm
        tupleT = Utility.createSingle(agent_funT, termsPack, defPack, header.getSignature());
        //assert tupleT.getTerms().size() == tupleT.getArity();
      }
      else tupleT.getTerms().add(0, agent_funT);
    }
    if ((t = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null)
        {if (true) throw new ParseException("Problems in creating Function Term (" + funcName + ")");}
    Logger.logDebug("\t\t\tFunctionTerm end, D=" + t.getDomain().getName());
    {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public LocationTerm LocationTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {String funcName;
  TupleTerm tupleT = null;
  String agentName = null;
  LocationTerm t;
Logger.logDebug("\t");
    if (jj_2_147(2)) {
      agentName = ID_AGENT();
      jj_consume_token(122);
Logger.logDebug(agentName + ".");
    } else {
      ;
    }
    funcName = ID_FUNCTION();
Logger.logDebug("\t" + funcName + "\t\tLocationTerm beginning");
    if (jj_2_148(2)) {
      tupleT = TupleTerm(localVar, areAllowedNewVar);
    } else {
      ;
    }
if (agentName != null)
    { //create a new functionTerm representing the agent
      FunctionTerm agent_funT;
      if (agentName.equals("self"))
      {
        if ((agent_funT = Utility.createFunctionTerm("self", null, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
      }
      else
      {
        Term arg = Utility.createStringT(agentName, termsPack, domainsFactory);
        TupleTerm agentArg = Utility.createPair(arg, null, termsPack, defPack, header.getSignature());
        if ((agent_funT = Utility.createFunctionTerm("getAgent", agentArg, termsPack, declared_Func, declared_Dom, defPack, header.getSignature())) == null) {if (true) throw new ParseException("Error at ");}
      }
      //insert the functionTerm created as first element of tupleT
      if (tupleT == null)
      { //create a new TupleTerm for the FunctionTerm
        tupleT = Utility.createPair(agent_funT, null, termsPack, defPack, header.getSignature());
      }
      else tupleT.getTerms().add(0, agent_funT);
    }
    FunctionTerm f = Utility.createFunctionTerm(funcName, tupleT, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
    t = (LocationTerm) f;
    if (t == null) {if (true) throw new ParseException("Problems in creating Location Term ("+ funcName + ")");}
    Logger.logDebug("\t\t\tLocationTerm end, TD=" + t.getDomain().getName());
    {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/** reads a variable term v:
* if v is not in localVar and not areAllowedNewVar parseException
* if v is not in localVar and areAllowedNewVar then builds new variable
* if v is in localVar then insert it in localVar and return that variable
*/
  final public VariableTerm VariableTerm(HashMap < String, VariableTerm > localVar, boolean areAllowedNewVar) throws ParseException {String name;
  VariableKind kind = VariableKind.LOGICAL_VAR; //Initially new created variableTerm have kind=logical

    name = ID_VARIABLE();
VariableTerm variable = (VariableTerm) localVar.get(name);
    if (!areAllowedNewVar && variable == null) {if (true) throw new ParseException("Error: The definition of new variable is not allowed and " + name + " variable occurs for the first time");}
    if (variable == null) //create a new variable
    { //create the object
      variable = termsPack.getBasicTerms().createVariableTerm(name, kind);
      //add this new variable to the localVar HashMap
      localVar.put(name, variable);
      //set TypeDomain
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The AnyDomain is not defined");}
      variable.setDomain(anyDomain);
    } //else use the variable found in the HashMap
    //OCL constraints are granted for construction.
    //The variable associations are set through the updateVariable() method invoked by the construct that use the variable
    Logger.logDebug("\t" + name + "\t\tVariableTerm, D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    {if ("" != null) return variable;}
    throw new Error("Missing return statement in function");
}

  final public ConstantTerm ConstantTerm() throws ParseException {ConstantTerm t;
    if (jj_2_149(2147483647)) {
      t = ComplexTerm();
    } else if (jj_2_150(2147483647)) {
      t = RealTerm();
    } else if (jj_2_151(2)) {
      t = IntegerTerm();
    } else if (jj_2_152(2)) {
      t = NaturalTerm();
    } else if (jj_2_153(2)) {
      t = CharTerm();
    } else if (jj_2_154(2)) {
      t = StringTerm();
    } else if (jj_2_155(2)) {
      t = BooleanTerm();
    } else if (jj_2_156(2)) {
      t = UndefTerm();
    } else if (jj_2_157(2)) {
      t = EnumTerm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public ComplexTerm ComplexTerm() throws ParseException {Token t;
  String symbol;
    t = jj_consume_token(COMPLEX_NUMBER);
symbol = t.image;
    //create the object
    ComplexTerm term = termsPack.getFurtherTerms().createComplexTerm();
    // set the symbol
    term.setSymbol(symbol);
    //look for the Complex domain reference
    BasicTd complexDom = Utility.getBasicDomain(domainsFactory, "Complex");
    //set the reference
    term.setDomain(complexDom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tComplexTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public RealTerm RealTerm() throws ParseException {Token t;
  String symbol = "";
    t = jj_consume_token(REAL_NUMBER);
symbol = symbol.concat(t.image);
    //create the object
    RealTerm term = termsPack.getFurtherTerms().createRealTerm();
    term.setSymbol(symbol);
    //look for the Real domain reference in the predefined_Dom HashMap
    TypeDomain dom = Utility.getBasicDomain(domainsFactory, "Real");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Real domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tRealTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public IntegerTerm IntegerTerm() throws ParseException {Token t;
  String symbol = "";
    //(t ="+"|t ="-"){symbol = symbol.concat(t.image);}
      t = jj_consume_token(NUMBER);
symbol = symbol.concat(t.image);
    //create the object
    IntegerTerm term = termsPack.getFurtherTerms().createIntegerTerm();
    term.setSymbol(symbol);
    //look for the Integer domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Integer");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Integer domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tIntegerTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public NaturalTerm NaturalTerm() throws ParseException {Token t;
  String symbol;
    t = jj_consume_token(NATNUMBER);
symbol = t.image;
    //create the object
    NaturalTerm term = termsPack.getFurtherTerms().createNaturalTerm();
    term.setSymbol(symbol);
    //look for the Natural domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Natural");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Natural domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tNaturalTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public CharTerm CharTerm() throws ParseException {Token t;
  String symbol;
    t = jj_consume_token(CHAR_LITERAL);
symbol = t.image;
    //create the object
    CharTerm term = termsPack.getFurtherTerms().createCharTerm();
    term.setSymbol(symbol);
    //look for the char domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Char");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Char domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tCharTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public StringTerm StringTerm() throws ParseException {Token t;
  String symbol;
    t = jj_consume_token(STRING_LITERAL);
//PA 2018/07/25
    //Con l'istruzione symbol = t.image; le stringhe sono
    //ritornate con le virgolette.
    //symbol = t.image;
    //Con l'istruzione qui sotto commentata le virgolette
    //sono rimosse. E' meglio averle le virgolette, o non averle? 
    symbol = t.image.substring(1, t.image.length() - 1);
    StringTerm term = Utility.createStringT(symbol, termsPack, domainsFactory);
    if (term == null) {if (true) throw new ParseException("Error: The Char domain is not defined");}
    Logger.logDebug("\t" + term.getSymbol() + "\t\tStringTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public BooleanTerm BooleanTerm() throws ParseException {Token t;
  String symbol;
    if (jj_2_158(2)) {
      t = jj_consume_token(TRUE);
    } else if (jj_2_159(2)) {
      t = jj_consume_token(FALSE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
symbol = t.image;
    BooleanTerm term = termsPack.getBasicTerms().createBooleanTerm(Boolean.parseBoolean(symbol));
    //look for the boolean domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Boolean");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Boolean domain is not defined.");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tBooleanTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public UndefTerm UndefTerm() throws ParseException {Token t;
  String symbol;
    t = jj_consume_token(UNDEF);
Logger.logDebug("match:UndefTerm");
    symbol = t.image;
    UndefTerm term = termsPack.getBasicTerms().createUndefTerm();
    term.setSymbol(symbol);
    //look for the Undef domain reference in the predefined_Dom HashMap
    TypeDomain dom = (TypeDomain) Utility.getBasicDomain(domainsFactory, "Undef");
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The Undef domain is not defined");}
    }
    //set references
    term.setDomain(dom);
    //constraint 1 is granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tUndefTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public EnumTerm EnumTerm() throws ParseException {String symbol;
    symbol = ID_ENUM();
//look for the enumTerm symbol in the enumElem HashMap to obtain the enumeration type-domain to which the enum term is associated.
    TypeDomain dom = (TypeDomain) enumElem.get(symbol);
    if (dom == null)
    {
      {if (true) throw new ParseException("Error: The enumeration element " + symbol + " is not defined.");}
    }
    //create the object
    EnumTerm term = termsPack.getFurtherTerms().createEnumTerm();
    term.setSymbol(symbol);
    //set references
    term.setDomain(dom);
    //constraint 1 and 2 are granted for construction
    Logger.logDebug("\t" + term.getSymbol() + "\t\tEnumTerm, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public ExtendedTerm ExtendedTerm(HashMap localVar, boolean areAllowedNewVar, RuleDeclaration c, Domain expDom) throws ParseException {ExtendedTerm t;
    if (jj_2_160(2)) {
      t = ConditionalTerm(localVar);
    } else if (jj_2_161(2)) {
      t = CaseTerm(localVar);
    } else if (jj_2_162(2)) {
      //to solve the conflict with the finite quantification terms  (exist... | existUnique... |forall... )
          t = TupleTerm(localVar, areAllowedNewVar);
    } else if (jj_2_163(2147483647)) {
      t = VariableBindingTerm(localVar);
    } else if (jj_2_164(2)) {
      t = CollectionTerm(localVar, areAllowedNewVar);
    } else if (jj_2_165(2)) {
      t = RuleAsTerm(localVar, c, expDom);
    } else if (jj_2_166(2)) {
      t = DomainTerm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public ConditionalTerm ConditionalTerm(HashMap localVar) throws ParseException {Term thenT, elseT, guard;
    jj_consume_token(IF);
Logger.logDebug("\tif\t\tConditionalTerm beginning");
    guard = Term(localVar, false, null);
    jj_consume_token(THEN);
Logger.logDebug("\tthen");
    thenT = Term(localVar, false, null);
ConditionalTerm term = termsPack.getFurtherTerms().createConditionalTerm();
    //set references
    term.setGuard(guard);
    term.setThenTerm(thenT);
    //create associations
    //XX AConditionalTermGuard a_conditionalT_guard = termsPack.getFurtherTerms().getAConditionalTermGuard();
    //XX a_conditionalT_guard.add(term,guard);
    //XX AConditionalTermThenTerm a_conditionalT_thenT = termsPack.getFurtherTerms().getAConditionalTermThenTerm();
    //XX a_conditionalT_thenT.add(term,thenT);

    if (jj_2_167(2)) {
      jj_consume_token(ELSE);
Logger.logDebug("\telse");
      elseT = Term(localVar, false, null);
//set the reference
      term.setElseTerm(elseT);
      //set the association
      //XX AConditionalTermElseTerm a_conditionalT_elseT = termsPack.getFurtherTerms().getAConditionalTermElseTerm();
      //XX a_conditionalT_elseT.add(term,elseT);

    } else {
      ;
    }
    jj_consume_token(ENDIF);
//set TypeDomain with "then term" type domain
    TypeDomain td = OCL_Checker.getTypeDomain(thenT.getDomain());
    term.setDomain(td);
    //check OCL constraints
    if (!OCL_Checker.checkConditionalTerm(term))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a conditional term.");
    }
    Logger.logDebug("\tendif\t\tConditionalTerm end, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public CaseTerm CaseTerm(HashMap localVar) throws ParseException {Term switchT, caseT, resT;
    jj_consume_token(SWITCH);
Logger.logDebug("\tswitch\t\tCaseTerm beginning");
    switchT = Term(localVar, false, null);
CaseTerm term = termsPack.getFurtherTerms().createCaseTerm();
    //set the reference
    term.setComparedTerm(switchT);
    List comparingList = term.getComparingTerm();
    List resultList = term.getResultTerms();
    label_32:
    while (true) {
      jj_consume_token(CASE);
Logger.logDebug("\tcase");
      caseT = Term(localVar, false, null);
      jj_consume_token(117);
Logger.logDebug("\t:");
      resT = Term(localVar, false, null);
//set the reference
      comparingList.add(caseT);
      resultList.add(resT);
      if (jj_2_168(2)) {
        ;
      } else {
        break label_32;
      }
    }
    if (jj_2_169(2)) {
      jj_consume_token(OTHERWISE);
Logger.logDebug("\totherwise");
      resT = Term(localVar, false, null);
//set the reference
      term.setOtherwiseTerm(resT);
      //create associations
      //X ACaseTermOtherwiseTerm a_caseT_otherwiseT = termsPack.getFurtherTerms().getACaseTermOtherwiseTerm();
      //X a_caseT_otherwiseT.add(term,resT);

    } else {
      ;
    }
    jj_consume_token(END_SWITCH);
//set TypeDomain with either the type domain of the last case result term or the one of the otherwise term (if it exist)
    TypeDomain td = OCL_Checker.getTypeDomain(resT.getDomain());
    term.setDomain(td);
    //check OCL constraints
    //constraint 1 is granted for construction
    //check constraints 2-3
    // to be improved
    if (!OCL_Checker.checkCaseTerm(term))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a case term");
      {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a case term");}
    }
    Logger.logDebug("\tendswitch\t\tCaseTerm end, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public TupleTerm TupleTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {int arity;
  Term t;
    jj_consume_token(114);
Logger.logDebug("\t(\t\tTupleTerm beginning");
    //create the object
    TupleTerm term = termsPack.getBasicTerms().createTupleTerm();
    //List < Term > elemList = term.getTerms();//PA: 2018/01/08
    List < Term > elemList = new ArrayList < Term > (); //PA: 2018/01/08
    List < Domain > prodDomList = new LinkedList < Domain > ();
    t = Term(localVar, areAllowedNewVar, null);
//add the element to the terms list
    elemList.add(t);
    //add this domain to the domain list
    prodDomList.add(t.getDomain());
    //check constraint 1 (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a tuple term");}
    label_33:
    while (true) {
      if (jj_2_170(2)) {
        ;
      } else {
        break label_33;
      }
      jj_consume_token(115);
      t = Term(localVar, areAllowedNewVar, null);
//add a new element to the terms list
      elemList.add(t);
      //add this type domain to the domain list
      prodDomList.add(t.getDomain());
      //check constraint 1 (check elements type)
      if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a tuple term");}
    }
    jj_consume_token(116);
//set the tuple arity
    arity = elemList.size();
    term.setArity(arity);
    term.getTerms().addAll(elemList); //PA: 2018/01/08
    //set the tuple TypeDomain
    Domain dom;
    if (arity == 1)  //the domain associated to the tuple term must be equal to the one associated to its unique term
    dom = ((Term) elemList.get(0)).getDomain();
    else //the type-domain associated to the tuple term must be a Cartesian product domain
    dom = Utility.getProduct(prodDomList, defPack, header.getSignature());
    term.setDomain(dom);
    //OCL constraints 2-3 granted for construction
    {
      Logger.logDebug("\t)\t\tTupleTerm end, arity=" + term.getArity() + ", TD=" + term.getDomain().getName());
    }
    OCL_Checker.checkTupleTerm(term);
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public CollectionTerm CollectionTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {CollectionTerm t;
    if (jj_2_171(2)) {
      t = SequenceTerm(localVar, areAllowedNewVar);
    } else if (jj_2_172(2147483647)) {
      //{->} stands for the empty map
          t = MapTerm(localVar, areAllowedNewVar);
    } else if (jj_2_173(2)) {
      t = SetTerm(localVar, areAllowedNewVar);
    } else if (jj_2_174(2)) {
      t = BagTerm(localVar, areAllowedNewVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/* A collection of zero or more elements of the same nature which have an order and may be duplicated
For example, Sequence{?one?, ?table?, ?one?} and Sequence{?one?, ?one?, ?table?} are different sequences over the string domain.
*/
  final public SequenceTerm SequenceTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(123);
Logger.logDebug("\t[\t\tSequenceTerm beginning");
//create the object
    SequenceTerm term = termsPack.getFurtherTerms().createSequenceTerm();
    List < Term > elemList = term.getTerms();
    if (jj_2_180(2)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
//add a new element to the terms list
      elemList.add(firstElem);
      //constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a SequenceTerm.");}
      if (jj_2_179(2)) {
        if (jj_2_177(2)) {
          label_34:
          while (true) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
//add a new element to the terms list
          elemList.add(elem);
          //constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a SequenceTerm.");}
            if (jj_2_175(2)) {
              ;
            } else {
              break label_34;
            }
          }
        } else if (jj_2_178(2)) {
          jj_consume_token(117);
Logger.logDebug("\t:");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          if (jj_2_176(2)) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\t" + step + "\t\tinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\n       At a sequenceTerm.");}
          } else {
            ;
          }
Utility.createTermCollection(firstElem, lastElem, elemList, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(124);
//set the size
    size = elemList.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The genric Anydomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemList);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a sequence must have the same type-domain.\n");}
    }
    Logger.logDebug("Common type-domain: " + elemTD.getName());
    SequenceDomain seqDom = Utility.getSequence(elemTD, defPack, header.getSignature());
    //set seqDom as the sequence TypeDomain
    term.setDomain(seqDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\t]\t\tSequenceTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//A collection of zero or more elements of the same nature which have no order and cannot be duplicated
  final public SetTerm SetTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(118);
Logger.logDebug("\t{\t\tSetTerm beginning");
//create the object
    SetTerm term = termsPack.getBasicTerms().createSetTerm();
    //X ASetTermTerm a_SetTerm_Term = termsPack.getBasicTerms().getASetTermTerm();
    Collection elemColl = term.getTerm();
    if (jj_2_186(2)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
//constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a SetTerm.");}
      //add a new element to the terms list
      elemColl.add(firstElem);
      //add a new association
      //X a_SetTerm_Term.add(term,firstElem);
      //??? In this parser it is created a new term for every used symbol (number,char,string,boolean,ecc...)
      //So every term is a different object and two terms with the same value are inserted in the collection twice.
      //create an HashMap containing set elements and check if an element is duplicated
      HashMap insertedElem = new HashMap();
      String key = Utility.appendInKey(new StringBuffer(), firstElem).toString();
      insertedElem.put(new Integer(key.hashCode()), key);
      if (jj_2_185(2)) {
        if (jj_2_183(2)) {
          label_35:
          while (true) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
//constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a SetTerm.");}
          //add a new element to the term list
          elemColl.add(elem);
          //add a new association
          //X a_SetTerm_Term.add(term,elem);
          //check if the element is duplicated
          key = Utility.appendInKey(new StringBuffer(), elem).toString();
          if (insertedElem.containsKey(new Integer(key.hashCode()))) {if (true) throw new ParseException("Error: Duplicates are not allowed in a set. " + key + " is present twice.");}
          insertedElem.put(new Integer(key.hashCode()), key);
            if (jj_2_181(2)) {
              ;
            } else {
              break label_35;
            }
          }
        } else if (jj_2_184(2)) {
          jj_consume_token(117);
Logger.logDebug("\t:");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          if (jj_2_182(2)) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\t" + step + "\t\tinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\n       At a SetTerm.");}
          } else {
            ;
          }
Utility.createTermCollection(firstElem, lastElem, elemColl, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(120);
//set the size
    size = elemColl.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The generic Anydomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemColl);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a set must have the same type-domain.\n");}
    }
    PowersetDomain setDom = Utility.getPowerset(elemTD, defPack, header.getSignature());
    //set setDom as the set TypeDomain
    term.setDomain(setDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\t}\t\tSetTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

/*A collection of zero or more associations which have no order and cannot be duplicated,
like Map{t1 -> s1, . . ., tn -> sn} where t1, . . ., tn are terms of the same nature, and so s1, . . ., sn.
*/
  final public MapTerm MapTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {Term elem1, elem2;
  TypeDomain sourceTD = null;
  TypeDomain targetTD = null;
    jj_consume_token(118);
Logger.logDebug("\t{\t\tMapTerm beginning");
//create the object
    MapTerm term = termsPack.getFurtherTerms().createMapTerm();
    //AMapTermPair a_MapTerm_Pair = termsPack.getFurtherTerms().getAMapTermPair();
    Collection pairColl = term.getPair();
    if (jj_2_188(2)) {
      jj_consume_token(121);
Logger.logDebug("\t->");
    } else if (jj_2_189(2)) {
      elem1 = Term(localVar, areAllowedNewVar, null);
      jj_consume_token(121);
Logger.logDebug("\t->");
      elem2 = Term(localVar, areAllowedNewVar, null);
//create a new pair
        TupleTerm pair = Utility.createPair(elem1, elem2, termsPack, defPack, header.getSignature());
        //add a new element to the terms list
        pairColl.add(pair);
        //add a new association
        //a_MapTerm_Pair.add(term,pair);
        sourceTD = OCL_Checker.getTypeDomain(elem1.getDomain());
        targetTD = OCL_Checker.getTypeDomain(elem2.getDomain());
        //In this parser it is created a new term for every used symbol (number,char,string,boolean,ecc...)
        //So every term is a different object and two equals pair are inserted in the collection twice
        //create an HashMap containing pairs and check if a pair is duplicated
        HashMap insertedPair = new HashMap();
        StringBuffer key = Utility.appendInKey(new StringBuffer(), elem1);
        key.append("->");
        Utility.appendInKey(key, elem2);
        // TODO: elimina l'uso di String o la conversione
        insertedPair.put(new Integer(key.toString().hashCode()), key.toString());
      label_36:
      while (true) {
        if (jj_2_187(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(115);
        elem1 = Term(localVar, areAllowedNewVar, null);
        jj_consume_token(121);
Logger.logDebug("\t->");
        elem2 = Term(localVar, areAllowedNewVar, null);
//create a new pair
          pair = Utility.createPair(elem1, elem2, termsPack, defPack, header.getSignature());
          //add a new element to the terms list
          pairColl.add(pair);
          //add a new association
          //a_MapTerm_Pair.add(term,pair);
          //check typeDomain of this pair
          if (!OCL_Checker.compatible(sourceTD, elem1.getDomain())) {if (true) throw new ParseException("Error: every pair of a map must be compatible with the type-domain for the first pair element. \n" + "domain of the first element of the first pair: " + sourceTD.getName() + "  domain of another pair: " + elem1.getDomain().getName());}
          if (!OCL_Checker.compatible(targetTD, elem2.getDomain())) {if (true) throw new ParseException("Error: every pair of a map must be compatible with the type-domain for the second pair element. ");}
          //check if a pair is duplicated
          key = Utility.appendInKey(new StringBuffer(), elem1);
          key.append("->");
          Utility.appendInKey(key, elem2);
          // TODO : eliminare conversione a String
          if (insertedPair.containsKey(new Integer(key.toString().hashCode())))
          {
            Logger.logWarning("Warning: Duplicate pairs are not allowed in a map. " + key + " is present twice.");
          }
          insertedPair.put(new Integer(key.hashCode()), key);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(120);
//set the size
    int size = pairColl.size();
    term.setSize(size);
    //set the TypeDomain when map size is 0
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The Anydomain is not defined");}
      sourceTD = targetTD = anyDomain;
    }
    MapDomain mapDom = Utility.getMap(sourceTD, targetTD, defPack, header.getSignature());
    //set setDom as the set TypeDomain
    term.setDomain(mapDom);
    //OCL constraints 1,2 and 3 are granted for construction
    Logger.logDebug("\t}\t\tMapTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//A collection of zero or more elements of the same nature which have no order and may be duplicated
  final public BagTerm BagTerm(HashMap localVar, boolean areAllowedNewVar) throws ParseException {int size;
  Term elem, firstElem, lastElem;
  Token tok;
  double step = 1;
  boolean natural_step = true;
    jj_consume_token(LT);
Logger.logDebug("\t<\t\tBagTerm beginning");
//create the object
    BagTerm term = termsPack.getFurtherTerms().createBagTerm();
    //XX ABagTermTerm a_BagTerm_Term = termsPack.getFurtherTerms().getABagTermTerm();
    Collection elemColl = term.getTerm();
    if (jj_2_195(2)) {
      firstElem = Term(localVar, areAllowedNewVar, null);
//add a new element to the terms list
      elemColl.add(firstElem);
      //add a new association
      //XX  a_BagTerm_Term.add(firstElem,term);
      //constraint 3
      if (!OCL_Checker.termAccepted(firstElem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a BagTerm.");}
      if (jj_2_194(2)) {
        if (jj_2_192(2)) {
          label_37:
          while (true) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
//add a new element to the terms list
          elemColl.add(elem);
          //add a new association
          //XX a_BagTerm_Term.add(elem,term);
          //constraint 3
          if (!OCL_Checker.termAccepted(elem)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a BagTerm.");}
            if (jj_2_190(2)) {
              ;
            } else {
              break label_37;
            }
          }
        } else if (jj_2_193(2)) {
          jj_consume_token(117);
Logger.logDebug("\t:");
          //Interval notation
                  lastElem = Term(localVar, areAllowedNewVar, null);
          if (jj_2_191(2)) {
            jj_consume_token(115);
            elem = Term(localVar, areAllowedNewVar, null);
if (!(elem.getDomain() instanceof IntegerDomain)) natural_step = false;
            step = Utility.convertToDouble(elem);
            Logger.logDebug("\t" + step + "\t\tinterval step");
            if (step <= 0) {if (true) throw new ParseException("The step must be a positive number." + "\n       At a sequenceTerm.");}
          } else {
            ;
          }
Utility.createTermCollection(firstElem, lastElem, elemColl, step, natural_step, termsPack, declared_Func, declared_Dom, defPack, header.getSignature());
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } else {
      ;
    }
    jj_consume_token(GT);
//set the bag size
    size = elemColl.size();
    term.setSize(size);
    //set the TypeDomain
    TypeDomain elemTD;
    if (size == 0) //empty collection
    {
      AnyDomain anyDomain = Utility.getAnyDomain(domainsFactory, anyDomainAnyName);
      if (anyDomain == null) {if (true) throw new ParseException("Error: The AnyDomain is not defined");}
      elemTD = anyDomain;
    }
    else
    {
      elemTD = Utility.getCommonTD(elemColl);
      if (elemTD == null) {if (true) throw new ParseException("Error: every element of a bag must have the same type-domain.\n");}
    }
    BagDomain bagDom = Utility.getBag(elemTD, defPack, header.getSignature());
    //set bagDom as the bag TypeDomain
    term.setDomain(bagDom);
    // ocl constraints 1 and 2 granted for construction
    Logger.logDebug("\t>\t\tBagTerm end, size=" + term.getSize() + ", TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public VariableBindingTerm VariableBindingTerm(HashMap localVar) throws ParseException {VariableBindingTerm t;
    if (jj_2_196(2)) {
      t = LetTerm(localVar);
    } else if (jj_2_197(2)) {
      t = FiniteQuantificationTerm(localVar);
    } else if (jj_2_198(2)) {
      t = ComprehensionTerm(localVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public FiniteQuantificationTerm FiniteQuantificationTerm(HashMap localVar) throws ParseException {FiniteQuantificationTerm t;
    if (jj_2_199(2147483647)) {
      t = ForallTerm(localVar);
    } else if (jj_2_200(2147483647)) {
      t = ExistUniqueTerm(localVar);
    } else if (jj_2_201(2)) {
      t = ExistTerm(localVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
//check OCL constraints
    //(OCL constraint 1)set TypeDomain
    //look for the boolean domain reference in the predefined_Dom HashMap
    TypeDomain td = Utility.getBasicDomain(domainsFactory, "Boolean");
    if (td == null) {if (true) throw new ParseException("\nError: The Boolean domain has not been declared.");}
    //set the reference
    t.setDomain(td);
    //(constrains 4) check if the guard has a Boolen domain as associated TypeDomain
    if ((t.getGuard() != null) && !OCL_Checker.isBoolean(t.getGuard()))
    {
      Logger.logErr("\nError: The type-domain of terms after \"with\" must be the boolean domain\n        At a Finite-Quantification term\n");
    }
    Logger.logDebug(", TD=Boolean");
    {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges
  final public ExistTerm ExistTerm(HashMap localVar) throws ParseException {VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(114);
    jj_consume_token(EXIST);
Logger.logDebug("\t(exist\t\tExistTerm beginning");
    ExistTerm term = termsPack.getFurtherTerms().createExistTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be the power set domain \n" + "       At an ExistTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_38:
    while (true) {
      if (jj_2_202(2)) {
        ;
      } else {
        break label_38;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_FinQuantT_Var.add(variable,term);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At an ExistTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_203(2)) {
      jj_consume_token(WITH);
Logger.logDebug("\twith");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

    } else {
      ;
    }
    jj_consume_token(116);
Logger.logDebug("\t)\t\tExistTerm end");
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges
  final public ExistUniqueTerm ExistUniqueTerm(HashMap localVar) throws ParseException {VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(114);
    jj_consume_token(EXIST);
    jj_consume_token(UNIQUE);
Logger.logDebug("\t(exist unique\t\tExistUniqueTerm beginning");
    ExistUniqueTerm term = termsPack.getFurtherTerms().createExistUniqueTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistUniqueTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AFiniteQuantificationTermVariable a_FinQuantT_Var = termsPack.getFurtherTerms().getAFiniteQuantificationTermVariable();
    //X a_FinQuantT_Var.add(variable,term);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At an ExistUniqueTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_39:
    while (true) {
      if (jj_2_204(2)) {
        ;
      } else {
        break label_39;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExistUniqueTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_FinQuantT_Var.add(variable,term);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At an ExistUniqueTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_205(2)) {
      jj_consume_token(WITH);
Logger.logDebug("\twith");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

    } else {
      ;
    }
    jj_consume_token(116);
Logger.logDebug("\t)\t\tExistUniqueTerm end");
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges
  final public ForallTerm ForallTerm(HashMap localVar) throws ParseException {VariableTerm variable;
  Term inTerm, guard;
    jj_consume_token(114);
    jj_consume_token(FORALL);
Logger.logDebug("\t(forall\t\tForallTerm beginning");
    ForallTerm term = termsPack.getFurtherTerms().createForallTerm();
    List < Term > rangeList = term.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //check constraint 2 of superclass(part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At an ForallTerm");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_40:
    while (true) {
      if (jj_2_206(2)) {
        ;
      } else {
        break label_40;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//set the reference to the variable
      variableList.add(variable);
      //check constraint 2 of superclass(part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At an ForallTerm");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_207(2)) {
      jj_consume_token(WITH);
Logger.logDebug("\twith");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //create associations
      //X AFiniteQuantificationTermGuard a_FinQuantT_Guard = termsPack.getFurtherTerms().getAFiniteQuantificationTermGuard();
      //X a_FinQuantT_Guard.add(guard,term);

    } else {
      ;
    }
    jj_consume_token(116);
Logger.logDebug("\t)\t\tForallTerm end");
{if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public LetTerm LetTerm(HashMap localVar) throws ParseException {VariableTerm variable;
  Term assignT, body;
    jj_consume_token(LET);
    jj_consume_token(114);
Logger.logDebug("\tlet(\t\tLetTerm beginning");
//check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetTerm. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(EQ);
Logger.logDebug("\t=");
    assignT = Term(localVar, false, null);
LetTerm term = termsPack.getFurtherTerms().createLetTerm();
    List variableList = term.getVariable();
    List assignTList = term.getAssignmentTerm();
    //ALetTermVariable a_letT_Var = termsPack.getFurtherTerms().getALetTermVariable();
    //ALetTermAssignmentTerm a_letT_assignT = termsPack.getFurtherTerms().getALetTermAssignmentTerm();
    //set variable TypeDomain         
    // FIXME 1/4/2009 the domain can be a concrete domain, not only a type domain!
    Domain varTD = null;
    if (assignT.getDomain() instanceof ConcreteDomain)
    {
      varTD = assignT.getDomain();
    }
    else
    {
      varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
    }
    variable.setDomain(varTD);
    //set variable kind
    if (varTD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
    //set references
    variableList.add(variable);
    assignTList.add(assignT);
    //create associations
    //a_letT_Var.add(variable,term);
    //a_letT_assignT.add(term,assignT);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    label_41:
    while (true) {
      if (jj_2_208(2)) {
        ;
      } else {
        break label_41;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetTerm. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(EQ);
Logger.logDebug("\t=");
      assignT = Term(localVar, false, null);
// set variable TypeDomain
      //varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
      varTD = null;
      if (assignT.getDomain() instanceof ConcreteDomain)
      {
        varTD = assignT.getDomain();
      }
      else
      {
        varTD = OCL_Checker.getTypeDomain(assignT.getDomain());
      }
      variable.setDomain(varTD);
      // set variable kind
      if (varTD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
      //else kind=logicalVar (it has been setted when the variable term has been created)
      //set references
      variableList.add(variable);
      assignTList.add(assignT);
      //create associations
      //a_letT_Var.add(variable,term);
      //a_letT_assignT.add(term,assignT);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    }
    jj_consume_token(116);
Logger.logDebug("\t)");
    jj_consume_token(IN);
Logger.logDebug("\tin");
    body = Term(localVar, false, null);
    jj_consume_token(ENDLET);
//set the reference
    term.setBody(body);
    //create the association
    //XX ALetTermBody a_letT_body = termsPack.getFurtherTerms().getALetTermBody();
    //XX a_letT_body.add(term,body);
    //set LetTerm typeDomain
    TypeDomain td = OCL_Checker.getTypeDomain(body.getDomain());
    term.setDomain(td);
    //OCL constraint 1, 2, 3 granted for construction
    {
      Logger.logDebug("\tendlet\t\tLetTerm end, TD=" + term.getDomain().getName());
    }
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public ComprehensionTerm ComprehensionTerm(HashMap localVar) throws ParseException {ComprehensionTerm t;
    if (jj_2_209(2147483647)) {
      t = SetCT(localVar);
    } else if (jj_2_210(2)) {
      t = MapCT(localVar);
    } else if (jj_2_211(2)) {
      t = SequenceCT(localVar);
    } else if (jj_2_212(2)) {
      t = BagCT(localVar);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
//constraint 1 checked in the specific terms (SetCT, MapCT, SequenceCT, BagCT)
    //constraint 2 (check if the guard TypeDomain is the Boolean domain)
    if ((t.getGuard() != null) && (!OCL_Checker.isBoolean(t.getGuard())))
    {
      Logger.logErr("Error: The type-domain of terms after \"with\" must be the boolean domain\n        At a comprehension term\n");
    }
    {if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges.
  final public SetCt SetCT(HashMap localVar) throws ParseException {Term t, inTerm, guard;
  VariableTerm variable;
  SetCt term = termsPack.getFurtherTerms().createSetCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(118);
Logger.logDebug("\t{\t\tSetCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the setCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a SetCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_42:
    while (true) {
      if (jj_2_213(2)) {
        ;
      } else {
        break label_42;
      }
      jj_consume_token(115);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the setCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a SetCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_214(2)) {
      jj_consume_token(119);
Logger.logDebug("\t|");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //set the association
      //X AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //X a_Comp_Guard.add(term,guard);

    } else {
      ;
    }
    jj_consume_token(117);
Logger.logDebug("\t:");
    t = Term(localVar, false, null);
//set the reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a SetComprehensionTerm.\n");}
    jj_consume_token(120);
// set TypeDomain
    TypeDomain td = Utility.getPowerset(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\t}\t\tSetCT end, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges.
  final public MapCt MapCT(HashMap localVar) throws ParseException {Term t1, t2, inTerm, guard;
  VariableTerm variable;
  List < Term > rangeList = new ArrayList < Term > ();
  MapCt term = termsPack.getFurtherTerms().createMapCt(rangeList);
    jj_consume_token(118);
Logger.logDebug("\t{\t\tMapCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the mapCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 3 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a MapCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_43:
    while (true) {
      if (jj_2_215(2)) {
        ;
      } else {
        break label_43;
      }
      jj_consume_token(115);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the mapCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 3 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a MapCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_216(2)) {
      jj_consume_token(119);
Logger.logDebug("\t|");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //set the association
      //X AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //X a_Comp_Guard.add(term,guard);

    } else {
      ;
    }
    jj_consume_token(117);
Logger.logDebug("\t:");
    t1 = Term(localVar, false, null);
    jj_consume_token(121);
Logger.logDebug("\t->");
    t2 = Term(localVar, false, null);
    jj_consume_token(119);
Logger.logDebug("\t|");
//create a new pair
    TupleTerm pair = Utility.createPair(t1, t2, termsPack, defPack, header.getSignature());
    //set the reference
    term.setTerm(pair);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,pair);

    jj_consume_token(120);
// set TypeDomain
    TypeDomain td = Utility.getMap(OCL_Checker.getTypeDomain(t1.getDomain()), OCL_Checker.getTypeDomain(t2.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraints 1, 2 granted for construction
    Logger.logDebug("\t}\t\tMapCTend, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public SequenceCt SequenceCT(HashMap localVar) throws ParseException {//Notation  [D | P : E] where D are variable declarations, P is the property, E is the espression.
  //P is optional, if not present: [D : E]
  Term t, inTerm, guard;
  VariableTerm variable;
  SequenceCt term = termsPack.getFurtherTerms().createSequenceCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(123);
Logger.logDebug("\t[\t\tSequenceCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the SequenceCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof SequenceDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a sequence domain \n" + "       At a SequenceCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_44:
    while (true) {
      if (jj_2_217(2)) {
        ;
      } else {
        break label_44;
      }
      jj_consume_token(115);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the SequenceCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof SequenceDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a sequence domain \n" + "       At a SequenceCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_218(2)) {
      jj_consume_token(119);
Logger.logDebug("\t|");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //set the association
      //AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //a_Comp_Guard.add(term,guard);

    } else {
      ;
    }
    jj_consume_token(117);
Logger.logDebug("\t:");
    t = Term(localVar, false, null);
//set the expression reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a sequence-comprehension term.\n");}
    jj_consume_token(124);
// set TypeDomain
    TypeDomain td = Utility.getSequence(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\t]\t\tSequenceCT end, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges
  final public BagCt BagCT(HashMap localVar) throws ParseException {Term t, inTerm, guard;
  VariableTerm variable;
  BagCt term = termsPack.getFurtherTerms().createBagCt();
  List < Term > rangeList = term.getRanges();
    jj_consume_token(LT);
Logger.logDebug("\t<\t\tBagCT beginning");
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
    if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the BagCT. It is already used.");}
    //set the reference to the variable
    Collection variableList = term.getVariable();
    variableList.add(variable);
    //create the association
    //X AComprehensionTermVariable a_Comp_Var = termsPack.getFurtherTerms().getAComprehensionTermVariable();
    //X a_Comp_Var.add(term,variable);
    //check constraint 2 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof BagDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a bag domain \n" + "       At a BagCT");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    rangeList.add(inTerm);
    label_45:
    while (true) {
      if (jj_2_219(2)) {
        ;
      } else {
        break label_45;
      }
      jj_consume_token(115);
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, null);
//if the TypeDomain associated to this variable is not ANY_DOMAIN then it has been used out of the Comprehensionterm
      if (!(variable.getDomain() instanceof AnyDomain)) {if (true) throw new ParseException("Error: The variable " + variable.getName() + " cannot be used within the BagCT. It is already used.");}
      //set the reference to the variable
      variableList.add(variable);
      //create the association
      //X a_Comp_Var.add(term,variable);
      //check constraint 2 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof BagDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a bag domain \n" + "       At a BagCT");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      rangeList.add(inTerm);
    }
    if (jj_2_220(2)) {
      jj_consume_token(119);
Logger.logDebug("\t|");
      guard = Term(localVar, false, null);
//set the reference
      term.setGuard(guard);
      //set the association
      //AComprehensionTermGuard a_Comp_Guard = termsPack.getFurtherTerms().getAComprehensionTermGuard();
      //a_Comp_Guard.add(term,guard);

    } else {
      ;
    }
    jj_consume_token(117);
Logger.logDebug("\t:");
    t = Term(localVar, false, null);
//set the reference
    term.setTerm(t);
    //set the association
    //X AComprehensionTermTerm a_Comp_Term = termsPack.getFurtherTerms().getAComprehensionTermTerm();
    //X a_Comp_Term.add(term,t);
    //check constraint 1 of the superclass (check elements type)
    if (!OCL_Checker.termAccepted(t)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a bag-comprehension term.\n");}
    jj_consume_token(GT);
// set TypeDomain
    TypeDomain td = Utility.getBag(OCL_Checker.getTypeDomain(t.getDomain()), defPack, header.getSignature());
    term.setDomain(td);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\t>\t\tBagCT end, TD=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public DomainTerm DomainTerm() throws ParseException {Domain d;
    d = getDomainByID();
//create the object
    DomainTerm term = termsPack.getBasicTerms().createDomainTerm();
    //set references
    term.setDomain(d);
    //set the TypeDomain
    PowersetDomain powersetDom = Utility.getPowerset(d, defPack, header.getSignature());
    //set references
    term.setDomain(powersetDom);
    //OCL constraint 1 granted for construction
    Logger.logDebug("\t" + d.getName() + "\t\tDomainTerm, D=" + term.getDomain().getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

/*
* modified 10 Jan 2008 by acarioni
*
*/
  final public RuleAsTerm RuleAsTerm(HashMap localVar, RuleDeclaration c, Domain expDom) throws ParseException {RuleDeclaration r;
  Object [ ] dcl;
  String ruleName;
  List < Domain > ruleDomList;
    jj_consume_token(125);
Logger.logDebug("\t<<\t\tRuleAsTerm beginning");
    // ruleName=ID_RULE()
      dcl = MacroDcl();
ruleName = (String) dcl [ 0 ];
    ruleDomList = (List < Domain >) dcl [ 1 ];
    jj_consume_token(126);
Logger.logDebug("\t>>\t");
    RuleAsTerm term = termsPack.getBasicTerms().createRuleAsTerm();
    /* commented 10 Jan 2008 by acarioni
      //look for the Rule domain reference; it is created in case it does note yet exist
      // convert expDomn to RuleDomain
	  RuleDomain rDom = (RuleDomain) expDom;
      List<Domain> ruleDomList = null;
      if(rDom.getDomains()!=null){
            ruleDomList = new LinkedList();
      		for(Object o : rDom.getDomains()){
	  			Domain d = MDRConnector.toDomain(o);
				ruleDomList.add(d);
	  		}
      }
      */
    //look for the rule declaration in the rule HashMap
    r = Utility.getRuleByNameDom(declared_Rules, ruleName, ruleDomList);
    if (r == null)
    {
      {if (true) throw new ParseException("ERROR: Unresolved reference to " + ruleName + Utility.toString(ruleDomList));}
    }
    //set the rule reference
    term.setRule(r);
    RuleDomain dom = Utility.getRuleDomain(ruleDomList, defPack, header.getSignature());
    //set the domain reference
    term.setDomain(dom);
    Logger.logDebug("\tRuleAsTerm end, TD=" + dom.getName());
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

/*
* added 10 Jan 2008 by acarioni
*
* Returns a 2-value array containing a macro rule name and a list of domains
* as the formal parameter domains.
* It is used by RuleAsTerm.
*
*/
  final public Object [ ] MacroDcl() throws ParseException {Logger.logDebug("begin - macro rule in RuleAsTerm");
  String ruleName;
  Domain inDom;
  List < Domain > domains = new ArrayList < Domain > ();
    ruleName = ID_RULE();
Logger.logDebug("\t" + ruleName);
    if (jj_2_222(2)) {
Logger.logDebug("domains: ");
      jj_consume_token(114);
      inDom = getDomainByID();
//add it to the list
      domains.add(inDom);
      Logger.logDebug("\t" + inDom.getName());
      label_46:
      while (true) {
        if (jj_2_221(2)) {
          ;
        } else {
          break label_46;
        }
        jj_consume_token(115);
        inDom = getDomainByID();
//add it to the list
        domains.add(inDom);
        Logger.logDebug("\t" + inDom.getName());
      }
      jj_consume_token(116);
    } else {
      ;
    }
Logger.logDebug("end - macro rule in RuleAsTerm");
    {if ("" != null) return new Object [ ]
    {
      ruleName, domains
    }
    ;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////// RULES ////////////////////////////////////////////
//OK! No derived rules
  final public Rule Rule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule r;
    if (jj_2_223(2)) {
      r = BasicRule(localVar, c);
    } else if (jj_2_224(2)) {
      r = TurboRule(localVar, c);
    } else if (jj_2_225(2147483647)) {
      r = UpdateRule(localVar, c);
    } else if (jj_2_226(2147483647)) {
      r = TurboReturnRule(localVar, c);
    } else if (jj_2_227(2)) {
      r = TermAsRule(localVar, c);
    } else if (jj_2_228(2)) {
      r = DerivedRule(localVar, c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

//OK!
  final public TermAsRule TermAsRule(HashMap localVar, RuleDeclaration c) throws ParseException {Logger.logDebug("\t\t\tTermAsRule beginning");
  Term par, t = null;
  TermAsRule rule = rulesPack.getBasicTransitionRules().createTermAsRule();
  List < Term > actualParamList = rule.getParameters();
    if (jj_2_229(2)) {
      t = FunctionTerm(localVar, false);
    } else if (jj_2_230(2)) {
      t = VariableTerm(localVar, false);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_232(2)) {
      jj_consume_token(123);
Logger.logDebug("\t[");
      par = Term(localVar, false, c);
actualParamList.add(par);
      label_47:
      while (true) {
        if (jj_2_231(2)) {
          ;
        } else {
          break label_47;
        }
        jj_consume_token(115);
        par = Term(localVar, false, c);
actualParamList.add(par);
      }
      jj_consume_token(124);
    } else {
      ;
    }
//set the references
    rule.setTerm(t);
    // check OCL constraint
    if (!OCL_Checker.checkTermAsRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At a RuleAsTerm");}
    Logger.logDebug("\t\t\tTermAsRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public Rule BasicRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule r;
    if (jj_2_233(2)) {
      r = SkipRule();
    } else if (jj_2_234(2)) {
      r = MacroCallRule(localVar, c);
    } else if (jj_2_235(2)) {
      r = BlockRule(localVar, c);
    } else if (jj_2_236(2)) {
      r = ConditionalRule(localVar, c);
    } else if (jj_2_237(2)) {
      r = ChooseRule(localVar, c);
    } else if (jj_2_238(2)) {
      r = ForallRule(localVar, c);
    } else if (jj_2_239(2)) {
      r = LetRule(localVar, c);
    } else if (jj_2_240(2)) {
      r = ExtendRule(localVar, c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

///////////////////////// BASIC RULES //////////////////////////////////////////
//OK!
  final public SkipRule SkipRule() throws ParseException {SkipRule rule;
    jj_consume_token(Skip);
Logger.logDebug("\tskip\t\tSkipRule");
    rule = rulesPack.getBasicTransitionRules().createSkipRule();
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

/* build an updateRule*/
  final public UpdateRule UpdateRule(HashMap localVar, RuleDeclaration c) throws ParseException {Term loc = null;
  Term updatingT;
Logger.logDebug("\t\t\tUpdateRule beginning");
    //create the object
    UpdateRule rule = rulesPack.getBasicTransitionRules().createUpdateRule();
    if (jj_2_241(2)) {
      loc = LocationTerm(localVar, false);
//set the reference to the location to be updated
      rule.setLocation(loc);
    } else if (jj_2_242(2)) {
      loc = VariableTerm(localVar, false);
//set the reference to the variable
      VariableTerm locVar = (VariableTerm) loc;
      rule.setLocation(locVar);
      // check and update the variable kind
      if (locVar.getKind() == VariableKind.LOGICAL_VAR)
      {
        locVar.setKind(VariableKind.LOCATION_VAR);
        Logger.logDebug("\t\t\t" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
      }
      else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In an Updating rule, the variable to update must be a location variable, not a rule variable. ");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(127);
Logger.logDebug("\t:=");
    updatingT = TermForUpdateRule(localVar, false, c, loc.getDomain());
assert updatingT != null;
    //set the references
    rule.setUpdatingTerm(updatingT);
    // OCL check R1
    //NEW by Patrizia to allow result:=... to pass constraint R1
    //****
    if (loc != null && (loc instanceof LocationTerm) && ((LocationTerm) loc).getFunction().getName().equals("result"))
    {
      rule.getLocation().setDomain(rule.getUpdatingTerm().getDomain());
      Logger.logDebug("\t\t\t Location term \"result\" updated: TD=" + rule.getUpdatingTerm().getDomain().getName());
    }
    //****
    if (!OCL_Checker.checkUpdateRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the application of the update-rule.\n" + c);}
    Logger.logDebug("\t\t\tUpdateRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//OK (a parte controllare il metamodello)
  final public BlockRule BlockRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule r;
    jj_consume_token(PAR);
Logger.logDebug("\tpar\t\tBlockRule beginning");
    BlockRule rule = rulesPack.getBasicTransitionRules().createBlockRule();
    List < Rule > rulesList = rule.getRules();
    r = Rule(localVar, c);
//set the reference
    rulesList.add(r);
    label_48:
    while (true) {
      r = Rule(localVar, c);
//set the reference
      rulesList.add(r);
      if (jj_2_243(2)) {
        ;
      } else {
        break label_48;
      }
    }
    jj_consume_token(ENDPAR);
Logger.logDebug("\tendpar\t\tBlockRule end\n");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//OK!
  final public ConditionalRule ConditionalRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule thenR, elseR;
  Term guard;
    jj_consume_token(IF);
Logger.logDebug("\tif\t\tConditionalRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(THEN);
Logger.logDebug("\tthen");
    thenR = Rule(localVar, c);
ConditionalRule rule = rulesPack.getBasicTransitionRules().createConditionalRule();
    //set references
    rule.setGuard(guard);
    rule.setThenRule(thenR);
    if (jj_2_244(2)) {
      jj_consume_token(ELSE);
Logger.logDebug("\telse");
      elseR = Rule(localVar, c);
//set the reference
      rule.setElseRule(elseR);
    } else {
      ;
    }
    jj_consume_token(ENDIF);
//(OCL constraints 1) check if the guard TypeDomain is the Boolean domain
    if (!OCL_Checker.isBoolean(guard))
    {
      //PA 31 gen 2011. commentato logger ed introdotta ParseException
      //Logger.logErr("Error: In a conditional rule the type-domain associated to the term after \"if\" must be the Boolean domain.");
      {if (true) throw new ParseException("Error: In a conditional rule the type-domain associated to the term after \"if\" must be the Boolean domain.");}
    }
    Logger.logDebug("\tendif\t\tConditionalRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges. Please don't touch!
  final public ChooseRule ChooseRule(HashMap localVar, RuleDeclaration c) throws ParseException {VariableTerm variable;
  Term inTerm, guard;
  Rule doRule, ifnone;
    jj_consume_token(CHOOSE);
Logger.logDebug("\tchoose\t\tChooseRule beginning");
    ChooseRule rule = rulesPack.getBasicTransitionRules().createChooseRule();
    List < Term > rangeList = rule.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ChooseRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, c);
//set the reference to the variable
    Collection variableList = rule.getVariable();
    variableList.add(variable);
    //check constraint R7
    if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a ChooseRule");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    //set the reference to the variable range
    rangeList.add(inTerm);
    //Constraints R10, R8 granted for construction

    label_49:
    while (true) {
      if (jj_2_245(2)) {
        ;
      } else {
        break label_49;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ChooseRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, c);
//set the reference to the variable
      variableList.add(variable);
      if (!(OCL_Checker.getTypeDomain(inTerm.getDomain()) instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a ChooseRule");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      //set the reference to the variable range
      rangeList.add(inTerm);
      //Constraints R10, R8 granted for construction

    }
    jj_consume_token(WITH);
Logger.logDebug("\twith");
    guard = Term(localVar, false, c);
//set the reference to the guard
    rule.setGuard(guard);
    //Check constraint R9
    if (!OCL_Checker.isBoolean(guard))
    {
      Logger.logErr("Error: In a ChooseRule the type-domain associated to the term after \"with\" must be the Boolean domain");
    }
    jj_consume_token(DO);
Logger.logDebug("\tdo");
    doRule = Rule(localVar, c);
//set the reference to the body rule
    rule.setDoRule(doRule);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IFNONE:{
      jj_consume_token(IFNONE);
Logger.logDebug("\tifnone");
      ifnone = Rule(localVar, c);
//set the reference to the ifnone rule
      rule.setIfnone(ifnone);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
Logger.logDebug("\t\t\tChooseRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//NEW by Patrizia Added ranges. Please don't touch!
  final public ForallRule ForallRule(HashMap localVar, RuleDeclaration c) throws ParseException {VariableTerm variable;
  Term inTerm, guard;
  Rule doRule;
    jj_consume_token(FORALL);
Logger.logDebug("\tforall\t\tForallRule beginning");
    ForallRule rule = rulesPack.getBasicTransitionRules().createForallRule();
    List < Term > rangeList = rule.getRanges();
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inTerm = Term(localVar, false, c);
//set the reference to the variable
    Collection variableList = rule.getVariable();
    variableList.add(variable);
    //check constraint 1 (part of it is granted for construction)
    if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a ForallRule");}
    //update variable features
    Utility.updateVariable(variable, inTerm);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    //set the reference to the variable range
    rangeList.add(inTerm);
    label_50:
    while (true) {
      if (jj_2_246(2)) {
        ;
      } else {
        break label_50;
      }
      jj_consume_token(115);
//check if the next variable is already used (look for it in the localVar HashMap)
      nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ForallRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(IN);
Logger.logDebug("\tin");
      inTerm = Term(localVar, false, c);
//set the reference to the variable
      variableList.add(variable);
      //check constraint 1 (part of it is granted for construction)
      if (!(inTerm.getDomain() instanceof PowersetDomain)) {if (true) throw new ParseException("Error: The type-domain of terms after \"in\"  must be a power set domain \n" + "       At a ForallRule");}
      //update variable features
      Utility.updateVariable(variable, inTerm);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: TD=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
      //set the reference to the variable range
      rangeList.add(inTerm);
    }
guard = termsPack.getBasicTerms().createBooleanTerm(true);
    if (jj_2_247(2)) {
      jj_consume_token(WITH);
Logger.logDebug("\twith");
      guard = Term(localVar, false, c);
//(OCL constraints 2) check if the guard TypeDomain is the Boolean domain
      if (!OCL_Checker.isBoolean(guard))
      {
        Logger.logErr("Error: In a ForallRule the type-domain associated to the term after \"with\" must be the Boolean domain");
      }
    } else {
      ;
    }
//set the reference
    rule.setGuard(guard);
    jj_consume_token(DO);
Logger.logDebug("\tdo");
    doRule = Rule(localVar, c);
//set the reference
    rule.setDoRule(doRule);
    Logger.logDebug("\t\t\tForallRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

// DA CONTROLLARE IL METAMODELLO
  final public LetRule LetRule(HashMap localVar, RuleDeclaration c) throws ParseException {VariableTerm variable;
  Term initExp;
  Rule inRule;
    jj_consume_token(LET);
    jj_consume_token(114);
Logger.logDebug("\tlet(\t\tLetRule beginning");
    //check if the next variable is already used (look for it in the localVar HashMap)
    String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetRule. It is already used.");}
    variable = VariableTerm(localVar, true);
    jj_consume_token(EQ);
Logger.logDebug("\t=");
    initExp = Term(localVar, false, c);
LetRule rule = rulesPack.getBasicTransitionRules().createLetRule();
    List < VariableTerm > variableList = rule.getVariable();
    List < Term > initExpList = rule.getInitExpression();
    Domain varD;
    //set variable TypeDomain
    varD = initExp.getDomain();
    variable.setDomain(varD);
    //set variable kind
    if (varD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
    //set references
    variableList.add(variable);
    initExpList.add(initExp);
    Logger.logDebug("\t\t\t" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    label_51:
    while (true) {
      if (jj_2_248(2)) {
        ;
      } else {
        break label_51;
      }
      jj_consume_token(115);
nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the LetRule. It is already used.");}
      variable = VariableTerm(localVar, true);
      jj_consume_token(EQ);
Logger.logDebug("\t=");
      initExp = Term(localVar, false, c);
// set variable TypeDomain
      varD = initExp.getDomain();
      variable.setDomain(varD);
      // set variable kind
      if (varD instanceof RuleDomain) variable.setKind(VariableKind.RULE_VAR);
      //set references
      variableList.add(variable);
      initExpList.add(initExp);
      Logger.logDebug("\t\t\t" + variable.getName() + " updated: D=" + variable.getDomain().getName() + ", kind=" + variable.getKind().toString());
    }
    jj_consume_token(116);
Logger.logDebug("\t)");
    jj_consume_token(IN);
Logger.logDebug("\tin");
    inRule = Rule(localVar, c);
//set the reference
    rule.setInRule(inRule);
    //create the association
    //check OCL constraints
    if (!OCL_Checker.checkLetRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the application of the let-rule.");}
    jj_consume_token(ENDLET);
Logger.logDebug("\tendlet\t\tLetRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//Ok!
/*
* modified 10 Jan 2008 by acarioni
*
*/
  final public MacroCallRule MacroCallRule(HashMap localVar, RuleDeclaration c) throws ParseException {String ruleName;
  Term par;
    ruleName = ID_RULE();
Logger.logDebug("\t" + ruleName + "\t\tMacroCallRule beginning");
    //create the object
    MacroCallRule rule = rulesPack.getBasicTransitionRules().createMacroCallRule();
    List < Term > actualParamList = rule.getParameters();
    jj_consume_token(123);
Logger.logDebug("\t[");
    if (jj_2_250(2)) {
      par = Term(localVar, false, c);
actualParamList.add(par);
      label_52:
      while (true) {
        if (jj_2_249(2)) {
          ;
        } else {
          break label_52;
        }
        jj_consume_token(115);
        par = Term(localVar, false, c);
actualParamList.add(par);
      }
    } else {
      ;
    }
    jj_consume_token(124);
Logger.logDebug("\t]\t\tMacroCallRule end");
//look for the rule in the rule HashMap
    RuleDeclaration r = Utility.getRuleByNameTerm(declared_Rules, ruleName, actualParamList);
    //PA: 15/10/2011
    /*List<Domain> doms = Utility.buildDomains(actualParamList);
		List<VariableTerm> list = r.getVariable();
		Iterator<VariableTerm> it = list.iterator();
		HashMap<String, Domain> genericDomValue =  new HashMap<String, Domain>();		
		for(Domain domain: doms)	{
		  Domain other = it.next().getDomain();
		  System.out.println(domain.getName() + " " + other.getName() +" " +OCL_Checker.applicable(domain, other));
		  System.out.println(other.getName() + " " + domain.getName() +" " +OCL_Checker.applicable(other, domain));
		  
		  //if(!OCL_Checker.compareFixingAnyDomain(other, domain, genericDomValue))
		  if(!OCL_Checker.applicable(domain, other))
		  {
		    throw new ParseException("Error: ");
		  }
		}*/
    //PA: 15/10/2011 - end
    // added 10 Jan 2008 by acarioni
    if (r == null)
    {
      List < Domain > domains = Utility.buildDomains(actualParamList);
      Logger.logErr("rules already declared: " + Utility.toString(declared_Rules));
      {if (true) throw new ParseException("Error: Unresolved reference to " + ruleName + Utility.toString(domains));}
    }
    //******* NEW by Patrizia to manage recursion
    // NON FUNZIONA PIU' if (c!= null && ruleName.equals(c.getName()))
    //         	   r = c;
    if (!(r instanceof MacroDeclaration)) {if (true) throw new ParseException("Error: The rule " + ruleName + " is not a macro");}
    //set reference
    rule.setCalledMacro((MacroDeclaration) r);
    //PA: 15/10/2011 - start
    StringBuilder sb = new StringBuilder();
    sb.append("Macro call rule " + rule.getCalledMacro().getName() + " has been associated to the rule " + r.getName() + "[");
    for (VariableTerm v : r.getVariable())
    {
      sb.append(v.getDomain().getName());
    }
    sb.append("]");
    Logger.logDebug(sb.toString());
    //PA: 15/10/2011 - end
    //check OCL constraints
    if (!OCL_Checker.checkMacroCallRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the application of the rule " + ruleName + " as a macro.");}
    Logger.logDebug("The macro call rule respects the OCL constraints.");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//OK!
  final public ExtendRule ExtendRule(HashMap localVar, RuleDeclaration c) throws ParseException {String id_dom;
  VariableTerm v;
  Rule doRule;
    jj_consume_token(EXTEND);
Logger.logDebug("\textend\t\tExtendRule beginning");
    id_dom = ID_DOMAIN();
ExtendRule rule = rulesPack.getBasicTransitionRules().createExtendRule();
    Domain dom = (Domain) declared_Dom.get(id_dom);
    rule.setExtendedDomain(dom);
    //XAExtendRuleExtendedDomain a_ExtendR_Dom= rulesPack.getBasicTransitionRules().getAExtendRuleExtendedDomain();
    //Xa_ExtendR_Dom.add(rule,(AbstractTd)dom);

    jj_consume_token(WITH);
Logger.logDebug("\twith");
String nextVar = getToken(1).image;
    if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExtendRule. It is already used.");}
    v = VariableTerm(localVar, true);
Collection VariablesList = rule.getBoundVar();
    VariablesList.add(v);
    //XAExtendRuleBoundVar a_ExtendR_Var= rulesPack.getBasicTransitionRules().getAExtendRuleBoundVar();
    //Xa_ExtendR_Var.add(rule,v);
    ReserveDomain Reservedom = (ReserveDomain) Utility.getPredefinedAbstractDomain(domainsFactory, "Reserve");
    if (Reservedom == null) {if (true) throw new ParseException("Error: The domain Reserve has not been declared.");}
    Utility.updateVariable(v, dom);
    //constraint R6 is granted for construction
    Logger.logDebug("\t\t\tTD assigned to " + v.getName() + ": " + v.getDomain().getName());
    label_53:
    while (true) {
      if (jj_2_251(2)) {
        ;
      } else {
        break label_53;
      }
      jj_consume_token(115);
nextVar = getToken(1).image;
      if (localVar.get(nextVar) != null) {if (true) throw new ParseException("Error: The variable " + nextVar + " cannot be bound to a value in the ExtendRule. It is already used.");}
      v = VariableTerm(localVar, true);
VariablesList.add(v);
      //Xa_ExtendR_Var.add(rule,v);
      Utility.updateVariable(v, dom);
      //constraint R6 is granted for construction
      Logger.logDebug("\t\t\tTD assigned to " + v.getName() + ": " + v.getDomain().getName());
    }
    jj_consume_token(DO);
Logger.logDebug("\tdo");
    doRule = Rule(localVar, c);
rule.setDoRule(doRule);
    //X AExtendRuleDoRule a_ExtendR_DoRule= rulesPack.getBasicTransitionRules().getAExtendRuleDoRule();
    //X a_ExtendR_DoRule.add(rule,doRule);
    //check OCL constraints
    if (!OCL_Checker.checkExtendRule(rule)) {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the application of the extend rule.");}
    Logger.logDebug("\t\t\tExtendRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

/////////////////////////////////////////////////////////////////////////
  final public TurboRule TurboRule(HashMap localVar, RuleDeclaration c) throws ParseException {TurboRule result;
    if (jj_2_252(2)) {
      result = SeqRule(localVar, c);
    } else if (jj_2_253(2)) {
      result = IterateRule(localVar, c);
    } else if (jj_2_254(2)) {
      result = TurboCallRule(localVar, c);
    } else if (jj_2_255(2)) {
      result = TurboLocalStateRule(localVar, c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

///////////////// TURBO RULE /////////////////
  final public SeqRule SeqRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule r;
    jj_consume_token(seq);
Logger.logDebug("\tseq\t\tSeqRule beginning");
    SeqRule rule = rulesPack.getTurboTransitionRules().createSeqRule();
    List < Rule > rulesList = rule.getRules();
    r = Rule(localVar, c);
//add rules
    rulesList.add(r);
    label_54:
    while (true) {
      r = Rule(localVar, c);
//set the reference
      rulesList.add(r);
      if (jj_2_256(2)) {
        ;
      } else {
        break label_54;
      }
    }
    jj_consume_token(ENDSEQ);
Logger.logDebug("\tendseq\t\tSeqRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public IterateRule IterateRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule r;
    jj_consume_token(ITERATE);
Logger.logDebug("\titerate\t\tIterateRule beginning");
    r = Rule(localVar, c);
    jj_consume_token(ENDITERATE);
Logger.logDebug("\tenditerate\t\tIterateRule end");
IterateRule rule = rulesPack.getTurboTransitionRules().createIterateRule();
    //set the reference
    rule.setRule(r);
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public TurboCallRule TurboCallRule(HashMap localVar, RuleDeclaration c) throws ParseException {String ruleName;
  Term par;
    ruleName = ID_RULE();
Logger.logDebug("\t" + ruleName + "\t\tTurboCallRule beginning");
    Logger.logDebug("\t context: " + ((c == null) ? "null" : c.getName()));
    //create the object
    TurboCallRule rule = rulesPack.getTurboTransitionRules().createTurboCallRule();
    List < Term > actualParamList = rule.getParameters();
    jj_consume_token(114);
Logger.logDebug("\t(");
    if (jj_2_258(2)) {
      par = Term(localVar, false, c);
actualParamList.add(par);
      label_55:
      while (true) {
        if (jj_2_257(2)) {
          ;
        } else {
          break label_55;
        }
        jj_consume_token(115);
        par = Term(localVar, false, c);
actualParamList.add(par);
      }
    } else {
      ;
    }
    jj_consume_token(116);
Logger.logDebug("\t)\t\tTurboCallRule end");
//look for the rule in the rule HashMap
    RuleDeclaration r = Utility.getRuleByNameTerm(declared_Rules, ruleName, actualParamList);
    //******* NEW by Patrizia to manage recursion
    if (c != null && ruleName.equals(c.getName())) r = c;
    //*************
    // added 10 Jan 2008 by acarioni
    if (r == null)
    {
      List < Domain > domains = Utility.buildDomains(actualParamList);
      Logger.logErr("rules already declared: " + Utility.toString(declared_Rules));
      //Logger.logErr("Asbtract domains:" + Utility.toString(Utility.abstractTds.values()));
      {if (true) throw new ParseException("Error: Unresolved reference to " + ruleName + Utility.toString(domains));}
    }
    if (!(r instanceof TurboDeclaration)) {if (true) throw new ParseException("Error: The rule " + ruleName + " is not declared as turbo, but it is called as it was.");}
    //set reference
    rule.setCalledRule((TurboDeclaration) r);
    if (ruleName.equals(c.getName()))  //***NEW by Patrizia - in case of recursion, don't check OCL constraints
    {if ("" != null) return rule;}
    //check OCL constraints
    if (!OCL_Checker.checkTurboCallRule(rule))
    { //For debugging
      Logger.logDebug(rule.getParameters().size() + " " + rule.getCalledRule().getArity());
      {if (true) throw new ParseException(OCL_Checker.getMsgErr() + "\n       At the application of the rule " + ruleName + " as a submachine.");}
    }
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public TurboReturnRule TurboReturnRule(HashMap localVar, RuleDeclaration c) throws ParseException {LocationTerm loc;
  VariableTerm locVar;
  TurboCallRule updateR;
Logger.logDebug("\t\t\tTurboReturnRule beginning");
    TurboReturnRule rule = rulesPack.getTurboTransitionRules().createTurboReturnRule();
    if (jj_2_259(2)) {
      loc = LocationTerm(localVar, false);
//set the reference
      rule.setLocation(loc);
    } else if (jj_2_260(2)) {
      locVar = VariableTerm(localVar, false);
//set the reference
      rule.setLocation(locVar);
      // check and update the variable kind
      if (locVar.getKind() == VariableKind.LOGICAL_VAR)
      {
        locVar.setKind(VariableKind.LOCATION_VAR);
        Logger.logDebug("\t\t\t" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
      }
      else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a turbo-return rule, the variable to update must be a location variable, not a rule variable.");}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(128);
Logger.logDebug("\t<-");
    updateR = TurboCallRule(localVar, c);
//set the references
    rule.setUpdateRule(updateR);
    // constraint 1 and 2 are granted for construction
    Logger.logDebug("\t\t\tTurboReturnRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public TurboLocalStateRule TurboLocalStateRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule init, body;
  LocalFunction localF;
  LinkedList localFunctions = new LinkedList();
Logger.logDebug("\t\t\tTurboLocalStateRule beginning");
    Logger.logDebug("\t");
    localF = LocalFunction();
boolean inserted = Utility.insert(localF, declared_Func);
    if (inserted) localFunctions.add(localF);
    else {if (true) throw new ParseException("Error: The function " + localF.getName() + ":" + ((localF.getDomain() == null) ? "" : (localF.getDomain().getName() + "->")) + localF.getCodomain().getName() + " has been declared twice.");}
    jj_consume_token(123);
Logger.logDebug("\t[");
    init = Rule(localVar, c);
    jj_consume_token(124);
Logger.logDebug("\t]");
TurboLocalStateRule rule = rulesPack.getTurboTransitionRules().createTurboLocalStateRule();
    List LocFunList = rule.getLocalFunction();
    List InitRulesList = rule.getInit();
    //X ATurboLocalStateRuleInit a_TurLocStaTR_Init = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleInit();
    //X ATurboLocalStateRuleLocalFunction a_TurLocStaTR_LocF = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleLocalFunction();
    //set references
    LocFunList.add(localF);
    InitRulesList.add(init);
    //create associations
    //X a_TurLocStaTR_LocF.add(rule,localF);
    //X a_TurLocStaTR_Init.add(rule,init);
    //(OCL constraints 1) the dynamic functions must be local
    //if(!(localF.getKind().toString().equals("local")))
    //  throw new ParseException("Error: In a turbo rule with local state, the dynamic functions must be local.");

    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DYNAMIC:
      case LOCAL:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_56;
      }
Logger.logDebug("\t");
      localF = LocalFunction();
inserted = Utility.insert(localF, declared_Func);
      if (inserted) localFunctions.add(localF);
      else {if (true) throw new ParseException("Error: The function " + localF.getName() + ":" + ((localF.getDomain() == null) ? "" : (localF.getDomain().getName() + "->")) + localF.getCodomain().getName() + " has been declared twice.");}
      jj_consume_token(123);
Logger.logDebug("\t[");
      init = Rule(localVar, c);
      jj_consume_token(124);
Logger.logDebug("\t]");
//set references
      LocFunList.add(localF);
      InitRulesList.add(init);
      //create associations
      //X a_TurLocStaTR_LocF.add(rule,localF);
      //X a_TurLocStaTR_Init.add(rule,init);
      //(OCL constraints 1) the dynamic functions must be local
      //if(!(localF.getKind().toString().equals("local")))
      //   throw new ParseException("Error: In a turbo rule with local state, the dynamic functions must be local.");

    }
    body = Rule(localVar, c);
rule.setBody(body);
    //X ATurboLocalStateRuleBody a_TurLocStaTR_Body = rulesPack.getTurboTransitionRules().getATurboLocalStateRuleBody();
    //X a_TurLocStaTR_Body.add(rule,body);
    LocalFunction f;
    for (int count = 0; count < localFunctions.size(); count++)
    {
      f = (LocalFunction) localFunctions.get(count);
      Utility.remove(f, declared_Func);
    }
    Logger.logDebug("\t\t\tTurboLocalStateRule end");
    //Check OCL constraints
    if (!OCL_Checker.checkTurboLocalStateRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At the TurboLocalStateRule.\n");
    }
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public TryCatchRule TryCatchRule(HashMap localVar, RuleDeclaration c) throws ParseException {Rule tryR, catchR;
  Term loc;
    jj_consume_token(TRY);
Logger.logDebug("\ttry\t\tTryCatchRule beginning");
    tryR = Rule(localVar, c);
//create the object
    TryCatchRule rule = rulesPack.getTurboTransitionRules().createTryCatchRule();
    //set the reference
    rule.setTryRule(tryR);
    //create the association
    //X ATryCatchRuleTryRule a_TryCatchR_TryR = rulesPack.getTurboTransitionRules().getATryCatchRuleTryRule();
    //X a_TryCatchR_TryR.add(rule,tryR);
    Collection locColl = rule.getLocation();
    //X ATryCatchRuleLocation a_TryCatchR_Loc = rulesPack.getTurboTransitionRules().getATryCatchRuleLocation();
    //X ATryCatchRuleLocationVar a_TryCatchR_LocVar = rulesPack.getTurboTransitionRules().getATryCatchRuleLocationVar();

    jj_consume_token(CATCH);
Logger.logDebug("\tcatch");
    loc = Term(localVar, false, c);
//add location term to collection
      locColl.add(loc);
      //create the association
      //X a_TryCatchR_Loc.add(rule,loc);
      // check and update the variable kind
      if (loc instanceof VariableTerm)
      {
        VariableTerm locVar = (VariableTerm) loc;
        if (locVar.getKind() == VariableKind.LOGICAL_VAR)
        {
          ((VariableTerm) loc).setKind(VariableKind.LOCATION_VAR);
          Logger.logDebug("\t\t\t" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
        }
        else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a try-catch rule, the variable to catch must be a location variable, not a rule variable. ");}
      }
    label_57:
    while (true) {
      if (jj_2_261(2)) {
        ;
      } else {
        break label_57;
      }
      jj_consume_token(115);
      loc = Term(localVar, false, c);
//add location term to collection
        locColl.add(loc);
        // check and update the variable kind
        if (loc instanceof VariableTerm)
        {
          VariableTerm locVar = (VariableTerm) loc;
          if (locVar.getKind() == VariableKind.LOGICAL_VAR)
          {
            ((VariableTerm) loc).setKind(VariableKind.LOCATION_VAR);
            Logger.logDebug("\t\t\t" + locVar.getName() + " updated: TD=" + locVar.getDomain().getName() + ", kind=" + locVar.getKind().toString());
          }
          else if (locVar.getKind() == VariableKind.RULE_VAR) {if (true) throw new ParseException("Error: In a try-catch rule, the variable to catch must be a location variable, not a rule variable. ");}
        }
    }
    catchR = Rule(localVar, c);
//set the reference
    rule.setCatchRule(catchR);
    //create the association
    //X ATryCatchRuleCatchRule a_TryCatchR_CatchR = rulesPack.getTurboTransitionRules().getATryCatchRuleCatchRule();
    //X a_TryCatchR_CatchR.add(rule,catchR);
    Logger.logDebug("\t\t\tTryCatchRule end");
    //OCL constraints granted for construction!
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

//////////////////////////////////////////////////////////////////////////////////////////////
  final public DerivedRule DerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {DerivedRule r;
    if (jj_2_262(2)) {
      r = BasicDerivedRule(localVar, c);
    } else if (jj_2_263(2)) {
      r = TurboDerivedRule(localVar, c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

  final public BasicDerivedRule BasicDerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {BasicDerivedRule r;
    r = CaseRule(localVar, c);
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

  final public CaseRule CaseRule(HashMap localVar, RuleDeclaration c) throws ParseException {Term caseT, term;
  Rule resRule;
    jj_consume_token(SWITCH);
Logger.logDebug("\tswitch\t\tCaseRule beginning");
    term = Term(localVar, false, c);
//create the object
    CaseRule rule = rulesPack.getDerivedTransitionRules().createCaseRule();
    //set the reference
    rule.setTerm(term);
    List < Term > caseTermsList = rule.getCaseTerm();
    List < Rule > resList = rule.getCaseBranches();
    label_58:
    while (true) {
      jj_consume_token(CASE);
Logger.logDebug("\tcase");
      term = Term(localVar, false, c);
      jj_consume_token(117);
Logger.logDebug("\t:");
      resRule = Rule(localVar, c);
caseTermsList.add(term);
      resList.add(resRule);
      if (jj_2_264(2)) {
        ;
      } else {
        break label_58;
      }
    }
    if (jj_2_265(2)) {
      jj_consume_token(OTHERWISE);
Logger.logDebug("\totherwise");
      resRule = Rule(localVar, c);
//set the reference
      rule.setOtherwiseBranch(resRule);
    } else {
      ;
    }
    jj_consume_token(END_SWITCH);
//check OCL constraints
    if (!OCL_Checker.checkCaseRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a case rule");
    }
    Logger.logDebug("\tendswitch\t\tCaseRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public TurboDerivedRule TurboDerivedRule(HashMap localVar, RuleDeclaration c) throws ParseException {TurboDerivedRule r;
    if (jj_2_266(2)) {
      r = RecursiveWhileRule(localVar, c);
    } else if (jj_2_267(2)) {
      r = IterativeWhileRule(localVar, c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return r;}
    throw new Error("Missing return statement in function");
}

  final public RecursiveWhileRule RecursiveWhileRule(HashMap localVar, RuleDeclaration c) throws ParseException {Term guard;
  Rule r;
    jj_consume_token(WHILEREC);
Logger.logDebug("\twhilerec\t\tRecursiveWhileRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(DO);
Logger.logDebug("\tdo");
    r = Rule(localVar, c);
RecursiveWhileRule rule = rulesPack.getDerivedTransitionRules().createRecursiveWhileRule();
    //set references
    rule.setGuard(guard);
    rule.setRule(r);
    //create associations
    //X ARecursiveWhileRuleGuard a_RecWhileR_Guard = rulesPack.getDerivedTransitionRules().getARecursiveWhileRuleGuard();
    //X a_RecWhileR_Guard.add(rule,guard);
    //X ARecursiveWhileRuleRule a_RecWhileR_Rule = rulesPack.getDerivedTransitionRules().getARecursiveWhileRuleRule();
    //X a_RecWhileR_Rule.add(r,rule);
    //OCL constraints
    if (!OCL_Checker.checkRecursiveWhileRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a RecursiveWhileRule");
    }
    Logger.logDebug("\t\t\tRecursiveWhileRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public IterativeWhileRule IterativeWhileRule(HashMap localVar, RuleDeclaration c) throws ParseException {Term guard;
  Rule r;
    jj_consume_token(WHILE);
Logger.logDebug("\twhile\t\tIterativeWhileRule beginning");
    guard = Term(localVar, false, c);
    jj_consume_token(DO);
Logger.logDebug("\tdo");
    r = Rule(localVar, c);
IterativeWhileRule rule = rulesPack.getDerivedTransitionRules().createIterativeWhileRule();
    //set references
    rule.setGuard(guard);
    rule.setRule(r);
    //create associations
    //X AIterativeWhileRuleGuard a_ItWhileR_Guard = rulesPack.getDerivedTransitionRules().getAIterativeWhileRuleGuard();
    //X a_ItWhileR_Guard.add(rule,guard);
    //X AIterativeWhileRuleRule a_ItWhileR_Rule = rulesPack.getDerivedTransitionRules().getAIterativeWhileRuleRule();
    //X a_ItWhileR_Rule.add(r,rule);
    //OCL constraints
    if (!OCL_Checker.checkIterativeWhileRule(rule))
    {
      Logger.logErr(OCL_Checker.getMsgErr());
      Logger.logErr("       At a IterativeWhileRule");
    }
    Logger.logDebug("\t\t\tIterativeWhileRule end");
    {if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

////////////////////////////////////////////////////////
/////////////////////////////////// END OF GRAMMAR ///////////////////////////
  final public String ID_VARIABLE() throws ParseException {Token t;
    t = jj_consume_token(ID_VARIABLE);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_ENUM() throws ParseException {Token t;
    t = jj_consume_token(ID_ENUM);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_DOMAIN() throws ParseException {Token t;
    t = jj_consume_token(ID_DOMAIN);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_RULE() throws ParseException {Token t;
    t = jj_consume_token(ID_RULE);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_AXIOM() throws ParseException {Token t;
    t = jj_consume_token(ID_AXIOM);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_CTL() throws ParseException {Token t;
    t = jj_consume_token(ID_CTL);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_LTL() throws ParseException {Token t;
    t = jj_consume_token(ID_LTL);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_FUNCTION() throws ParseException {Token t;
    t = jj_consume_token(ID_FUNCTION);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID_AGENT() throws ParseException {Token t;
    t = jj_consume_token(ID_FUNCTION);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String ID() throws ParseException {Token t;
    t = jj_consume_token(ID);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String MOD_ID() throws ParseException {Token t;
    t = jj_consume_token(MOD_ID);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_66()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_67()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_68()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_69()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_70()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_71()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_72()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_73()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_74()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_75()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_76()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_77()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_78()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_79()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_80()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_81()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_82()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_83()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_84()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_85()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_86()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_87()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_88()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_89()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_90()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_91()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_92()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_93()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_94()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_95()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_96()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_97()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_98()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_99()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_100()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_101()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_102()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_103()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_104()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_105()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_106()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_107()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_108()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_109()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_110()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_111()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_112()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_113()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_114()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_115()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_116()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_117()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_118()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_119()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_120()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_121()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_122()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_123()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_124()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_125()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_126()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_127()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_128()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_129()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_130()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_131()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_132()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_133()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_134()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_135()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_136()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_137()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_138()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_139()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_140()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_141()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_2_142(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_142()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private boolean jj_2_143(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_143()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private boolean jj_2_144(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_144()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private boolean jj_2_145(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_145()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private boolean jj_2_146(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_146()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private boolean jj_2_147(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_147()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private boolean jj_2_148(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_148()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private boolean jj_2_149(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_149()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private boolean jj_2_150(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_150()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private boolean jj_2_151(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_151()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private boolean jj_2_152(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_152()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private boolean jj_2_153(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_153()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private boolean jj_2_154(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_154()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private boolean jj_2_155(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_155()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private boolean jj_2_156(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_156()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private boolean jj_2_157(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_157()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private boolean jj_2_158(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_158()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private boolean jj_2_159(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_159()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private boolean jj_2_160(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_160()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private boolean jj_2_161(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_161()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private boolean jj_2_162(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_162()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private boolean jj_2_163(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_163()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private boolean jj_2_164(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_164()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private boolean jj_2_165(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_165()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private boolean jj_2_166(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_166()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private boolean jj_2_167(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_167()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private boolean jj_2_168(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_168()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private boolean jj_2_169(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_169()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private boolean jj_2_170(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_170()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private boolean jj_2_171(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_171()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private boolean jj_2_172(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_172()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private boolean jj_2_173(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_173()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private boolean jj_2_174(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_174()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private boolean jj_2_175(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_175()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private boolean jj_2_176(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_176()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private boolean jj_2_177(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_177()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private boolean jj_2_178(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_178()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private boolean jj_2_179(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_179()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private boolean jj_2_180(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_180()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private boolean jj_2_181(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_181()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private boolean jj_2_182(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_182()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private boolean jj_2_183(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_183()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  private boolean jj_2_184(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_184()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  private boolean jj_2_185(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_185()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  private boolean jj_2_186(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_186()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  private boolean jj_2_187(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_187()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  private boolean jj_2_188(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_188()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  private boolean jj_2_189(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_189()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  private boolean jj_2_190(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_190()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  private boolean jj_2_191(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_191()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  private boolean jj_2_192(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_192()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  private boolean jj_2_193(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_193()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  private boolean jj_2_194(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_194()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  private boolean jj_2_195(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_195()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  private boolean jj_2_196(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_196()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  private boolean jj_2_197(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_197()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  private boolean jj_2_198(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_198()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  private boolean jj_2_199(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_199()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  private boolean jj_2_200(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_200()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  private boolean jj_2_201(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_201()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  private boolean jj_2_202(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_202()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  private boolean jj_2_203(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_203()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  private boolean jj_2_204(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_204()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  private boolean jj_2_205(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_205()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  private boolean jj_2_206(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_206()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  private boolean jj_2_207(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_207()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  private boolean jj_2_208(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_208()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  private boolean jj_2_209(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_209()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  private boolean jj_2_210(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_210()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  private boolean jj_2_211(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_211()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  private boolean jj_2_212(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_212()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  private boolean jj_2_213(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_213()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  private boolean jj_2_214(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_214()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  private boolean jj_2_215(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_215()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  private boolean jj_2_216(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_216()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  private boolean jj_2_217(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_217()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  private boolean jj_2_218(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_218()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  private boolean jj_2_219(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_219()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  private boolean jj_2_220(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_220()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  private boolean jj_2_221(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_221()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  private boolean jj_2_222(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_222()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  private boolean jj_2_223(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_223()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  private boolean jj_2_224(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_224()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  private boolean jj_2_225(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_225()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  private boolean jj_2_226(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_226()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(225, xla); }
  }

  private boolean jj_2_227(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_227()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(226, xla); }
  }

  private boolean jj_2_228(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_228()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(227, xla); }
  }

  private boolean jj_2_229(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_229()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(228, xla); }
  }

  private boolean jj_2_230(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_230()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(229, xla); }
  }

  private boolean jj_2_231(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_231()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(230, xla); }
  }

  private boolean jj_2_232(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_232()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(231, xla); }
  }

  private boolean jj_2_233(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_233()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(232, xla); }
  }

  private boolean jj_2_234(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_234()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(233, xla); }
  }

  private boolean jj_2_235(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_235()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(234, xla); }
  }

  private boolean jj_2_236(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_236()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(235, xla); }
  }

  private boolean jj_2_237(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_237()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(236, xla); }
  }

  private boolean jj_2_238(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_238()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(237, xla); }
  }

  private boolean jj_2_239(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_239()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(238, xla); }
  }

  private boolean jj_2_240(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_240()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(239, xla); }
  }

  private boolean jj_2_241(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_241()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(240, xla); }
  }

  private boolean jj_2_242(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_242()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(241, xla); }
  }

  private boolean jj_2_243(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_243()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(242, xla); }
  }

  private boolean jj_2_244(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_244()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(243, xla); }
  }

  private boolean jj_2_245(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_245()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(244, xla); }
  }

  private boolean jj_2_246(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_246()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(245, xla); }
  }

  private boolean jj_2_247(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_247()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(246, xla); }
  }

  private boolean jj_2_248(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_248()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(247, xla); }
  }

  private boolean jj_2_249(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_249()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(248, xla); }
  }

  private boolean jj_2_250(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_250()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(249, xla); }
  }

  private boolean jj_2_251(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_251()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(250, xla); }
  }

  private boolean jj_2_252(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_252()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(251, xla); }
  }

  private boolean jj_2_253(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_253()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(252, xla); }
  }

  private boolean jj_2_254(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_254()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(253, xla); }
  }

  private boolean jj_2_255(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_255()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(254, xla); }
  }

  private boolean jj_2_256(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_256()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(255, xla); }
  }

  private boolean jj_2_257(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_257()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(256, xla); }
  }

  private boolean jj_2_258(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_258()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(257, xla); }
  }

  private boolean jj_2_259(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_259()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(258, xla); }
  }

  private boolean jj_2_260(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_260()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(259, xla); }
  }

  private boolean jj_2_261(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_261()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(260, xla); }
  }

  private boolean jj_2_262(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_262()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(261, xla); }
  }

  private boolean jj_2_263(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_263()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(262, xla); }
  }

  private boolean jj_2_264(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_264()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(263, xla); }
  }

  private boolean jj_2_265(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_265()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(264, xla); }
  }

  private boolean jj_2_266(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_266()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(265, xla); }
  }

  private boolean jj_2_267(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_267()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(266, xla); }
  }

  private boolean jj_3R_ConditionalRule_5362_3_172()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_208()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_125()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3R_TupleTerm_3824_3_133()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_170()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_124()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3R_BasicTD_2287_3_96()
 {
    if (jj_scan_token(BASIC)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3_123()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_122()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3_243()
 {
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3R_DomainDefinition_1506_3_73()
 {
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_121()
 {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3_120()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    return false;
  }

  private boolean jj_3R_AnyDomain_2266_3_92()
 {
    if (jj_scan_token(ANYDOMAIN)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3R_BlockRule_5332_3_171()
 {
    if (jj_scan_token(PAR)) return true;
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_119()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_relationalExpr_3027_3_192()
 {
    if (jj_3R_notLogicExpr_3084_3_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(114)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_3R_BasicTD_2287_3_96()) return true;
    return false;
  }

  private boolean jj_3_169()
 {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_3R_AbstractTD_2303_3_95()) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_EnumTD_2336_3_94()) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_StructuredTD_2398_3_93()) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_3R_AnyDomain_2266_3_92()) return true;
    return false;
  }

  private boolean jj_3R_LetTerm_4550_3_153()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_208()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(116)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(ENDLET)) return true;
    return false;
  }

  private boolean jj_3R_TypeDomain_2248_3_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_168()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_null_3689_76_201()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_CaseTerm_3759_3_144()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    if (jj_3_168()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_168()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_169()) jj_scanpos = xsp;
    if (jj_scan_token(END_SWITCH)) return true;
    return false;
  }

  private boolean jj_3_207()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_242()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_ConcreteDomain_2219_3_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_241()
 {
    if (jj_3R_LocationTerm_3348_3_177()) return true;
    return false;
  }

  private boolean jj_3R_UpdateRule_5276_3_215()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_241()) {
    jj_scanpos = xsp;
    if (jj_3_242()) return true;
    }
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_Property_1823_3_78()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_TypeDomain_2248_3_91()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_ConcreteDomain_2219_3_90()) return true;
    return false;
  }

  private boolean jj_3_206()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_Domain_2201_3_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_FairnessConstraint_2079_3_77()) return true;
    return false;
  }

  private boolean jj_3R_andLogicExpr_2964_5_217()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_relationalExpr_3027_3_192()) return true;
    return false;
  }

  private boolean jj_3R_andLogicExpr_2962_3_119()
 {
    if (jj_3R_relationalExpr_3027_3_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_andLogicExpr_2964_5_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_167()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_InvarConstraint_2169_3_76()) return true;
    return false;
  }

  private boolean jj_3R_SkipRule_5261_3_169()
 {
    if (jj_scan_token(Skip)) return true;
    return false;
  }

  private boolean jj_3R_null_3689_40_200()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ImportClause_652_3_62()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_MOD_ID_6454_3_187()) return true;
    return false;
  }

  private boolean jj_3_240()
 {
    if (jj_3R_ExtendRule_5761_3_176()) return true;
    return false;
  }

  private boolean jj_3_239()
 {
    if (jj_3R_LetRule_5594_3_175()) return true;
    return false;
  }

  private boolean jj_3_238()
 {
    if (jj_3R_ForallRule_5506_3_174()) return true;
    return false;
  }

  private boolean jj_3_237()
 {
    if (jj_3R_ChooseRule_5408_3_173()) return true;
    return false;
  }

  private boolean jj_3_236()
 {
    if (jj_3R_ConditionalRule_5362_3_172()) return true;
    return false;
  }

  private boolean jj_3R_ForallTerm_4477_3_210()
 {
    if (jj_scan_token(114)) return true;
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_206()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_207()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_235()
 {
    if (jj_3R_BlockRule_5332_3_171()) return true;
    return false;
  }

  private boolean jj_3_234()
 {
    if (jj_3R_MacroCallRule_5676_3_170()) return true;
    return false;
  }

  private boolean jj_3_233()
 {
    if (jj_3R_SkipRule_5261_3_169()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalTerm_3706_3_143()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_167()) jj_scanpos = xsp;
    if (jj_scan_token(ENDIF)) return true;
    return false;
  }

  private boolean jj_3R_or_xorLogicExpr_2935_7_118()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_TurboLocalStateRule_6006_3_182()
 {
    if (jj_3R_LocalFunction_2675_3_112()) return true;
    return false;
  }

  private boolean jj_3R_BasicRule_5239_3_161()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_233()) {
    jj_scanpos = xsp;
    if (jj_3_234()) {
    jj_scanpos = xsp;
    if (jj_3_235()) {
    jj_scanpos = xsp;
    if (jj_3_236()) {
    jj_scanpos = xsp;
    if (jj_3_237()) {
    jj_scanpos = xsp;
    if (jj_3_238()) {
    jj_scanpos = xsp;
    if (jj_3_239()) {
    jj_scanpos = xsp;
    if (jj_3_240()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_InvarConstraint_2169_3_76()
 {
    if (jj_scan_token(INVAR)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_or_xorLogicExpr_2930_7_117()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("or");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_or_xorLogicExpr_2930_7_117()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("xor");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_or_xorLogicExpr_2935_7_118()) return true;
    }
    if (jj_3R_andLogicExpr_2962_3_119()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_ExportClause_871_3_63()) return true;
    return false;
  }

  private boolean jj_3_163()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_3R_null_3687_5_145()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_166()
 {
    if (jj_3R_DomainTerm_5051_3_128()) return true;
    return false;
  }

  private boolean jj_3_165()
 {
    if (jj_3R_RuleAsTerm_5078_3_147()) return true;
    return false;
  }

  private boolean jj_3R_or_xorLogicExpr_2927_3_190()
 {
    if (jj_3R_andLogicExpr_2962_3_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_164()
 {
    if (jj_3R_CollectionTerm_3879_3_146()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_ImportClause_652_3_62()) return true;
    return false;
  }

  private boolean jj_3R_null_3687_5_145()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_3689_40_200()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_null_3689_76_201()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3R_ExtendedTerm_3685_5_191()
 {
    if (jj_3R_VariableBindingTerm_4276_3_209()) return true;
    return false;
  }

  private boolean jj_3_231()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_162()
 {
    if (jj_3R_TupleTerm_3824_3_133()) return true;
    return false;
  }

  private boolean jj_3_205()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_161()
 {
    if (jj_3R_CaseTerm_3759_3_144()) return true;
    return false;
  }

  private boolean jj_3_160()
 {
    if (jj_3R_ConditionalTerm_3706_3_143()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_RuleDeclaration_1634_3_75()) return true;
    return false;
  }

  private boolean jj_3R_ExtendedTerm_3679_3_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) {
    jj_scanpos = xsp;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3R_ExtendedTerm_3685_5_191()) {
    jj_scanpos = xsp;
    if (jj_3_164()) {
    jj_scanpos = xsp;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    if (jj_3_166()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_232()
 {
    if (jj_scan_token(123)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_260()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_230()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_229()
 {
    if (jj_3R_FunctionTerm_3295_3_131()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2900_7_116()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_or_xorLogicExpr_2927_3_190()) return true;
    return false;
  }

  private boolean jj_3_259()
 {
    if (jj_3R_LocationTerm_3348_3_177()) return true;
    return false;
  }

  private boolean jj_3R_TermAsRule_5203_3_167()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_229()) {
    jj_scanpos = xsp;
    if (jj_3_230()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_232()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Expression_2894_7_115()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_or_xorLogicExpr_2927_3_190()) return true;
    return false;
  }

  private boolean jj_3R_TurboReturnRule_5965_3_216()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_259()) {
    jj_scanpos = xsp;
    if (jj_3_260()) return true;
    }
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_null_5183_16_165()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("implies");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Expression_2894_7_115()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("iff");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_Expression_2900_7_116()) return true;
    }
    return false;
  }

  private boolean jj_3R_CompassionConstraint_2127_3_89()
 {
    if (jj_scan_token(COMPASSION)) return true;
    if (jj_scan_token(114)) return true;
    return false;
  }

  private boolean jj_3_204()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_226()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_5183_16_165()) {
    jj_scanpos = xsp;
    if (jj_3R_null_5184_5_166()) return true;
    }
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_null_5180_16_163()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2891_3_113()
 {
    if (jj_3R_or_xorLogicExpr_2927_3_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_225()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_5180_16_163()) {
    jj_scanpos = xsp;
    if (jj_3R_null_5181_5_164()) return true;
    }
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_EnumTerm_3656_3_142()
 {
    if (jj_3R_ID_ENUM_6355_3_189()) return true;
    return false;
  }

  private boolean jj_3_228()
 {
    if (jj_3R_DerivedRule_6175_3_168()) return true;
    return false;
  }

  private boolean jj_3_227()
 {
    if (jj_3R_TermAsRule_5203_3_167()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_Initialization_1079_3_60()) return true;
    return false;
  }

  private boolean jj_3R_null_5184_5_166()
 {
    if (jj_3R_LocationTerm_3348_3_177()) return true;
    return false;
  }

  private boolean jj_3_115()
 {
    if (jj_3R_Expression_2891_3_113()) return true;
    return false;
  }

  private boolean jj_3R_Rule_5183_5_207()
 {
    if (jj_3R_TurboReturnRule_5965_3_216()) return true;
    return false;
  }

  private boolean jj_3R_null_5181_5_164()
 {
    if (jj_3R_LocationTerm_3348_3_177()) return true;
    return false;
  }

  private boolean jj_3R_Rule_5180_5_206()
 {
    if (jj_3R_UpdateRule_5276_3_215()) return true;
    return false;
  }

  private boolean jj_3_224()
 {
    if (jj_3R_TurboRule_5833_3_162()) return true;
    return false;
  }

  private boolean jj_3_223()
 {
    if (jj_3R_BasicRule_5239_3_161()) return true;
    return false;
  }

  private boolean jj_3_116()
 {
    if (jj_3R_ExtendedTerm_3679_3_114()) return true;
    return false;
  }

  private boolean jj_3R_TermForUpdateRule_2873_5_213()
 {
    if (jj_3R_Expression_2891_3_113()) return true;
    return false;
  }

  private boolean jj_3R_Rule_5176_3_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_223()) {
    jj_scanpos = xsp;
    if (jj_3_224()) {
    jj_scanpos = xsp;
    if (jj_3R_Rule_5180_5_206()) {
    jj_scanpos = xsp;
    if (jj_3R_Rule_5183_5_207()) {
    jj_scanpos = xsp;
    if (jj_3_227()) {
    jj_scanpos = xsp;
    if (jj_3_228()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_Initialization_1079_3_60()) return true;
    return false;
  }

  private boolean jj_3R_TermForUpdateRule_2872_3_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TermForUpdateRule_2873_5_213()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_FunctionDefinition_1548_3_74()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(Default)) return true;
    if (jj_3R_Initialization_1079_3_60()) return true;
    return false;
  }

  private boolean jj_3R_ExistUniqueTerm_4398_3_211()
 {
    if (jj_scan_token(114)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_scan_token(UNIQUE)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_204()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_205()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_UndefTerm_3631_3_141()
 {
    if (jj_scan_token(UNDEF)) return true;
    return false;
  }

  private boolean jj_3R_JusticeConstraint_2096_3_88()
 {
    if (jj_scan_token(JUSTICE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_DomainDefinition_1506_3_73()) return true;
    return false;
  }

  private boolean jj_3R_Term_2861_3_148()
 {
    if (jj_3R_TermForUpdateRule_2872_3_204()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(MAIN)) return true;
    if (jj_3R_MacroDeclaration_1654_3_59()) return true;
    return false;
  }

  private boolean jj_3_257()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_221()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_CompassionConstraint_2127_3_89()) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_JusticeConstraint_2096_3_88()) return true;
    return false;
  }

  private boolean jj_3_258()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_257()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_FairnessConstraint_2079_3_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    return false;
  }

  private boolean jj_3_114()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_222()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_221()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_159()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_158()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_203()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_BooleanTerm_3604_3_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_158()) {
    jj_scanpos = xsp;
    if (jj_3_159()) return true;
    }
    return false;
  }

  private boolean jj_3R_MacroDcl_5137_3_203()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ASM)) return true;
    return false;
  }

  private boolean jj_3R_TurboCallRule_5901_3_181()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    if (jj_scan_token(114)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(ASYNCR)) return true;
    return false;
  }

  private boolean jj_3_113()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_ID_LTL_6410_3_87()) return true;
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    if (jj_3R_ID_6443_3_61()) return true;
    return false;
  }

  private boolean jj_3R_OutFunction_2823_3_108()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) jj_scanpos = xsp;
    if (jj_scan_token(OUT)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3R_StringTerm_3582_3_139()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_202()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_LtlSpec_2046_3_84()
 {
    if (jj_scan_token(LTLSPEC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) jj_scanpos = xsp;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_IterateRule_5879_3_180()
 {
    if (jj_scan_token(ITERATE)) return true;
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3_112()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3R_AgentInitialization_1264_3_71()
 {
    if (jj_scan_token(AGENT)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_256()
 {
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_ID_CTL_6399_3_86()) return true;
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3_111()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_CharTerm_3556_3_138()
 {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ExistTerm_4322_3_155()
 {
    if (jj_scan_token(114)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_202()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_203()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_MonitoredFunction_2786_3_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) jj_scanpos = xsp;
    if (jj_scan_token(MONITORED)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3R_SeqRule_5851_3_179()
 {
    if (jj_scan_token(seq)) return true;
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3R_RuleAsTerm_5078_3_147()
 {
    if (jj_scan_token(125)) return true;
    if (jj_3R_MacroDcl_5137_3_203()) return true;
    if (jj_scan_token(126)) return true;
    return false;
  }

  private boolean jj_3R_CtlSpec_2010_3_83()
 {
    if (jj_scan_token(CTLSPEC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_200()
 {
    if (jj_scan_token(114)) return true;
    if (jj_scan_token(EXIST)) return true;
    if (jj_scan_token(UNIQUE)) return true;
    return false;
  }

  private boolean jj_3_255()
 {
    if (jj_3R_TurboLocalStateRule_6006_3_182()) return true;
    return false;
  }

  private boolean jj_3_199()
 {
    if (jj_scan_token(114)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_254()
 {
    if (jj_3R_TurboCallRule_5901_3_181()) return true;
    return false;
  }

  private boolean jj_3_110()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_253()
 {
    if (jj_3R_IterateRule_5879_3_180()) return true;
    return false;
  }

  private boolean jj_3_252()
 {
    if (jj_3R_SeqRule_5851_3_179()) return true;
    return false;
  }

  private boolean jj_3R_TurboRule_5833_3_162()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_252()) {
    jj_scanpos = xsp;
    if (jj_3_253()) {
    jj_scanpos = xsp;
    if (jj_3_254()) {
    jj_scanpos = xsp;
    if (jj_3_255()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_201()
 {
    if (jj_3R_ExistTerm_4322_3_155()) return true;
    return false;
  }

  private boolean jj_3R_NaturalTerm_3530_3_137()
 {
    if (jj_scan_token(NATNUMBER)) return true;
    return false;
  }

  private boolean jj_3R_FiniteQuantificationTerm_4294_5_197()
 {
    if (jj_3R_ExistUniqueTerm_4398_3_211()) return true;
    return false;
  }

  private boolean jj_3R_FiniteQuantificationTerm_4292_5_196()
 {
    if (jj_3R_ForallTerm_4477_3_210()) return true;
    return false;
  }

  private boolean jj_3R_FiniteQuantificationTerm_4291_3_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FiniteQuantificationTerm_4292_5_196()) {
    jj_scanpos = xsp;
    if (jj_3R_FiniteQuantificationTerm_4294_5_197()) {
    jj_scanpos = xsp;
    if (jj_3_201()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_109()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_DomainTerm_5051_3_128()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3R_SharedFunction_2749_3_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) jj_scanpos = xsp;
    if (jj_scan_token(SHARED)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_198()
 {
    if (jj_3R_ComprehensionTerm_4657_3_154()) return true;
    return false;
  }

  private boolean jj_3_197()
 {
    if (jj_3R_FiniteQuantificationTerm_4291_3_129()) return true;
    return false;
  }

  private boolean jj_3_196()
 {
    if (jj_3R_LetTerm_4550_3_153()) return true;
    return false;
  }

  private boolean jj_3R_VariableBindingTerm_4276_3_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    if (jj_3_197()) {
    jj_scanpos = xsp;
    if (jj_3_198()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_IntegerTerm_3504_3_136()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3_108()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_251()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3_107()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(114)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_ControlledFunction_2712_3_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) jj_scanpos = xsp;
    if (jj_scan_token(CONTROLLED)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_220()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_RealTerm_3477_3_135()
 {
    if (jj_scan_token(REAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_191()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_106()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3R_ExtendRule_5761_3_176()
 {
    if (jj_scan_token(EXTEND)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_scan_token(115)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_193()
 {
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_219()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_FunctionInitialization_1154_3_70()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3R_ComplexTerm_3453_3_134()
 {
    if (jj_scan_token(COMPLEX_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_190()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3_105()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_192()
 {
    Token xsp;
    if (jj_3_190()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_194()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_192()) {
    jj_scanpos = xsp;
    if (jj_3_193()) return true;
    }
    return false;
  }

  private boolean jj_3_150()
 {
    if (jj_3R_RealTerm_3477_3_135()) return true;
    return false;
  }

  private boolean jj_3R_LocalFunction_2675_3_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) jj_scanpos = xsp;
    if (jj_scan_token(LOCAL)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_149()
 {
    if (jj_3R_ComplexTerm_3453_3_134()) return true;
    return false;
  }

  private boolean jj_3_157()
 {
    if (jj_3R_EnumTerm_3656_3_142()) return true;
    return false;
  }

  private boolean jj_3_156()
 {
    if (jj_3R_UndefTerm_3631_3_141()) return true;
    return false;
  }

  private boolean jj_3_155()
 {
    if (jj_3R_BooleanTerm_3604_3_140()) return true;
    return false;
  }

  private boolean jj_3_154()
 {
    if (jj_3R_StringTerm_3582_3_139()) return true;
    return false;
  }

  private boolean jj_3_153()
 {
    if (jj_3R_CharTerm_3556_3_138()) return true;
    return false;
  }

  private boolean jj_3_152()
 {
    if (jj_3R_NaturalTerm_3530_3_137()) return true;
    return false;
  }

  private boolean jj_3_151()
 {
    if (jj_3R_IntegerTerm_3504_3_136()) return true;
    return false;
  }

  private boolean jj_3_195()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_194()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ConstantTerm_3432_5_199()
 {
    if (jj_3R_RealTerm_3477_3_135()) return true;
    return false;
  }

  private boolean jj_3R_ConstantTerm_3430_5_198()
 {
    if (jj_3R_ComplexTerm_3453_3_134()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3R_BagCT_4964_3_160()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_219()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_220()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_104()
 {
    if (jj_3R_LocalFunction_2675_3_112()) return true;
    return false;
  }

  private boolean jj_3R_ConstantTerm_3429_3_130()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConstantTerm_3430_5_198()) {
    jj_scanpos = xsp;
    if (jj_3R_ConstantTerm_3432_5_199()) {
    jj_scanpos = xsp;
    if (jj_3_151()) {
    jj_scanpos = xsp;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) {
    jj_scanpos = xsp;
    if (jj_3_154()) {
    jj_scanpos = xsp;
    if (jj_3_155()) {
    jj_scanpos = xsp;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    if (jj_3_157()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_103()
 {
    if (jj_3R_ControlledFunction_2712_3_111()) return true;
    return false;
  }

  private boolean jj_3_102()
 {
    if (jj_3R_SharedFunction_2749_3_110()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(114)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_BagTerm_4191_3_152()
 {
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_195()) jj_scanpos = xsp;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_101()
 {
    if (jj_3R_MonitoredFunction_2786_3_109()) return true;
    return false;
  }

  private boolean jj_3_100()
 {
    if (jj_3R_OutFunction_2823_3_108()) return true;
    return false;
  }

  private boolean jj_3R_DomainInitialization_1120_3_69()
 {
    if (jj_scan_token(DOMAIN)) return true;
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_DynamicFunction_2652_3_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_ID_AXIOM_6388_3_85()) return true;
    return false;
  }

  private boolean jj_3R_VariableTerm_3403_3_72()
 {
    if (jj_3R_ID_VARIABLE_6344_3_188()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_AgentInitialization_1264_3_71()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_FunctionInitialization_1154_3_70()) return true;
    return false;
  }

  private boolean jj_3_249()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_Invariant_1855_3_81()
 {
    if (jj_scan_token(INVARIANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    if (jj_scan_token(OVER)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_DomainInitialization_1120_3_69()) return true;
    return false;
  }

  private boolean jj_3_250()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_StaticFunction_2621_3_106()
 {
    if (jj_scan_token(STATIC)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_218()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_MOD_ID_6454_3_187()
 {
    if (jj_scan_token(MOD_ID)) return true;
    return false;
  }

  private boolean jj_3R_Initialization_1079_3_60()
 {
    if (jj_scan_token(INIT)) return true;
    if (jj_3R_ID_6443_3_61()) return true;
    return false;
  }

  private boolean jj_3R_MacroCallRule_5676_3_170()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    if (jj_scan_token(123)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_LtlSpec_2046_3_84()) return true;
    return false;
  }

  private boolean jj_3R_ID_6443_3_61()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_CtlSpec_2010_3_83()) return true;
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_187()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(121)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_TemporalProperty_1837_3_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3_217()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ID_AGENT_6432_3_132()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_148()
 {
    if (jj_3R_TupleTerm_3824_3_133()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_TemporalProperty_1837_3_82()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_Invariant_1855_3_81()) return true;
    return false;
  }

  private boolean jj_3R_Property_1823_3_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_DerivedFunction_2589_3_105()
 {
    if (jj_scan_token(DERIVED)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_147()
 {
    if (jj_3R_ID_AGENT_6432_3_132()) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_ID_FUNCTION_6421_3_65()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_LocationTerm_3348_3_177()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) jj_scanpos = xsp;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    xsp = jj_scanpos;
    if (jj_3_148()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_Function_2559_3_68()) return true;
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_3R_DynamicFunction_2652_3_107()) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_3R_StaticFunction_2621_3_106()) return true;
    return false;
  }

  private boolean jj_3_189()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(121)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ID_LTL_6410_3_87()
 {
    if (jj_scan_token(ID_LTL)) return true;
    return false;
  }

  private boolean jj_3R_BasicFunction_2573_3_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) return true;
    }
    return false;
  }

  private boolean jj_3R_SequenceCT_4873_3_159()
 {
    if (jj_scan_token(123)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_217()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_218()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3_188()
 {
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3R_ID_CTL_6399_3_86()
 {
    if (jj_scan_token(ID_CTL)) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_3R_DerivedFunction_2589_3_105()) return true;
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_3R_BasicFunction_2573_3_104()) return true;
    return false;
  }

  private boolean jj_3R_MapTerm_4093_3_212()
 {
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_188()) {
    jj_scanpos = xsp;
    if (jj_3_189()) return true;
    }
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_Function_2559_3_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    return false;
  }

  private boolean jj_3_248()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_ID_AXIOM_6388_3_85()
 {
    if (jj_scan_token(ID_AXIOM)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_Domain_2201_3_67()) return true;
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_3R_StructuredTD_2398_3_93()) return true;
    return false;
  }

  private boolean jj_3_146()
 {
    if (jj_3R_TupleTerm_3824_3_133()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_ID_RULE_6377_3_66()
 {
    if (jj_scan_token(ID_RULE)) return true;
    return false;
  }

  private boolean jj_3_92()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3R_getDomainByID_2534_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    return false;
  }

  private boolean jj_3_145()
 {
    if (jj_3R_ID_AGENT_6432_3_132()) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_ID_DOMAIN_6366_3_64()
 {
    if (jj_scan_token(ID_DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionTerm_3295_3_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) jj_scanpos = xsp;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    xsp = jj_scanpos;
    if (jj_3_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LetRule_5594_3_175()
 {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(114)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_216()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ID_ENUM_6355_3_189()
 {
    if (jj_scan_token(ID_ENUM)) return true;
    return false;
  }

  private boolean jj_3R_MapDomain_2518_3_103()
 {
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(115)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_144()
 {
    if (jj_3R_FunctionTerm_3295_3_131()) return true;
    return false;
  }

  private boolean jj_3_143()
 {
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_182()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_142()
 {
    if (jj_3R_ConstantTerm_3429_3_130()) return true;
    return false;
  }

  private boolean jj_3R_BasicTerm_3277_3_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_142()) {
    jj_scanpos = xsp;
    if (jj_3_143()) {
    jj_scanpos = xsp;
    if (jj_3_144()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ID_VARIABLE_6344_3_188()
 {
    if (jj_scan_token(ID_VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_BagDomain_2504_3_102()
 {
    if (jj_scan_token(BAG)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_184()
 {
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_182()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_215()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_140()
 {
    if (jj_3R_FiniteQuantificationTerm_4291_3_129()) return true;
    return false;
  }

  private boolean jj_3R_TurboDeclaration_1732_3_79()
 {
    if (jj_scan_token(TURBO)) return true;
    if (jj_scan_token(RULE)) return true;
    return false;
  }

  private boolean jj_3_138()
 {
    if (jj_3R_BasicTerm_3277_3_127()) return true;
    return false;
  }

  private boolean jj_3_141()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_Expression_2891_3_113()) return true;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_247()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_basicExpr_3255_5_195()
 {
    if (jj_3R_FiniteQuantificationTerm_4291_3_129()) return true;
    return false;
  }

  private boolean jj_3R_PowersetDomain_2490_3_101()
 {
    if (jj_scan_token(POWERSET)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_181()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_139()
 {
    if (jj_3R_DomainTerm_5051_3_128()) return true;
    return false;
  }

  private boolean jj_3R_basicExpr_3252_5_194()
 {
    if (jj_3R_BasicTerm_3277_3_127()) return true;
    return false;
  }

  private boolean jj_3_183()
 {
    Token xsp;
    if (jj_3_181()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_185()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) return true;
    }
    return false;
  }

  private boolean jj_3R_basicExpr_3251_3_126()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_basicExpr_3252_5_194()) {
    jj_scanpos = xsp;
    if (jj_3_139()) {
    jj_scanpos = xsp;
    if (jj_3R_basicExpr_3255_5_195()) {
    jj_scanpos = xsp;
    if (jj_3_141()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_SequenceDomain_2476_3_100()
 {
    if (jj_scan_token(SEQ)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3_137()
 {
    if (jj_3R_basicExpr_3251_3_126()) return true;
    return false;
  }

  private boolean jj_3R_MapCT_4774_3_158()
 {
    if (jj_scan_token(118)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_215()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_216()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(121)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(119)) return true;
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_IterativeWhileRule_6307_3_186()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_186()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_246()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_135()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_unaryExpr_3217_3_125()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3R_SetTerm_3991_3_151()
 {
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_186()) jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3_134()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_unaryExpr_3217_3_125()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_unaryExpr_3217_3_125()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) return true;
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(115)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ProductDomain_2443_3_99()
 {
    if (jj_scan_token(PROD)) return true;
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    Token xsp;
    if (jj_3_91()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_91()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_null_4658_85_157()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ForallRule_5506_3_174()
 {
    if (jj_scan_token(FORALL)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3R_RecursiveWhileRule_6271_3_185()
 {
    if (jj_scan_token(WHILEREC)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_89()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    return false;
  }

  private boolean jj_3_214()
 {
    if (jj_scan_token(119)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_133()
 {
    if (jj_scan_token(PWR)) return true;
    if (jj_3R_unaryExpr_3217_3_125()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3_267()
 {
    if (jj_3R_IterativeWhileRule_6307_3_186()) return true;
    return false;
  }

  private boolean jj_3R_powerExpr_3191_3_124()
 {
    if (jj_3R_unaryExpr_3217_3_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_266()
 {
    if (jj_3R_RecursiveWhileRule_6271_3_185()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(MACRO)) return true;
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_getDomainByID_2534_3_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_89()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_TurboDerivedRule_6256_3_184()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_266()) {
    jj_scanpos = xsp;
    if (jj_3_267()) return true;
    }
    return false;
  }

  private boolean jj_3R_MacroDeclaration_1654_3_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    if (jj_scan_token(RULE)) return true;
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3R_RuleDomain_2416_3_98()
 {
    if (jj_scan_token(RULEDOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_176()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_213()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_3R_MapDomain_2518_3_103()) return true;
    return false;
  }

  private boolean jj_3R_ExportClause_871_3_63()
 {
    if (jj_scan_token(EXPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_TurboDeclaration_1732_3_79()) return true;
    return false;
  }

  private boolean jj_3_87()
 {
    if (jj_3R_BagDomain_2504_3_102()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_MacroDeclaration_1654_3_59()) return true;
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_3R_PowersetDomain_2490_3_101()) return true;
    return false;
  }

  private boolean jj_3R_null_4658_49_156()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_3R_SequenceDomain_2476_3_100()) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_3R_ProductDomain_2443_3_99()) return true;
    return false;
  }

  private boolean jj_3R_RuleDeclaration_1634_3_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_RuleDomain_2416_3_98()) return true;
    return false;
  }

  private boolean jj_3_178()
 {
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_176()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_multiplicativeExpr_3161_7_123()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_powerExpr_3191_3_124()) return true;
    return false;
  }

  private boolean jj_3R_StructuredTD_2398_3_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_265()
 {
    if (jj_scan_token(OTHERWISE)) return true;
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3_132()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_powerExpr_3191_3_124()) return true;
    return false;
  }

  private boolean jj_3_175()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_177()
 {
    Token xsp;
    if (jj_3_175()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) return true;
    }
    return false;
  }

  private boolean jj_3_131()
 {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_powerExpr_3191_3_124()) return true;
    return false;
  }

  private boolean jj_3_130()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("mod");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_multiplicativeExpr_3161_7_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_EnumElement_2384_3_97()
 {
    if (jj_3R_ID_ENUM_6355_3_189()) return true;
    return false;
  }

  private boolean jj_3R_SetCT_4683_3_214()
 {
    if (jj_scan_token(118)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_213()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_214()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3R_multiplicativeExpr_3148_3_122()
 {
    if (jj_3R_powerExpr_3191_3_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_180()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_179()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_264()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_SequenceTerm_3904_3_149()
 {
    if (jj_scan_token(123)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_180()) jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    return false;
  }

  private boolean jj_3_209()
 {
    if (jj_scan_token(118)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_4658_49_156()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_null_4658_85_157()) jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(120)) return true;
    return false;
  }

  private boolean jj_3_245()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_scan_token(115)) return true;
    return false;
  }

  private boolean jj_3R_CaseRule_6201_3_208()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_null_3881_20_150()
 {
    if (jj_3R_Term_2861_3_148()) return true;
    if (jj_scan_token(121)) return true;
    return false;
  }

  private boolean jj_3_212()
 {
    if (jj_3R_BagCT_4964_3_160()) return true;
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3_211()
 {
    if (jj_3R_SequenceCT_4873_3_159()) return true;
    return false;
  }

  private boolean jj_3_210()
 {
    if (jj_3R_MapCT_4774_3_158()) return true;
    return false;
  }

  private boolean jj_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    if (jj_3R_EnumElement_2384_3_97()) return true;
    return false;
  }

  private boolean jj_3_129()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_multiplicativeExpr_3148_3_122()) return true;
    return false;
  }

  private boolean jj_3R_ComprehensionTerm_4658_5_205()
 {
    if (jj_3R_SetCT_4683_3_214()) return true;
    return false;
  }

  private boolean jj_3_172()
 {
    if (jj_scan_token(118)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_3881_20_150()) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) return true;
    }
    return false;
  }

  private boolean jj_3R_ComprehensionTerm_4657_3_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ComprehensionTerm_4658_5_205()) {
    jj_scanpos = xsp;
    if (jj_3_210()) {
    jj_scanpos = xsp;
    if (jj_3_211()) {
    jj_scanpos = xsp;
    if (jj_3_212()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_BasicDerivedRule_6189_3_183()
 {
    if (jj_3R_CaseRule_6201_3_208()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  private boolean jj_3_128()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_multiplicativeExpr_3148_3_122()) return true;
    return false;
  }

  private boolean jj_3_174()
 {
    if (jj_3R_BagTerm_4191_3_152()) return true;
    return false;
  }

  private boolean jj_3_173()
 {
    if (jj_3R_SetTerm_3991_3_151()) return true;
    return false;
  }

  private boolean jj_3_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_CollectionTerm_3881_5_202()
 {
    if (jj_3R_MapTerm_4093_3_212()) return true;
    return false;
  }

  private boolean jj_3_171()
 {
    if (jj_3R_SequenceTerm_3904_3_149()) return true;
    return false;
  }

  private boolean jj_3R_additiveExpr_3114_3_121()
 {
    if (jj_3R_multiplicativeExpr_3148_3_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CollectionTerm_3879_3_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_171()) {
    jj_scanpos = xsp;
    if (jj_3R_CollectionTerm_3881_5_202()) {
    jj_scanpos = xsp;
    if (jj_3_173()) {
    jj_scanpos = xsp;
    if (jj_3_174()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_263()
 {
    if (jj_3R_TurboDerivedRule_6256_3_184()) return true;
    return false;
  }

  private boolean jj_3_262()
 {
    if (jj_3R_BasicDerivedRule_6189_3_183()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_ChooseRule_5408_3_173()
 {
    if (jj_scan_token(CHOOSE)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_DerivedRule_6175_3_168()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_262()) {
    jj_scanpos = xsp;
    if (jj_3_263()) return true;
    }
    return false;
  }

  private boolean jj_3R_EnumTD_2336_3_94()
 {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_126()
 {
    if (jj_3R_additiveExpr_3114_3_121()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_VariableTerm_3403_3_72()) return true;
    return false;
  }

  private boolean jj_3R_notLogicExpr_3085_5_193()
 {
    if (jj_scan_token(ID_FUNCTION)) return true;
    if (jj_3R_additiveExpr_3114_3_121()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_ID_DOMAIN_6366_3_64()) return true;
    return false;
  }

  private boolean jj_3R_notLogicExpr_3084_3_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID_FUNCTION && getToken(1).image.equals("not");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_notLogicExpr_3085_5_193()) {
    jj_scanpos = xsp;
    if (jj_3_126()) return true;
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(115)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_FunctionDefinition_1548_3_74()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_ID_FUNCTION_6421_3_65()) return true;
    return false;
  }

  private boolean jj_3_244()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Rule_5176_3_178()) return true;
    return false;
  }

  private boolean jj_3_170()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_scan_token(DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_261()
 {
    if (jj_scan_token(115)) return true;
    if (jj_3R_Term_2861_3_148()) return true;
    return false;
  }

  private boolean jj_3R_AbstractTD_2303_3_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) jj_scanpos = xsp;
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_ID_RULE_6377_3_66()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ASMParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x8000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x200,0x8000,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[267];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ASMParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ASMParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ASMParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ASMParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ASMParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ASMParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ASMParser(ASMParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ASMParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[129];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 129; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 267; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			   case 64: jj_3_65(); break;
			   case 65: jj_3_66(); break;
			   case 66: jj_3_67(); break;
			   case 67: jj_3_68(); break;
			   case 68: jj_3_69(); break;
			   case 69: jj_3_70(); break;
			   case 70: jj_3_71(); break;
			   case 71: jj_3_72(); break;
			   case 72: jj_3_73(); break;
			   case 73: jj_3_74(); break;
			   case 74: jj_3_75(); break;
			   case 75: jj_3_76(); break;
			   case 76: jj_3_77(); break;
			   case 77: jj_3_78(); break;
			   case 78: jj_3_79(); break;
			   case 79: jj_3_80(); break;
			   case 80: jj_3_81(); break;
			   case 81: jj_3_82(); break;
			   case 82: jj_3_83(); break;
			   case 83: jj_3_84(); break;
			   case 84: jj_3_85(); break;
			   case 85: jj_3_86(); break;
			   case 86: jj_3_87(); break;
			   case 87: jj_3_88(); break;
			   case 88: jj_3_89(); break;
			   case 89: jj_3_90(); break;
			   case 90: jj_3_91(); break;
			   case 91: jj_3_92(); break;
			   case 92: jj_3_93(); break;
			   case 93: jj_3_94(); break;
			   case 94: jj_3_95(); break;
			   case 95: jj_3_96(); break;
			   case 96: jj_3_97(); break;
			   case 97: jj_3_98(); break;
			   case 98: jj_3_99(); break;
			   case 99: jj_3_100(); break;
			   case 100: jj_3_101(); break;
			   case 101: jj_3_102(); break;
			   case 102: jj_3_103(); break;
			   case 103: jj_3_104(); break;
			   case 104: jj_3_105(); break;
			   case 105: jj_3_106(); break;
			   case 106: jj_3_107(); break;
			   case 107: jj_3_108(); break;
			   case 108: jj_3_109(); break;
			   case 109: jj_3_110(); break;
			   case 110: jj_3_111(); break;
			   case 111: jj_3_112(); break;
			   case 112: jj_3_113(); break;
			   case 113: jj_3_114(); break;
			   case 114: jj_3_115(); break;
			   case 115: jj_3_116(); break;
			   case 116: jj_3_117(); break;
			   case 117: jj_3_118(); break;
			   case 118: jj_3_119(); break;
			   case 119: jj_3_120(); break;
			   case 120: jj_3_121(); break;
			   case 121: jj_3_122(); break;
			   case 122: jj_3_123(); break;
			   case 123: jj_3_124(); break;
			   case 124: jj_3_125(); break;
			   case 125: jj_3_126(); break;
			   case 126: jj_3_127(); break;
			   case 127: jj_3_128(); break;
			   case 128: jj_3_129(); break;
			   case 129: jj_3_130(); break;
			   case 130: jj_3_131(); break;
			   case 131: jj_3_132(); break;
			   case 132: jj_3_133(); break;
			   case 133: jj_3_134(); break;
			   case 134: jj_3_135(); break;
			   case 135: jj_3_136(); break;
			   case 136: jj_3_137(); break;
			   case 137: jj_3_138(); break;
			   case 138: jj_3_139(); break;
			   case 139: jj_3_140(); break;
			   case 140: jj_3_141(); break;
			   case 141: jj_3_142(); break;
			   case 142: jj_3_143(); break;
			   case 143: jj_3_144(); break;
			   case 144: jj_3_145(); break;
			   case 145: jj_3_146(); break;
			   case 146: jj_3_147(); break;
			   case 147: jj_3_148(); break;
			   case 148: jj_3_149(); break;
			   case 149: jj_3_150(); break;
			   case 150: jj_3_151(); break;
			   case 151: jj_3_152(); break;
			   case 152: jj_3_153(); break;
			   case 153: jj_3_154(); break;
			   case 154: jj_3_155(); break;
			   case 155: jj_3_156(); break;
			   case 156: jj_3_157(); break;
			   case 157: jj_3_158(); break;
			   case 158: jj_3_159(); break;
			   case 159: jj_3_160(); break;
			   case 160: jj_3_161(); break;
			   case 161: jj_3_162(); break;
			   case 162: jj_3_163(); break;
			   case 163: jj_3_164(); break;
			   case 164: jj_3_165(); break;
			   case 165: jj_3_166(); break;
			   case 166: jj_3_167(); break;
			   case 167: jj_3_168(); break;
			   case 168: jj_3_169(); break;
			   case 169: jj_3_170(); break;
			   case 170: jj_3_171(); break;
			   case 171: jj_3_172(); break;
			   case 172: jj_3_173(); break;
			   case 173: jj_3_174(); break;
			   case 174: jj_3_175(); break;
			   case 175: jj_3_176(); break;
			   case 176: jj_3_177(); break;
			   case 177: jj_3_178(); break;
			   case 178: jj_3_179(); break;
			   case 179: jj_3_180(); break;
			   case 180: jj_3_181(); break;
			   case 181: jj_3_182(); break;
			   case 182: jj_3_183(); break;
			   case 183: jj_3_184(); break;
			   case 184: jj_3_185(); break;
			   case 185: jj_3_186(); break;
			   case 186: jj_3_187(); break;
			   case 187: jj_3_188(); break;
			   case 188: jj_3_189(); break;
			   case 189: jj_3_190(); break;
			   case 190: jj_3_191(); break;
			   case 191: jj_3_192(); break;
			   case 192: jj_3_193(); break;
			   case 193: jj_3_194(); break;
			   case 194: jj_3_195(); break;
			   case 195: jj_3_196(); break;
			   case 196: jj_3_197(); break;
			   case 197: jj_3_198(); break;
			   case 198: jj_3_199(); break;
			   case 199: jj_3_200(); break;
			   case 200: jj_3_201(); break;
			   case 201: jj_3_202(); break;
			   case 202: jj_3_203(); break;
			   case 203: jj_3_204(); break;
			   case 204: jj_3_205(); break;
			   case 205: jj_3_206(); break;
			   case 206: jj_3_207(); break;
			   case 207: jj_3_208(); break;
			   case 208: jj_3_209(); break;
			   case 209: jj_3_210(); break;
			   case 210: jj_3_211(); break;
			   case 211: jj_3_212(); break;
			   case 212: jj_3_213(); break;
			   case 213: jj_3_214(); break;
			   case 214: jj_3_215(); break;
			   case 215: jj_3_216(); break;
			   case 216: jj_3_217(); break;
			   case 217: jj_3_218(); break;
			   case 218: jj_3_219(); break;
			   case 219: jj_3_220(); break;
			   case 220: jj_3_221(); break;
			   case 221: jj_3_222(); break;
			   case 222: jj_3_223(); break;
			   case 223: jj_3_224(); break;
			   case 224: jj_3_225(); break;
			   case 225: jj_3_226(); break;
			   case 226: jj_3_227(); break;
			   case 227: jj_3_228(); break;
			   case 228: jj_3_229(); break;
			   case 229: jj_3_230(); break;
			   case 230: jj_3_231(); break;
			   case 231: jj_3_232(); break;
			   case 232: jj_3_233(); break;
			   case 233: jj_3_234(); break;
			   case 234: jj_3_235(); break;
			   case 235: jj_3_236(); break;
			   case 236: jj_3_237(); break;
			   case 237: jj_3_238(); break;
			   case 238: jj_3_239(); break;
			   case 239: jj_3_240(); break;
			   case 240: jj_3_241(); break;
			   case 241: jj_3_242(); break;
			   case 242: jj_3_243(); break;
			   case 243: jj_3_244(); break;
			   case 244: jj_3_245(); break;
			   case 245: jj_3_246(); break;
			   case 246: jj_3_247(); break;
			   case 247: jj_3_248(); break;
			   case 248: jj_3_249(); break;
			   case 249: jj_3_250(); break;
			   case 250: jj_3_251(); break;
			   case 251: jj_3_252(); break;
			   case 252: jj_3_253(); break;
			   case 253: jj_3_254(); break;
			   case 254: jj_3_255(); break;
			   case 255: jj_3_256(); break;
			   case 256: jj_3_257(); break;
			   case 257: jj_3_258(); break;
			   case 258: jj_3_259(); break;
			   case 259: jj_3_260(); break;
			   case 260: jj_3_261(); break;
			   case 261: jj_3_262(); break;
			   case 262: jj_3_263(); break;
			   case 263: jj_3_264(); break;
			   case 264: jj_3_265(); break;
			   case 265: jj_3_266(); break;
			   case 266: jj_3_267(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  /*************
    Attenzione il parser continua ad avere metodi come
    public ASMParser(java.io.InputStream stream) {}
    ...
    che non inizializzano correttamente il parser (ad esempio fileSpec)
    **************/
}
