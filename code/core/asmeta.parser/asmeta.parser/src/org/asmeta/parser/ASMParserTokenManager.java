/* ASMParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ASMParserTokenManager.java */
package org.asmeta.parser;
//import org.apache.log4j.PropertyConfigurator;
//Import JMIs
import asmeta.*;
import asmeta.definitions.*;
import asmeta.structure.*;
import asmeta.terms.*;
import asmeta.transitionrules.*;
import asmeta.definitions.domains.*;
import asmeta.terms.basicterms.*;
import asmeta.terms.furtherterms.*;
import asmeta.transitionrules.basictransitionrules.*;
import asmeta.transitionrules.derivedtransitionrules.*;
import asmeta.transitionrules.turbotransitionrules.*;
import java.io.FileOutputStream;
import java.io.File;
import java.util.*;
import java.nio.charset.Charset;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ASMParserTokenManager implements ASMParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1f8000000000L) != 0L)
         {
            jjmatchedKind = 102;
            return 161;
         }
         if ((active0 & 0x3000000012400L) != 0L || (active1 & 0x102200L) != 0L)
            return 148;
         if ((active0 & 0x80000040000000L) != 0L || (active1 & 0x20080L) != 0L)
         {
            jjmatchedKind = 107;
            return 111;
         }
         if ((active1 & 0x200000018000000L) != 0L)
            return 164;
         if ((active0 & 0x7b7ca07fbd80db80L) != 0L || (active1 & 0xd5d7dL) != 0L)
         {
            jjmatchedKind = 107;
            return 53;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 107;
            return 135;
         }
         if ((active1 & 0x40000000L) != 0L)
            return 78;
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 107;
            return 49;
         }
         if ((active0 & 0x8000400002000000L) != 0L)
         {
            jjmatchedKind = 107;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffca07dbf80df80L) != 0L || (active1 & 0xffcffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 1;
            }
            return 53;
         }
         if ((active0 & 0x2000200000000L) != 0L || (active1 & 0x300L) != 0L)
            return 53;
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 1;
            }
            return 119;
         }
         if ((active0 & 0x1f8000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 1;
            }
            return 163;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 1;
            }
            return 34;
         }
         if ((active0 & 0x12000L) != 0L || (active1 & 0x100000L) != 0L)
            return 147;
         return -1;
      case 2:
         if ((active0 & 0x128000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 2;
            return 163;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
            return 146;
         }
         if ((active0 & 0xfbfce07eff80ff00L) != 0L || (active1 & 0xef6dfL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 2;
            return 53;
         }
         if ((active0 & 0x400000100000080L) != 0L || (active1 & 0x10820L) != 0L)
            return 53;
         if ((active0 & 0xd0000000000L) != 0L)
            return 163;
         return -1;
      case 3:
         if ((active0 & 0x408c202000802000L) != 0L || (active1 & 0x13L) != 0L)
            return 53;
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
            return 163;
         }
         if ((active0 & 0x108000000000L) != 0L)
            return 163;
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
            return 145;
         }
         if ((active0 & 0xbb70c05eff00df00L) != 0L || (active1 & 0xef6ccL) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0xab600056ff005f00L) != 0L || (active1 & 0x76c0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 107;
               jjmatchedPos = 4;
            }
            return 53;
         }
         if ((active0 & 0x10000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 22;
               jjmatchedPos = 4;
            }
            return 53;
         }
         if ((active0 & 0x1010c00800008000L) != 0L || (active1 & 0xe800cL) != 0L)
            return 53;
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 102;
               jjmatchedPos = 4;
            }
            return 163;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
            return 163;
         }
         if ((active0 & 0x34000547b015000L) != 0L || (active1 & 0x86000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 5;
            return 53;
         }
         if ((active0 & 0xa820000284000f00L) != 0L || (active1 & 0x16c0L) != 0L)
            return 53;
         return -1;
      case 6:
         if ((active0 & 0x200000018004000L) != 0L || (active1 & 0x2000L) != 0L)
            return 53;
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 6;
            return 163;
         }
         if ((active0 & 0x140005463011000L) != 0L || (active1 & 0x84000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 6;
            return 53;
         }
         return -1;
      case 7:
         if ((active0 & 0x5002000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 53;
         if ((active0 & 0x20000000000L) != 0L)
            return 163;
         if ((active0 & 0x140000461011000L) != 0L || (active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
            return 53;
         }
         return -1;
      case 8:
         if ((active0 & 0x41000000L) != 0L || (active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
            return 53;
         }
         if ((active0 & 0x140000420011000L) != 0L)
            return 53;
         return -1;
      case 9:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x4000L) != 0L)
            return 53;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 9;
            return 53;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 114);
      case 41:
         return jjStopAtPos(0, 116);
      case 42:
         return jjStopAtPos(0, 93);
      case 43:
         return jjStartNfaWithStates_0(0, 91, 164);
      case 44:
         return jjStopAtPos(0, 115);
      case 45:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 122);
      case 47:
         return jjStartNfaWithStates_0(0, 94, 78);
      case 58:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 60:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000800000L, 0x1L);
      case 61:
         return jjStopAtPos(0, 85);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000002000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x28000000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 123);
      case 93:
         return jjStopAtPos(0, 124);
      case 94:
         return jjStopAtPos(0, 95);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1400008280L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000040000000L, 0x20080L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x219004000L, 0x100L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1a58002000000800L, 0x5440L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8000400002000000L, 0x0L, 0x0L);
      case 105:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x2000000012400L, 0x102200L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x8000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000100L, 0x14L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000100800000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20004084001000L, 0x801L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4200000000000L, 0x10008L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000800000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0xc0000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 118);
      case 124:
         return jjStopAtPos(0, 119);
      case 125:
         return jjStopAtPos(0, 120);
      default :
         return jjMoveNfa_0(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 60:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 61:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      case 62:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x804c0800000000L, active1, 0x20034L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400010011004000L, active1, 0x800L, active2, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000080000000L, active1, 0xc0080L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000001000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2a50802400012000L, active1, 0x5040L, active2, 0L);
      case 111:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020260000100L, active1, 0x8000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x208000000000L, active1, 0x10000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x280L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000004000000L, active1, 0x2000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x104102000000L, active1, 0xaL, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000800L, active1, 0x400L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x84000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8004L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0xa50800000000100L, active1, 0x5040L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000808000L, active1, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1004000L, active1, 0L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 163);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x3020000000002000L, active1, 0xc0011L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000L, active1, 0x2L);
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x6a000000L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x80L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 163);
         return jjMoveStringLiteralDfa3_0(active0, 0xc00L, active1, 0L);
      case 113:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 163);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 53);
         break;
      case 114:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000010000000L, active1, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x88001800000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 53);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x20400L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000208014000L, active1, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000002000000L, active1, 0x20000L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 163);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 163);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 53);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 53);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 53);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x100820000000000L, active1, 0x400L);
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000831000000L, active1, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0xc0000L);
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 53);
         break;
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 53);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x9200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00L, active1, 0x280L);
      case 112:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x2004L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040404000000000L, active1, 0x1000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x20001044000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000001000L, active1, 0x2040L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000200L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 53);
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800004080000000L, active1, 0x81000L);
      case 102:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 53);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 53);
         break;
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x204000000L, active1, 0L);
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000100L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0x600L);
      case 111:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 53);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100021040010c00L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 53);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x22000000L, active1, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000004000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 53);
         break;
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 53);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 53);
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 53);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 53);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 53);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 53);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x4000L);
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000b010000L, active1, 0L);
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 53);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000L, active1, 0L);
      case 113:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 53);
         break;
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 53);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 53);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x200020000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 53);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 53);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 53);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000001000L, active1, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400010000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 53);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 53);
         break;
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 53);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 53);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4002000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x4000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 53);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000001000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 99:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 53);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x401000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 53);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 53);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 163);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 53);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 53);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 53);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 53);
         break;
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 53);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 53);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 78, 53);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 164;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 147:
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 161:
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAdd(163); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 164:
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     { jjCheckNAddTwoStates(43, 44); }
                  }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 78:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(84, 85); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     { jjCheckNAddStates(7, 15); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 42); }
                  else if (curChar == 47)
                     { jjAddStates(16, 17); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(21, 23); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 46)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if (curChar == 39)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 55:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 57:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 58:
                  if (curChar == 39 && kind > 110)
                     kind = 110;
                  break;
               case 59:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 60:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 61:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 62:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 63:
                  if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 64:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 66:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 67:
                  if (curChar == 34 && kind > 111)
                     kind = 111;
                  break;
               case 68:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 31); }
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 70:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 42); }
                  break;
               case 74:
                  if (curChar == 46)
                     { jjCheckNAdd(75); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(32, 34); }
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(42); }
                  break;
               case 77:
                  if (curChar == 47)
                     { jjAddStates(16, 17); }
                  break;
               case 79:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 80:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 81:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 82:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 84:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 85:
                  if (curChar == 42)
                     { jjCheckNAddStates(35, 37); }
                  break;
               case 86:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(87, 85); }
                  break;
               case 87:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(87, 85); }
                  break;
               case 88:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(7, 15); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAdd(154); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(155, 156); }
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(157, 158); }
                  break;
               case 158:
                  if (curChar == 46)
                     { jjCheckNAdd(159); }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(159); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 162;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 95)
                     { jjCheckNAdd(50); }
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 119;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 119:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 161:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     { jjCheckNAdd(163); }
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAdd(162); }
                  }
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 95)
                     { jjCheckNAdd(150); }
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 164:
               case 42:
                  if (curChar != 105)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 142;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 148:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 151;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  break;
               case 6:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 102)
                        kind = 102;
                     { jjCheckNAddTwoStates(161, 163); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 105)
                     { jjAddStates(38, 39); }
                  else if (curChar == 108)
                     { jjAddStates(40, 41); }
                  else if (curChar == 99)
                     { jjAddStates(42, 44); }
                  else if (curChar == 67)
                     { jjAddStates(45, 46); }
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 105)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjstateSet[jjnewStateCnt++] = 43;
                  }
                  break;
               case 0:
                  if (curChar == 67 && kind > 18)
                     kind = 18;
                  break;
               case 1:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 69 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101 && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 83 && kind > 20)
                     kind = 20;
                  break;
               case 22:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 115 && kind > 20)
                     kind = 20;
                  break;
               case 30:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 36:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 82 && kind > 22)
                     kind = 22;
                  break;
               case 38:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 47:
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(48); }
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(50); }
                  break;
               case 51:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 56:
                  if (curChar == 92)
                     { jjAddStates(47, 49); }
                  break;
               case 57:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 64:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 65:
                  if (curChar == 92)
                     { jjAddStates(50, 52); }
                  break;
               case 66:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 79:
                  { jjAddStates(4, 6); }
                  break;
               case 84:
                  { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 86:
               case 87:
                  { jjCheckNAddTwoStates(87, 85); }
                  break;
               case 89:
                  if (curChar == 67)
                     { jjAddStates(45, 46); }
                  break;
               case 90:
                  if (curChar == 67 && kind > 17)
                     kind = 17;
                  break;
               case 91:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 78 && kind > 21)
                     kind = 21;
                  break;
               case 97:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 99)
                     { jjAddStates(42, 44); }
                  break;
               case 106:
                  if (curChar == 99 && kind > 17)
                     kind = 17;
                  break;
               case 107:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 112:
                  if (curChar == 110 && kind > 21)
                     kind = 21;
                  break;
               case 113:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 95)
                     { jjCheckNAdd(122); }
                  break;
               case 122:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAdd(122); }
                  break;
               case 123:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 124:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 108)
                     { jjAddStates(40, 41); }
                  break;
               case 130:
                  if (curChar == 99 && kind > 18)
                     kind = 18;
                  break;
               case 131:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if (curChar == 95)
                     { jjCheckNAdd(137); }
                  break;
               case 137:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(137); }
                  break;
               case 138:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 105)
                     { jjAddStates(38, 39); }
                  break;
               case 149:
                  if (curChar == 95)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(150); }
                  break;
               case 151:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 156:
                  if (curChar == 110 && kind > 97)
                     kind = 97;
                  break;
               case 160:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAddTwoStates(161, 163); }
                  break;
               case 162:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(162); }
                  break;
               case 163:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  { jjCheckNAdd(163); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 55:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 23); }
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(18, 20); }
                  break;
               case 79:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(4, 6); }
                  break;
               case 84:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 86:
               case 87:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(87, 85); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 164 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ffe00000000000L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(53, 55); }
                  if (curChar == 47)
                     { jjAddStates(56, 57); }
                  break;
               case 2:
                  { jjCheckNAddStates(53, 55); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 6:
                  if (curChar == 58)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ffe00000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar == 47)
                     { jjAddStates(56, 57); }
                  break;
               case 9:
                  if (curChar == 47)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 10:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 11:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 12:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 13:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 42)
                     { jjCheckNAddStates(61, 63); }
                  break;
               case 17:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               case 19:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     { jjCheckNAdd(7); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
               case 3:
                  { jjCheckNAddStates(53, 55); }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x7fffffe97fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(7); }
                  break;
               case 10:
                  { jjAddStates(58, 60); }
                  break;
               case 15:
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
               case 18:
                  { jjCheckNAddTwoStates(18, 16); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(58, 60); }
                  break;
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(18, 16); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     { jjAddStates(64, 65); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 47)
                     { jjCheckNAddStates(66, 68); }
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(66, 68); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 42)
                     { jjCheckNAddStates(58, 60); }
                  break;
               case 11:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               case 13:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  { jjAddStates(66, 68); }
                  break;
               case 9:
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
               case 12:
                  { jjCheckNAddTwoStates(12, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(66, 68); }
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(12, 10); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\141\163\155", 
"\155\157\144\165\154\145", "\141\163\171\156\143\162", "\151\155\160\157\162\164", 
"\145\170\160\157\162\164", "\163\151\147\156\141\164\165\162\145", "\151\156\151\164", 
"\144\145\146\141\165\154\164", "\141\147\145\156\164", "\151\156\166\141\162\151\141\156\164", null, null, 
null, null, null, null, "\157\166\145\162", 
"\144\145\146\151\156\151\164\151\157\156\163", "\146\165\156\143\164\151\157\156", "\163\164\141\164\151\143", 
"\144\171\156\141\155\151\143", "\144\145\162\151\166\145\144", "\155\157\156\151\164\157\162\145\144", 
"\143\157\156\164\162\157\154\154\145\144", "\163\150\141\162\145\144", "\157\165\164", "\144\157\155\141\151\156", 
"\141\156\171\144\157\155\141\151\156", "\142\141\163\151\143", "\141\142\163\164\162\141\143\164", 
"\145\156\165\155", "\163\165\142\163\145\164\157\146", "\120\162\157\144", "\123\145\161", 
"\120\157\167\145\162\163\145\164", "\102\141\147", "\115\141\160", "\122\165\154\145", "\164\162\165\145", 
"\146\141\154\163\145", "\165\156\144\145\146", "\151", "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\145\156\144\151\146", "\163\167\151\164\143\150", 
"\145\156\144\163\167\151\164\143\150", "\143\141\163\145", "\157\164\150\145\162\167\151\163\145", 
"\145\156\144\143\141\163\145", "\154\145\164", "\145\156\144\154\145\164", "\145\170\151\163\164", 
"\165\156\151\161\165\145", "\167\151\164\150", "\146\157\162\141\154\154", "\163\153\151\160", 
"\162\165\154\145", "\155\141\143\162\157", "\164\165\162\142\157", "\155\141\151\156", 
"\160\141\162", "\145\156\144\160\141\162", "\143\150\157\157\163\145", "\144\157", 
"\151\146\156\157\156\145", "\145\170\164\145\156\144", "\163\145\161", "\145\156\144\163\145\161", 
"\151\164\145\162\141\164\145", "\145\156\144\151\164\145\162\141\164\145", "\154\157\143\141\154", 
"\164\162\171", "\143\141\164\143\150", "\167\150\151\154\145", 
"\167\150\151\154\145\162\145\143", "\151\156", "\75", "\74", "\74\75", "\76", "\76\75", "\41\75", "\53", "\55", 
"\52", "\57", "\136", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\50", "\54", "\51", "\72", "\173", 
"\174", "\175", "\55\76", "\56", "\133", "\135", "\74\74", "\76\76", "\72\75", 
"\74\55", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   73, 74, 76, 42, 79, 80, 82, 154, 155, 156, 157, 158, 73, 74, 76, 42, 
   78, 83, 64, 65, 67, 55, 56, 58, 55, 56, 60, 58, 64, 65, 69, 67, 
   75, 76, 42, 85, 86, 88, 148, 152, 135, 143, 111, 120, 128, 95, 104, 57, 
   59, 61, 66, 68, 70, 1, 3, 4, 9, 14, 10, 11, 13, 16, 17, 19, 
   3, 8, 4, 5, 7, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ASMParserTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ASMParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 164; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "GENERIC_ID",
   "MODULE_ID",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 2, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffcfffffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[164];
    private final int[] jjstateSet = new int[2 * 164];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
