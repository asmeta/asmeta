/*
 * generated by Xtext 2.11.0
 */
package org.asmeta.xt.validation

import org.asmeta.xt.validation.utility.ErrorType
import org.asmeta.xt.validation.utility.Utility
import org.asmeta.xt.validation.utility.WarningType
import org.asmeta.xt.validation.validators.DefinitionValidator
import org.asmeta.xt.validation.validators.RuleValidator
import org.asmeta.xt.validation.validators.StructureValidator
import org.asmeta.xt.validation.validators.TermValidator
import org.eclipse.xtext.validation.Check
import org.asmeta.xt.asmetal.*
import org.eclipse.emf.common.util.URI
import com.google.inject.Injector
import org.eclipse.emf.ecore.resource.Resource
import org.asmeta.xt.AsmetaLStandaloneSetup
import org.eclipse.emf.ecore.resource.ResourceSet

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */ 
 
 /** 
  * The class show the error/warning message for the validator
  */
class AsmetaLValidator extends AbstractAsmetaLValidator {

	@Check
	def validateAsm(Asm asm) {
		
		Utility.resetAllMap

		try {
			var error = StructureValidator.checkError(asm)
	
			// check error
			if ( error !== null ) error(error.msg, error.feature, error.code)
			else { // check warning
				var warning = StructureValidator.checkWarning(asm)
				if ( warning !== null ) launchWarning(warning)
			}
		}
		catch ( Exception e ) { 
			println("[validateAsm] Error in validation")
			e.printStackTrace
		}
	}	
	
	@Check
	def validateImportClause(ImportClause import_clause) {	
		try {
			var error = StructureValidator.checkError(import_clause)
			if ( error !== null ) error(error.msg, error.feature, error.code)	
			else { // check warning
				var warning = StructureValidator.checkWarning(import_clause)
				if ( warning !== null ) launchWarning(warning)
			}
		}
		catch ( Exception e ) { 
			println("[validateImportClause] Error in validation")
			e.printStackTrace
		}		
	}	
	
	@Check
	def validateExportClause(ExportClause export_clause) {	
		try {
			var error = StructureValidator.checkError(export_clause)
			if (error !== null  && error instanceof ErrorType)
				error(error.msg, error.feature, error.code)	
			if (error !== null  && error instanceof WarningType)
				warning(error.msg, error.feature, error.code)				
		}
		catch ( Exception e ) { 
			println("[validateExportClause] Error in validation")
			e.printStackTrace
		}		
	}	
	
	@Check
	def validateHeader(Header header) {	
		try {
			Utility.fillSignatureMap( header.signature, true )
			Utility.fillAllImportedMap( header, true )
		}
		catch ( Exception e ) { 
			println("[validateHeader] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateDomain(Domain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateFunction(Function domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateFunction] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateConcreteDomain(ConcreteDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateConcreteDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateBasicDomain(BasicTD domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateBasicDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateSequenceDomain(SequenceDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateSequenceDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validatePowersetDomain(PowersetDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validatePowersetDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateBagDomain(BagDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateBagDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateMapDomain(MapDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateMapDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
		
	@Check
	def validateRuleDomain(RuleDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateRuleDomain] Error in validation")
			e.printStackTrace
		}		
	}

	@Check
	def validateProductDomain(ProductDomain domain) {	
		try {
			var error = DefinitionValidator.checkError(domain)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateProductDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	
	@Check
	def validateEnumDomain(EnumElement element) {	
		try {
			var error = DefinitionValidator.checkError(element)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateEnumDomain] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateLocalFunction(LocalFunction function) {	

		try {
			var error = DefinitionValidator.checkError(function)
			if ( error !== null ) error(error.msg, error.feature, error.code)
			
			// Add the local declared functions
			Utility.fillVariableMap(function);		
		}
		catch ( Exception e ) { 
			println("[validateLocalFunction] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateBody(Body body) {	
		try {
			Utility.fillBodyMap( body )
		}
		catch ( Exception e ) { 
			println("[validateBody] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateDomainDefinition(DomainDefinition domain_definition) {	
		try {
			var error = StructureValidator.checkError(domain_definition)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateDomainDefinition] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateFunctionDefinition(FunctionDefinition function_definition) {	
		try {
			var error = StructureValidator.checkError(function_definition)
			if ( error !== null ) {
				error(error.msg, error.feature, error.code)
			} 		
		}
		catch ( Exception e ) { 
			println("[validateFunctionDefinition] Error in validation, function: " + function_definition.definedFunctionName)
			e.printStackTrace
		}		
	}

	@Check
	def validateRuleDeclaration(RuleDeclaration rule_declaration) {	
		try {
			var error = DefinitionValidator.checkError( rule_declaration )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateRuleDeclaration] Error in validation")
			e.printStackTrace
		}		 
	}
	
	@Check
	def validateInvariantElement(InvariantElement invariant_element) {	
		try {
			var error = DefinitionValidator.checkError( invariant_element )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateInvariantConstraint] Error in validation")
			e.printStackTrace
		}		 
	}
	
	@Check
	def validateInvariant(Invariant invar) {	
		try {
			var error = DefinitionValidator.checkError( invar )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateInvarConstraint] Error in validation")
			e.printStackTrace
		}		 
	}

	@Check
	def validateInvarConstraint(InvariantConstraint invar) {	
		try {
			var error = DefinitionValidator.checkError( invar )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateInvarConstraint] Error in validation")
			e.printStackTrace
		}		 
	}

	@Check
	def validateTemporalSpec(TemporalProperty spec) {	
		try {
			var error = DefinitionValidator.checkError( spec )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateTemporalSpec] Error in validation")
			e.printStackTrace
		}		 
	}
	
	@Check
	def validateFairnessConstraint(FairnessConstraint fair) {	
		try {
			var error = DefinitionValidator.checkError( fair )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateFairnessConstraint] Error in validation")
			e.printStackTrace
		}		 
	}

	
	@Check
	def validateInizialization( Initialization init ) {	
		try {
			var error = StructureValidator.checkError(init)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateInizialization] Error in validation")
			e.printStackTrace
		}		
	}	
		
	@Check
	def validateDomainInizialization(DomainInitialization domain_init) {	
		try {
			var error = StructureValidator.checkError(domain_init)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateDomainInizialization] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateFunctionInizialization(FunctionInitialization function_init) {	
		try {
			var error = StructureValidator.checkError(function_init)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateFunctionInizialization] Error in validation")
			e.printStackTrace
		}		
	}
		
	@Check
	def validateAgentInizialization(AgentInitialization agent_init) {	
		try {
			var error = StructureValidator.checkError(agent_init)
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateFunctionInizialization] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateLetTerm(LetTerm let_term) {	
		try {
			var error = TermValidator.checkError( let_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateLetTerm] Error in validation")
			e.printStackTrace
		}	

	}
	
	@Check
	def validateBinaryOperation(BinaryOperation operation) {	
		try {
			var error = TermValidator.checkError( operation )
			if ( error !== null ) error(error.msg, error.feature, error.code)	
		}
		catch ( Exception e ) { 
			println("[validateBinaryOperation] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateUnaryOperation(Expression operation) {	 
		try {
			var error = TermValidator.checkError( operation )
			if ( error !== null ) error(error.msg, error.feature, error.code)	
		}
		catch ( Exception e ) { 
			println("[validatUnaryOperation] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateFunctionTerm(FunctionTerm function) {	 
		try {
			var error = TermValidator.checkError( function )
			if ( error !== null ) error(error.msg, error.feature, error.code)	
		}
		catch ( Exception e ) { 
			println("[validateFunctionTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateFiniteQuantificationTerm(FiniteQuantificationTerm finite_term ) {	
		try {
			var error = TermValidator.checkError( finite_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateFiniteQuantificationTerm] Error in validation")
			e.printStackTrace
		}		
	}
		
	@Check
	def validateEnumTerm(EnumTerm enum_term ) {	
		try {
			var error = TermValidator.checkError( enum_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateEnumTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateConditionalTerm(ConditionalTerm cond_term ) {	
		try {
			var error = TermValidator.checkError( cond_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateConditionalTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateCaseTerm(CaseTerm case_term ) {	
		try {
			var error = TermValidator.checkError( case_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateConditionalTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateRuleAsTerm(RuleAsTerm ruleas_term ) {	
		try {
			var error = TermValidator.checkError( ruleas_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateRuleAsTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
		
	@Check
	def validateSetTerm(SetTerm set_term) {	
		try {
			var error = TermValidator.checkError( set_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateSetTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateBagTerm(BagTerm bag_term) {	
		try {
			var error = TermValidator.checkError( bag_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateBagTerm] Error in validation")
			e.printStackTrace
		}		
	} 
	 
	@Check
	def validateSequenceTerm(SequenceTerm sequence_term) {	
		try {
			var error = TermValidator.checkError( sequence_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateSequenceTerm] Error in validation")
			e.printStackTrace
		}		
	} 
	
	@Check
	def validateMapTerm(MapTerm map_term) {	
		try {
			var error = TermValidator.checkError( map_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateMapTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateSetCTTerm(SetCT setct_term ) {	

		try {
			var error = TermValidator.checkError( setct_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateSetCTTerm] Error in validation")
			e.printStackTrace
		}		
	}	
	
	@Check
	def validateBagCTTerm(BagCT bagct_term ) {	
				
		try {
			var error = TermValidator.checkError( bagct_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateBagCTTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateSequenceCTTerm(SequenceCT sequencect_term ) {	
		try {
			var error = TermValidator.checkError( sequencect_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateSequenceCTTerm] Error in validation")
			e.printStackTrace
		}		
	}
	
	@Check
	def validateMapCTTerm(MapCT mapct_term ) {	
		try {
			var error = TermValidator.checkError( mapct_term )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateMapCTTerm] Error in validation")
			e.printStackTrace
		}		 
	}
	
	@Check
	def validateUpdateRule(UpdateRule update_rule) {	
		try {
			var error = RuleValidator.checkError( update_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateUpdateRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateConditionalRule(ConditionalRule conditional_rule) {	
		try {
			var error = RuleValidator.checkError( conditional_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateConditionalRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateLetRule(LetRule let_rule) {	
		try {
			var error = RuleValidator.checkError( let_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateLetRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateChooseRule(ChooseRule choose_rule) {	
		try {
			var error = RuleValidator.checkError( choose_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateChooseRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateForallRule(ForallRule forall_rule ) {	
		try {
			var error = RuleValidator.checkError( forall_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateForallRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateExtendRule(ExtendRule extend_rule) {	
		try {
			var error = RuleValidator.checkError( extend_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateExtendRule] Error in validation")
			e.printStackTrace
		}	
	}
	
		
	@Check
	def validateCaseRule(CaseRule case_rule) {	
		try {
			var error = RuleValidator.checkError( case_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateCaseRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateTurboDerivedRule(TurboDerivedRule while_rule) {	
		try {
			var error = RuleValidator.checkError( while_rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateTurboDerivedRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	@Check
	def validateTermAsRule(TermAsRule term_as_Rule) {	
		try {
			var error = RuleValidator.checkError( term_as_Rule )
			if ( error !== null ) error(error.msg, error.feature, error.code)		
		}
		catch ( Exception e ) { 
			println("[validateTermAsRule] Error in validation")
			e.printStackTrace
		}	
	}
	
	def void launchError( ErrorType error ) {
		if ( error.obj === null ) error(error.msg, error.feature, error.code)
		else error(error.msg, error.obj, error.feature, error.code)
	}

	def void launchWarning( WarningType warning ) {
		warning(warning.getMsg(), warning.feature, warning.position, warning.code)
	}
	
}
