/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import java.util.Collection;

import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.Domain;
import org.asmeta.xt.asmetal.Rule;
import org.asmeta.xt.asmetal.RuleDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.RuleDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.RuleDeclarationImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.RuleDeclarationImpl#getDomain <em>Domain</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.RuleDeclarationImpl#getReturnedDomain <em>Returned Domain</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.RuleDeclarationImpl#getRuleBody <em>Rule Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleDeclarationImpl extends MinimalEObjectImpl.Container implements RuleDeclaration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<String> variables;

  /**
   * The cached value of the '{@link #getDomain() <em>Domain</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomain()
   * @generated
   * @ordered
   */
  protected EList<Domain> domain;

  /**
   * The cached value of the '{@link #getReturnedDomain() <em>Returned Domain</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReturnedDomain()
   * @generated
   * @ordered
   */
  protected Domain returnedDomain;

  /**
   * The cached value of the '{@link #getRuleBody() <em>Rule Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuleBody()
   * @generated
   * @ordered
   */
  protected Rule ruleBody;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.RULE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.RULE_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getVariables()
  {
    if (variables == null)
    {
      variables = new EDataTypeEList<String>(String.class, this, AsmetalPackage.RULE_DECLARATION__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Domain> getDomain()
  {
    if (domain == null)
    {
      domain = new EObjectContainmentEList<Domain>(Domain.class, this, AsmetalPackage.RULE_DECLARATION__DOMAIN);
    }
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain getReturnedDomain()
  {
    return returnedDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReturnedDomain(Domain newReturnedDomain, NotificationChain msgs)
  {
    Domain oldReturnedDomain = returnedDomain;
    returnedDomain = newReturnedDomain;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN, oldReturnedDomain, newReturnedDomain);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReturnedDomain(Domain newReturnedDomain)
  {
    if (newReturnedDomain != returnedDomain)
    {
      NotificationChain msgs = null;
      if (returnedDomain != null)
        msgs = ((InternalEObject)returnedDomain).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN, null, msgs);
      if (newReturnedDomain != null)
        msgs = ((InternalEObject)newReturnedDomain).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN, null, msgs);
      msgs = basicSetReturnedDomain(newReturnedDomain, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN, newReturnedDomain, newReturnedDomain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getRuleBody()
  {
    return ruleBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRuleBody(Rule newRuleBody, NotificationChain msgs)
  {
    Rule oldRuleBody = ruleBody;
    ruleBody = newRuleBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.RULE_DECLARATION__RULE_BODY, oldRuleBody, newRuleBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRuleBody(Rule newRuleBody)
  {
    if (newRuleBody != ruleBody)
    {
      NotificationChain msgs = null;
      if (ruleBody != null)
        msgs = ((InternalEObject)ruleBody).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.RULE_DECLARATION__RULE_BODY, null, msgs);
      if (newRuleBody != null)
        msgs = ((InternalEObject)newRuleBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.RULE_DECLARATION__RULE_BODY, null, msgs);
      msgs = basicSetRuleBody(newRuleBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.RULE_DECLARATION__RULE_BODY, newRuleBody, newRuleBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.RULE_DECLARATION__DOMAIN:
        return ((InternalEList<?>)getDomain()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN:
        return basicSetReturnedDomain(null, msgs);
      case AsmetalPackage.RULE_DECLARATION__RULE_BODY:
        return basicSetRuleBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.RULE_DECLARATION__NAME:
        return getName();
      case AsmetalPackage.RULE_DECLARATION__VARIABLES:
        return getVariables();
      case AsmetalPackage.RULE_DECLARATION__DOMAIN:
        return getDomain();
      case AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN:
        return getReturnedDomain();
      case AsmetalPackage.RULE_DECLARATION__RULE_BODY:
        return getRuleBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.RULE_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case AsmetalPackage.RULE_DECLARATION__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends String>)newValue);
        return;
      case AsmetalPackage.RULE_DECLARATION__DOMAIN:
        getDomain().clear();
        getDomain().addAll((Collection<? extends Domain>)newValue);
        return;
      case AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN:
        setReturnedDomain((Domain)newValue);
        return;
      case AsmetalPackage.RULE_DECLARATION__RULE_BODY:
        setRuleBody((Rule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.RULE_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsmetalPackage.RULE_DECLARATION__VARIABLES:
        getVariables().clear();
        return;
      case AsmetalPackage.RULE_DECLARATION__DOMAIN:
        getDomain().clear();
        return;
      case AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN:
        setReturnedDomain((Domain)null);
        return;
      case AsmetalPackage.RULE_DECLARATION__RULE_BODY:
        setRuleBody((Rule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.RULE_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsmetalPackage.RULE_DECLARATION__VARIABLES:
        return variables != null && !variables.isEmpty();
      case AsmetalPackage.RULE_DECLARATION__DOMAIN:
        return domain != null && !domain.isEmpty();
      case AsmetalPackage.RULE_DECLARATION__RETURNED_DOMAIN:
        return returnedDomain != null;
      case AsmetalPackage.RULE_DECLARATION__RULE_BODY:
        return ruleBody != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", variables: ");
    result.append(variables);
    result.append(')');
    return result.toString();
  }

  public org.asmeta.xt.asmetal.Body getAsmBody()
  {
  	// Return the container of the Rule Declaration, i.e. the Body
  	return (org.asmeta.xt.asmetal.Body) this.eContainer;
  }
  
  public org.eclipse.emf.common.util.EList<org.asmeta.xt.asmetal.VariableTerm> getVariable()
  {
  	org.eclipse.emf.common.util.EList<org.asmeta.xt.asmetal.VariableTerm> variableList = new org.eclipse.emf.common.util.BasicEList<org.asmeta.xt.asmetal.VariableTerm>();
	  
	for (String s : this.getVariables()) {
		org.asmeta.xt.asmetal.VariableTerm vt = org.asmeta.xt.asmetal.AsmetalFactory.eINSTANCE.createVariableTerm();
		vt.setDomain(org.asmeta.xt.validation.utility.Utility.getDomainFromVariable(s));
		vt.setName(s);
		variableList.add(vt);
	}

  	return variableList;
  }
} //RuleDeclarationImpl
