/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import java.util.Collection;

import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.CaseTerm;
import org.asmeta.xt.asmetal.Term;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Case Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseTermImpl#getComparedTerm <em>Compared Term</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseTermImpl#getComparingTerm <em>Comparing Term</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseTermImpl#getResultTerms <em>Result Terms</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseTermImpl#getOtherwiseTerm <em>Otherwise Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CaseTermImpl extends ExtendedTermImpl implements CaseTerm
{
  /**
   * The cached value of the '{@link #getComparedTerm() <em>Compared Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparedTerm()
   * @generated
   * @ordered
   */
  protected Term comparedTerm;

  /**
   * The cached value of the '{@link #getComparingTerm() <em>Comparing Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparingTerm()
   * @generated
   * @ordered
   */
  protected EList<Term> comparingTerm;

  /**
   * The cached value of the '{@link #getResultTerms() <em>Result Terms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResultTerms()
   * @generated
   * @ordered
   */
  protected EList<Term> resultTerms;

  /**
   * The cached value of the '{@link #getOtherwiseTerm() <em>Otherwise Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherwiseTerm()
   * @generated
   * @ordered
   */
  protected Term otherwiseTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaseTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.CASE_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getComparedTerm()
  {
    return comparedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComparedTerm(Term newComparedTerm, NotificationChain msgs)
  {
    Term oldComparedTerm = comparedTerm;
    comparedTerm = newComparedTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_TERM__COMPARED_TERM, oldComparedTerm, newComparedTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparedTerm(Term newComparedTerm)
  {
    if (newComparedTerm != comparedTerm)
    {
      NotificationChain msgs = null;
      if (comparedTerm != null)
        msgs = ((InternalEObject)comparedTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_TERM__COMPARED_TERM, null, msgs);
      if (newComparedTerm != null)
        msgs = ((InternalEObject)newComparedTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_TERM__COMPARED_TERM, null, msgs);
      msgs = basicSetComparedTerm(newComparedTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_TERM__COMPARED_TERM, newComparedTerm, newComparedTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getComparingTerm()
  {
    if (comparingTerm == null)
    {
      comparingTerm = new EObjectContainmentEList<Term>(Term.class, this, AsmetalPackage.CASE_TERM__COMPARING_TERM);
    }
    return comparingTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getResultTerms()
  {
    if (resultTerms == null)
    {
      resultTerms = new EObjectContainmentEList<Term>(Term.class, this, AsmetalPackage.CASE_TERM__RESULT_TERMS);
    }
    return resultTerms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getOtherwiseTerm()
  {
    return otherwiseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOtherwiseTerm(Term newOtherwiseTerm, NotificationChain msgs)
  {
    Term oldOtherwiseTerm = otherwiseTerm;
    otherwiseTerm = newOtherwiseTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_TERM__OTHERWISE_TERM, oldOtherwiseTerm, newOtherwiseTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOtherwiseTerm(Term newOtherwiseTerm)
  {
    if (newOtherwiseTerm != otherwiseTerm)
    {
      NotificationChain msgs = null;
      if (otherwiseTerm != null)
        msgs = ((InternalEObject)otherwiseTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_TERM__OTHERWISE_TERM, null, msgs);
      if (newOtherwiseTerm != null)
        msgs = ((InternalEObject)newOtherwiseTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_TERM__OTHERWISE_TERM, null, msgs);
      msgs = basicSetOtherwiseTerm(newOtherwiseTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_TERM__OTHERWISE_TERM, newOtherwiseTerm, newOtherwiseTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_TERM__COMPARED_TERM:
        return basicSetComparedTerm(null, msgs);
      case AsmetalPackage.CASE_TERM__COMPARING_TERM:
        return ((InternalEList<?>)getComparingTerm()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.CASE_TERM__RESULT_TERMS:
        return ((InternalEList<?>)getResultTerms()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.CASE_TERM__OTHERWISE_TERM:
        return basicSetOtherwiseTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_TERM__COMPARED_TERM:
        return getComparedTerm();
      case AsmetalPackage.CASE_TERM__COMPARING_TERM:
        return getComparingTerm();
      case AsmetalPackage.CASE_TERM__RESULT_TERMS:
        return getResultTerms();
      case AsmetalPackage.CASE_TERM__OTHERWISE_TERM:
        return getOtherwiseTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_TERM__COMPARED_TERM:
        setComparedTerm((Term)newValue);
        return;
      case AsmetalPackage.CASE_TERM__COMPARING_TERM:
        getComparingTerm().clear();
        getComparingTerm().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetalPackage.CASE_TERM__RESULT_TERMS:
        getResultTerms().clear();
        getResultTerms().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetalPackage.CASE_TERM__OTHERWISE_TERM:
        setOtherwiseTerm((Term)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_TERM__COMPARED_TERM:
        setComparedTerm((Term)null);
        return;
      case AsmetalPackage.CASE_TERM__COMPARING_TERM:
        getComparingTerm().clear();
        return;
      case AsmetalPackage.CASE_TERM__RESULT_TERMS:
        getResultTerms().clear();
        return;
      case AsmetalPackage.CASE_TERM__OTHERWISE_TERM:
        setOtherwiseTerm((Term)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_TERM__COMPARED_TERM:
        return comparedTerm != null;
      case AsmetalPackage.CASE_TERM__COMPARING_TERM:
        return comparingTerm != null && !comparingTerm.isEmpty();
      case AsmetalPackage.CASE_TERM__RESULT_TERMS:
        return resultTerms != null && !resultTerms.isEmpty();
      case AsmetalPackage.CASE_TERM__OTHERWISE_TERM:
        return otherwiseTerm != null;
    }
    return super.eIsSet(featureID);
  }

} //CaseTermImpl
