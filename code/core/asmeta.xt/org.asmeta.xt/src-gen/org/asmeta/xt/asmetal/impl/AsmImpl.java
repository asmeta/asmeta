/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import java.util.Collection;

import org.asmeta.xt.asmetal.Asm;
import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.Body;
import org.asmeta.xt.asmetal.Header;
import org.asmeta.xt.asmetal.Initialization;
import org.asmeta.xt.asmetal.MacroDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Asm</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#isIsAsynchr <em>Is Asynchr</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getHeaderSection <em>Header Section</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getBodySection <em>Body Section</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getMainrule <em>Mainrule</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getInitialState <em>Initial State</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.AsmImpl#getDefaultInitialState <em>Default Initial State</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AsmImpl extends MinimalEObjectImpl.Container implements Asm
{
  /**
   * The default value of the '{@link #isIsAsynchr() <em>Is Asynchr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsAsynchr()
   * @generated
   * @ordered
   */
  protected static final boolean IS_ASYNCHR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsAsynchr() <em>Is Asynchr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsAsynchr()
   * @generated
   * @ordered
   */
  protected boolean isAsynchr = IS_ASYNCHR_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getHeaderSection() <em>Header Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeaderSection()
   * @generated
   * @ordered
   */
  protected Header headerSection;

  /**
   * The cached value of the '{@link #getBodySection() <em>Body Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodySection()
   * @generated
   * @ordered
   */
  protected Body bodySection;

  /**
   * The cached value of the '{@link #getMainrule() <em>Mainrule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainrule()
   * @generated
   * @ordered
   */
  protected MacroDeclaration mainrule;

  /**
   * The cached value of the '{@link #getInitialState() <em>Initial State</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialState()
   * @generated
   * @ordered
   */
  protected EList<Initialization> initialState;

  /**
   * The cached value of the '{@link #getDefaultInitialState() <em>Default Initial State</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultInitialState()
   * @generated
   * @ordered
   */
  protected Initialization defaultInitialState;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AsmImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.ASM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsAsynchr()
  {
    return isAsynchr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsAsynchr(boolean newIsAsynchr)
  {
    boolean oldIsAsynchr = isAsynchr;
    isAsynchr = newIsAsynchr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__IS_ASYNCHR, oldIsAsynchr, isAsynchr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Header getHeaderSection()
  {
    return headerSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHeaderSection(Header newHeaderSection, NotificationChain msgs)
  {
    Header oldHeaderSection = headerSection;
    headerSection = newHeaderSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__HEADER_SECTION, oldHeaderSection, newHeaderSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHeaderSection(Header newHeaderSection)
  {
    if (newHeaderSection != headerSection)
    {
      NotificationChain msgs = null;
      if (headerSection != null)
        msgs = ((InternalEObject)headerSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__HEADER_SECTION, null, msgs);
      if (newHeaderSection != null)
        msgs = ((InternalEObject)newHeaderSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__HEADER_SECTION, null, msgs);
      msgs = basicSetHeaderSection(newHeaderSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__HEADER_SECTION, newHeaderSection, newHeaderSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body getBodySection()
  {
    return bodySection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBodySection(Body newBodySection, NotificationChain msgs)
  {
    Body oldBodySection = bodySection;
    bodySection = newBodySection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__BODY_SECTION, oldBodySection, newBodySection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBodySection(Body newBodySection)
  {
    if (newBodySection != bodySection)
    {
      NotificationChain msgs = null;
      if (bodySection != null)
        msgs = ((InternalEObject)bodySection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__BODY_SECTION, null, msgs);
      if (newBodySection != null)
        msgs = ((InternalEObject)newBodySection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__BODY_SECTION, null, msgs);
      msgs = basicSetBodySection(newBodySection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__BODY_SECTION, newBodySection, newBodySection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MacroDeclaration getMainrule()
  {
    return mainrule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainrule(MacroDeclaration newMainrule, NotificationChain msgs)
  {
    MacroDeclaration oldMainrule = mainrule;
    mainrule = newMainrule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__MAINRULE, oldMainrule, newMainrule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainrule(MacroDeclaration newMainrule)
  {
    if (newMainrule != mainrule)
    {
      NotificationChain msgs = null;
      if (mainrule != null)
        msgs = ((InternalEObject)mainrule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__MAINRULE, null, msgs);
      if (newMainrule != null)
        msgs = ((InternalEObject)newMainrule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__MAINRULE, null, msgs);
      msgs = basicSetMainrule(newMainrule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__MAINRULE, newMainrule, newMainrule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Initialization> getInitialState()
  {
    if (initialState == null)
    {
      initialState = new EObjectContainmentEList<Initialization>(Initialization.class, this, AsmetalPackage.ASM__INITIAL_STATE);
    }
    return initialState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialization getDefaultInitialState()
  {
    return defaultInitialState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultInitialState(Initialization newDefaultInitialState, NotificationChain msgs)
  {
    Initialization oldDefaultInitialState = defaultInitialState;
    defaultInitialState = newDefaultInitialState;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__DEFAULT_INITIAL_STATE, oldDefaultInitialState, newDefaultInitialState);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultInitialState(Initialization newDefaultInitialState)
  {
    if (newDefaultInitialState != defaultInitialState)
    {
      NotificationChain msgs = null;
      if (defaultInitialState != null)
        msgs = ((InternalEObject)defaultInitialState).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__DEFAULT_INITIAL_STATE, null, msgs);
      if (newDefaultInitialState != null)
        msgs = ((InternalEObject)newDefaultInitialState).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.ASM__DEFAULT_INITIAL_STATE, null, msgs);
      msgs = basicSetDefaultInitialState(newDefaultInitialState, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.ASM__DEFAULT_INITIAL_STATE, newDefaultInitialState, newDefaultInitialState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.ASM__HEADER_SECTION:
        return basicSetHeaderSection(null, msgs);
      case AsmetalPackage.ASM__BODY_SECTION:
        return basicSetBodySection(null, msgs);
      case AsmetalPackage.ASM__MAINRULE:
        return basicSetMainrule(null, msgs);
      case AsmetalPackage.ASM__INITIAL_STATE:
        return ((InternalEList<?>)getInitialState()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.ASM__DEFAULT_INITIAL_STATE:
        return basicSetDefaultInitialState(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.ASM__IS_ASYNCHR:
        return isIsAsynchr();
      case AsmetalPackage.ASM__TYPE:
        return getType();
      case AsmetalPackage.ASM__NAME:
        return getName();
      case AsmetalPackage.ASM__HEADER_SECTION:
        return getHeaderSection();
      case AsmetalPackage.ASM__BODY_SECTION:
        return getBodySection();
      case AsmetalPackage.ASM__MAINRULE:
        return getMainrule();
      case AsmetalPackage.ASM__INITIAL_STATE:
        return getInitialState();
      case AsmetalPackage.ASM__DEFAULT_INITIAL_STATE:
        return getDefaultInitialState();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.ASM__IS_ASYNCHR:
        setIsAsynchr((Boolean)newValue);
        return;
      case AsmetalPackage.ASM__TYPE:
        setType((String)newValue);
        return;
      case AsmetalPackage.ASM__NAME:
        setName((String)newValue);
        return;
      case AsmetalPackage.ASM__HEADER_SECTION:
        setHeaderSection((Header)newValue);
        return;
      case AsmetalPackage.ASM__BODY_SECTION:
        setBodySection((Body)newValue);
        return;
      case AsmetalPackage.ASM__MAINRULE:
        setMainrule((MacroDeclaration)newValue);
        return;
      case AsmetalPackage.ASM__INITIAL_STATE:
        getInitialState().clear();
        getInitialState().addAll((Collection<? extends Initialization>)newValue);
        return;
      case AsmetalPackage.ASM__DEFAULT_INITIAL_STATE:
        setDefaultInitialState((Initialization)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.ASM__IS_ASYNCHR:
        setIsAsynchr(IS_ASYNCHR_EDEFAULT);
        return;
      case AsmetalPackage.ASM__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case AsmetalPackage.ASM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AsmetalPackage.ASM__HEADER_SECTION:
        setHeaderSection((Header)null);
        return;
      case AsmetalPackage.ASM__BODY_SECTION:
        setBodySection((Body)null);
        return;
      case AsmetalPackage.ASM__MAINRULE:
        setMainrule((MacroDeclaration)null);
        return;
      case AsmetalPackage.ASM__INITIAL_STATE:
        getInitialState().clear();
        return;
      case AsmetalPackage.ASM__DEFAULT_INITIAL_STATE:
        setDefaultInitialState((Initialization)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.ASM__IS_ASYNCHR:
        return isAsynchr != IS_ASYNCHR_EDEFAULT;
      case AsmetalPackage.ASM__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case AsmetalPackage.ASM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AsmetalPackage.ASM__HEADER_SECTION:
        return headerSection != null;
      case AsmetalPackage.ASM__BODY_SECTION:
        return bodySection != null;
      case AsmetalPackage.ASM__MAINRULE:
        return mainrule != null;
      case AsmetalPackage.ASM__INITIAL_STATE:
        return initialState != null && !initialState.isEmpty();
      case AsmetalPackage.ASM__DEFAULT_INITIAL_STATE:
        return defaultInitialState != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isAsynchr: ");
    result.append(isAsynchr);
    result.append(", type: ");
    result.append(type);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AsmImpl
