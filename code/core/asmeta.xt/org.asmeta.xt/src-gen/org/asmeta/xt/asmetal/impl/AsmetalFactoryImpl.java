/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import org.asmeta.xt.asmetal.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsmetalFactoryImpl extends EFactoryImpl implements AsmetalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AsmetalFactory init()
  {
    try
    {
      AsmetalFactory theAsmetalFactory = (AsmetalFactory)EPackage.Registry.INSTANCE.getEFactory(AsmetalPackage.eNS_URI);
      if (theAsmetalFactory != null)
      {
        return theAsmetalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AsmetalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsmetalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AsmetalPackage.ASM: return createAsm();
      case AsmetalPackage.HEADER: return createHeader();
      case AsmetalPackage.IMPORT_CLAUSE: return createImportClause();
      case AsmetalPackage.IMPORT_DATA: return createimportData();
      case AsmetalPackage.EXPORT_CLAUSE: return createExportClause();
      case AsmetalPackage.SIGNATURE: return createSignature();
      case AsmetalPackage.INITIALIZATION: return createInitialization();
      case AsmetalPackage.DOMAIN_INITIALIZATION: return createDomainInitialization();
      case AsmetalPackage.FUNCTION_INITIALIZATION: return createFunctionInitialization();
      case AsmetalPackage.AGENT_INITIALIZATION: return createAgentInitialization();
      case AsmetalPackage.BODY: return createBody();
      case AsmetalPackage.DOMAIN_DEFINITION: return createDomainDefinition();
      case AsmetalPackage.FUNCTION_DEFINITION: return createFunctionDefinition();
      case AsmetalPackage.RULE_DECLARATION: return createRuleDeclaration();
      case AsmetalPackage.MACRO_DECLARATION: return createMacroDeclaration();
      case AsmetalPackage.TURBO_DECLARATION: return createTurboDeclaration();
      case AsmetalPackage.PROPERTY: return createProperty();
      case AsmetalPackage.TEMPORAL_PROPERTY: return createTemporalProperty();
      case AsmetalPackage.INVARIANT: return createInvariant();
      case AsmetalPackage.INVARIANT_ELEMENT: return createInvariantElement();
      case AsmetalPackage.CTL_SPEC: return createCtlSpec();
      case AsmetalPackage.LTL_SPEC: return createLtlSpec();
      case AsmetalPackage.FAIRNESS_CONSTRAINT: return createFairnessConstraint();
      case AsmetalPackage.JUSTICE_CONSTRAINT: return createJusticeConstraint();
      case AsmetalPackage.COMPASSION_CONSTRAINT: return createCompassionConstraint();
      case AsmetalPackage.INVARIANT_CONSTRAINT: return createInvariantConstraint();
      case AsmetalPackage.DOMAIN: return createDomain();
      case AsmetalPackage.CONCRETE_DOMAIN: return createConcreteDomain();
      case AsmetalPackage.TYPE_DOMAIN: return createTypeDomain();
      case AsmetalPackage.ANY_DOMAIN: return createAnyDomain();
      case AsmetalPackage.BASIC_TD: return createBasicTD();
      case AsmetalPackage.STANDARD_DOMAIN: return createStandardDomain();
      case AsmetalPackage.INTEGER_DOMAIN: return createIntegerDomain();
      case AsmetalPackage.REAL_DOMAIN: return createRealDomain();
      case AsmetalPackage.STRING_DOMAIN: return createStringDomain();
      case AsmetalPackage.NATURAL_DOMAIN: return createNaturalDomain();
      case AsmetalPackage.CHAR_DOMAIN: return createCharDomain();
      case AsmetalPackage.COMPLEX_DOMAIN: return createComplexDomain();
      case AsmetalPackage.BOOLEAN_DOMAIN: return createBooleanDomain();
      case AsmetalPackage.UNDEF_DOMAIN: return createUndefDomain();
      case AsmetalPackage.ABSTRACT_TD: return createAbstractTD();
      case AsmetalPackage.AGENT_DOMAIN: return createAgentDomain();
      case AsmetalPackage.RESERVE_DOMAIN: return createReserveDomain();
      case AsmetalPackage.ENUM_TD: return createEnumTD();
      case AsmetalPackage.ENUM_ELEMENT: return createEnumElement();
      case AsmetalPackage.STRUCTURED_TD: return createStructuredTD();
      case AsmetalPackage.RULE_DOMAIN: return createRuleDomain();
      case AsmetalPackage.PRODUCT_DOMAIN: return createProductDomain();
      case AsmetalPackage.SEQUENCE_DOMAIN: return createSequenceDomain();
      case AsmetalPackage.POWERSET_DOMAIN: return createPowersetDomain();
      case AsmetalPackage.BAG_DOMAIN: return createBagDomain();
      case AsmetalPackage.MAP_DOMAIN: return createMapDomain();
      case AsmetalPackage.FUNCTION: return createFunction();
      case AsmetalPackage.BASIC_FUNCTION: return createBasicFunction();
      case AsmetalPackage.DERIVED_FUNCTION: return createDerivedFunction();
      case AsmetalPackage.STATIC_FUNCTION: return createStaticFunction();
      case AsmetalPackage.DYNAMIC_FUNCTION: return createDynamicFunction();
      case AsmetalPackage.LOCAL_FUNCTION: return createLocalFunction();
      case AsmetalPackage.CONTROLLED_FUNCTION: return createControlledFunction();
      case AsmetalPackage.SHARED_FUNCTION: return createSharedFunction();
      case AsmetalPackage.MONITORED_FUNCTION: return createMonitoredFunction();
      case AsmetalPackage.OUT_FUNCTION: return createOutFunction();
      case AsmetalPackage.TERM: return createTerm();
      case AsmetalPackage.DOMAIN_TERM: return createDomainTerm();
      case AsmetalPackage.EXPRESSION: return createExpression();
      case AsmetalPackage.BASIC_EXPR: return createbasicExpr();
      case AsmetalPackage.BASIC_TERM: return createBasicTerm();
      case AsmetalPackage.FUNCTION_TERM: return createFunctionTerm();
      case AsmetalPackage.LOCATION_TERM: return createLocationTerm();
      case AsmetalPackage.VARIABLE_TERM: return createVariableTerm();
      case AsmetalPackage.CONSTANT_TERM: return createConstantTerm();
      case AsmetalPackage.NUMBER_TERM: return createNumberTerm();
      case AsmetalPackage.BOOLEAN_TERM: return createBooleanTerm();
      case AsmetalPackage.UNDEF_TERM: return createUndefTerm();
      case AsmetalPackage.COMPLEX_TERM: return createComplexTerm();
      case AsmetalPackage.NATURAL_TERM: return createNaturalTerm();
      case AsmetalPackage.CHAR_TERM: return createCharTerm();
      case AsmetalPackage.STRING_TERM: return createStringTerm();
      case AsmetalPackage.ENUM_TERM: return createEnumTerm();
      case AsmetalPackage.REAL_TERM: return createRealTerm();
      case AsmetalPackage.INTEGER_TERM: return createIntegerTerm();
      case AsmetalPackage.EXTENDED_TERM: return createExtendedTerm();
      case AsmetalPackage.CONDITIONAL_TERM: return createConditionalTerm();
      case AsmetalPackage.CASE_TERM: return createCaseTerm();
      case AsmetalPackage.TUPLE_TERM: return createTupleTerm();
      case AsmetalPackage.COLLECTION_TERM: return createCollectionTerm();
      case AsmetalPackage.SEQUENCE_TERM: return createSequenceTerm();
      case AsmetalPackage.MAP_TERM: return createMapTerm();
      case AsmetalPackage.SET_TERM: return createSetTerm();
      case AsmetalPackage.BAG_TERM: return createBagTerm();
      case AsmetalPackage.VARIABLE_BINDING_TERM: return createVariableBindingTerm();
      case AsmetalPackage.FINITE_QUANTIFICATION_TERM: return createFiniteQuantificationTerm();
      case AsmetalPackage.EXIST_UNIQUE_TERM: return createExistUniqueTerm();
      case AsmetalPackage.EXIST_TERM: return createExistTerm();
      case AsmetalPackage.FORALL_TERM: return createForallTerm();
      case AsmetalPackage.LET_TERM: return createLetTerm();
      case AsmetalPackage.COMPREHENSION_TERM: return createComprehensionTerm();
      case AsmetalPackage.SET_CT: return createSetCT();
      case AsmetalPackage.MAP_CT: return createMapCT();
      case AsmetalPackage.SEQUENCE_CT: return createSequenceCT();
      case AsmetalPackage.BAG_CT: return createBagCT();
      case AsmetalPackage.RULE_AS_TERM: return createRuleAsTerm();
      case AsmetalPackage.RULE: return createRule();
      case AsmetalPackage.TERM_AS_RULE: return createTermAsRule();
      case AsmetalPackage.BASIC_RULE: return createBasicRule();
      case AsmetalPackage.SKIP_RULE: return createSkipRule();
      case AsmetalPackage.UPDATE_RULE: return createUpdateRule();
      case AsmetalPackage.BLOCK_RULE: return createBlockRule();
      case AsmetalPackage.CONDITIONAL_RULE: return createConditionalRule();
      case AsmetalPackage.CHOOSE_RULE: return createChooseRule();
      case AsmetalPackage.FORALL_RULE: return createForallRule();
      case AsmetalPackage.LET_RULE: return createLetRule();
      case AsmetalPackage.MACRO_CALL_RULE: return createMacroCallRule();
      case AsmetalPackage.EXTEND_RULE: return createExtendRule();
      case AsmetalPackage.TURBO_RULE: return createTurboRule();
      case AsmetalPackage.SEQ_RULE: return createSeqRule();
      case AsmetalPackage.ITERATE_RULE: return createIterateRule();
      case AsmetalPackage.TURBO_CALL_RULE: return createTurboCallRule();
      case AsmetalPackage.TURBO_RETURN_RULE: return createTurboReturnRule();
      case AsmetalPackage.TURBO_LOCAL_STATE_RULE: return createTurboLocalStateRule();
      case AsmetalPackage.DERIVED_RULE: return createDerivedRule();
      case AsmetalPackage.BASIC_DERIVED_RULE: return createBasicDerivedRule();
      case AsmetalPackage.CASE_RULE: return createCaseRule();
      case AsmetalPackage.TURBO_DERIVED_RULE: return createTurboDerivedRule();
      case AsmetalPackage.RECURSIVE_WHILE_RULE: return createRecursiveWhileRule();
      case AsmetalPackage.ITERATIVE_WHILE_RULE: return createIterativeWhileRule();
      case AsmetalPackage.BINARY_OPERATION: return createBinaryOperation();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Asm createAsm()
  {
    AsmImpl asm = new AsmImpl();
    return asm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Header createHeader()
  {
    HeaderImpl header = new HeaderImpl();
    return header;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportClause createImportClause()
  {
    ImportClauseImpl importClause = new ImportClauseImpl();
    return importClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public importData createimportData()
  {
    importDataImpl importData = new importDataImpl();
    return importData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportClause createExportClause()
  {
    ExportClauseImpl exportClause = new ExportClauseImpl();
    return exportClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signature createSignature()
  {
    SignatureImpl signature = new SignatureImpl();
    return signature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialization createInitialization()
  {
    InitializationImpl initialization = new InitializationImpl();
    return initialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainInitialization createDomainInitialization()
  {
    DomainInitializationImpl domainInitialization = new DomainInitializationImpl();
    return domainInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionInitialization createFunctionInitialization()
  {
    FunctionInitializationImpl functionInitialization = new FunctionInitializationImpl();
    return functionInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgentInitialization createAgentInitialization()
  {
    AgentInitializationImpl agentInitialization = new AgentInitializationImpl();
    return agentInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainDefinition createDomainDefinition()
  {
    DomainDefinitionImpl domainDefinition = new DomainDefinitionImpl();
    return domainDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDefinition createFunctionDefinition()
  {
    FunctionDefinitionImpl functionDefinition = new FunctionDefinitionImpl();
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleDeclaration createRuleDeclaration()
  {
    RuleDeclarationImpl ruleDeclaration = new RuleDeclarationImpl();
    return ruleDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MacroDeclaration createMacroDeclaration()
  {
    MacroDeclarationImpl macroDeclaration = new MacroDeclarationImpl();
    return macroDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboDeclaration createTurboDeclaration()
  {
    TurboDeclarationImpl turboDeclaration = new TurboDeclarationImpl();
    return turboDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TemporalProperty createTemporalProperty()
  {
    TemporalPropertyImpl temporalProperty = new TemporalPropertyImpl();
    return temporalProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantElement createInvariantElement()
  {
    InvariantElementImpl invariantElement = new InvariantElementImpl();
    return invariantElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CtlSpec createCtlSpec()
  {
    CtlSpecImpl ctlSpec = new CtlSpecImpl();
    return ctlSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LtlSpec createLtlSpec()
  {
    LtlSpecImpl ltlSpec = new LtlSpecImpl();
    return ltlSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FairnessConstraint createFairnessConstraint()
  {
    FairnessConstraintImpl fairnessConstraint = new FairnessConstraintImpl();
    return fairnessConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JusticeConstraint createJusticeConstraint()
  {
    JusticeConstraintImpl justiceConstraint = new JusticeConstraintImpl();
    return justiceConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompassionConstraint createCompassionConstraint()
  {
    CompassionConstraintImpl compassionConstraint = new CompassionConstraintImpl();
    return compassionConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantConstraint createInvariantConstraint()
  {
    InvariantConstraintImpl invariantConstraint = new InvariantConstraintImpl();
    return invariantConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcreteDomain createConcreteDomain()
  {
    ConcreteDomainImpl concreteDomain = new ConcreteDomainImpl();
    return concreteDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDomain createTypeDomain()
  {
    TypeDomainImpl typeDomain = new TypeDomainImpl();
    return typeDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnyDomain createAnyDomain()
  {
    AnyDomainImpl anyDomain = new AnyDomainImpl();
    return anyDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicTD createBasicTD()
  {
    BasicTDImpl basicTD = new BasicTDImpl();
    return basicTD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardDomain createStandardDomain()
  {
    StandardDomainImpl standardDomain = new StandardDomainImpl();
    return standardDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerDomain createIntegerDomain()
  {
    IntegerDomainImpl integerDomain = new IntegerDomainImpl();
    return integerDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealDomain createRealDomain()
  {
    RealDomainImpl realDomain = new RealDomainImpl();
    return realDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringDomain createStringDomain()
  {
    StringDomainImpl stringDomain = new StringDomainImpl();
    return stringDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NaturalDomain createNaturalDomain()
  {
    NaturalDomainImpl naturalDomain = new NaturalDomainImpl();
    return naturalDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CharDomain createCharDomain()
  {
    CharDomainImpl charDomain = new CharDomainImpl();
    return charDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexDomain createComplexDomain()
  {
    ComplexDomainImpl complexDomain = new ComplexDomainImpl();
    return complexDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanDomain createBooleanDomain()
  {
    BooleanDomainImpl booleanDomain = new BooleanDomainImpl();
    return booleanDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UndefDomain createUndefDomain()
  {
    UndefDomainImpl undefDomain = new UndefDomainImpl();
    return undefDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractTD createAbstractTD()
  {
    AbstractTDImpl abstractTD = new AbstractTDImpl();
    return abstractTD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AgentDomain createAgentDomain()
  {
    AgentDomainImpl agentDomain = new AgentDomainImpl();
    return agentDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReserveDomain createReserveDomain()
  {
    ReserveDomainImpl reserveDomain = new ReserveDomainImpl();
    return reserveDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumTD createEnumTD()
  {
    EnumTDImpl enumTD = new EnumTDImpl();
    return enumTD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumElement createEnumElement()
  {
    EnumElementImpl enumElement = new EnumElementImpl();
    return enumElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructuredTD createStructuredTD()
  {
    StructuredTDImpl structuredTD = new StructuredTDImpl();
    return structuredTD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleDomain createRuleDomain()
  {
    RuleDomainImpl ruleDomain = new RuleDomainImpl();
    return ruleDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductDomain createProductDomain()
  {
    ProductDomainImpl productDomain = new ProductDomainImpl();
    return productDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceDomain createSequenceDomain()
  {
    SequenceDomainImpl sequenceDomain = new SequenceDomainImpl();
    return sequenceDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PowersetDomain createPowersetDomain()
  {
    PowersetDomainImpl powersetDomain = new PowersetDomainImpl();
    return powersetDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagDomain createBagDomain()
  {
    BagDomainImpl bagDomain = new BagDomainImpl();
    return bagDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapDomain createMapDomain()
  {
    MapDomainImpl mapDomain = new MapDomainImpl();
    return mapDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicFunction createBasicFunction()
  {
    BasicFunctionImpl basicFunction = new BasicFunctionImpl();
    return basicFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedFunction createDerivedFunction()
  {
    DerivedFunctionImpl derivedFunction = new DerivedFunctionImpl();
    return derivedFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StaticFunction createStaticFunction()
  {
    StaticFunctionImpl staticFunction = new StaticFunctionImpl();
    return staticFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DynamicFunction createDynamicFunction()
  {
    DynamicFunctionImpl dynamicFunction = new DynamicFunctionImpl();
    return dynamicFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalFunction createLocalFunction()
  {
    LocalFunctionImpl localFunction = new LocalFunctionImpl();
    return localFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlledFunction createControlledFunction()
  {
    ControlledFunctionImpl controlledFunction = new ControlledFunctionImpl();
    return controlledFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SharedFunction createSharedFunction()
  {
    SharedFunctionImpl sharedFunction = new SharedFunctionImpl();
    return sharedFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MonitoredFunction createMonitoredFunction()
  {
    MonitoredFunctionImpl monitoredFunction = new MonitoredFunctionImpl();
    return monitoredFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutFunction createOutFunction()
  {
    OutFunctionImpl outFunction = new OutFunctionImpl();
    return outFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term createTerm()
  {
    TermImpl term = new TermImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainTerm createDomainTerm()
  {
    DomainTermImpl domainTerm = new DomainTermImpl();
    return domainTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public basicExpr createbasicExpr()
  {
    basicExprImpl basicExpr = new basicExprImpl();
    return basicExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicTerm createBasicTerm()
  {
    BasicTermImpl basicTerm = new BasicTermImpl();
    return basicTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionTerm createFunctionTerm()
  {
    FunctionTermImpl functionTerm = new FunctionTermImpl();
    return functionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationTerm createLocationTerm()
  {
    LocationTermImpl locationTerm = new LocationTermImpl();
    return locationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableTerm createVariableTerm()
  {
    VariableTermImpl variableTerm = new VariableTermImpl();
    return variableTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantTerm createConstantTerm()
  {
    ConstantTermImpl constantTerm = new ConstantTermImpl();
    return constantTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberTerm createNumberTerm()
  {
    NumberTermImpl numberTerm = new NumberTermImpl();
    return numberTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanTerm createBooleanTerm()
  {
    BooleanTermImpl booleanTerm = new BooleanTermImpl();
    return booleanTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UndefTerm createUndefTerm()
  {
    UndefTermImpl undefTerm = new UndefTermImpl();
    return undefTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexTerm createComplexTerm()
  {
    ComplexTermImpl complexTerm = new ComplexTermImpl();
    return complexTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NaturalTerm createNaturalTerm()
  {
    NaturalTermImpl naturalTerm = new NaturalTermImpl();
    return naturalTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CharTerm createCharTerm()
  {
    CharTermImpl charTerm = new CharTermImpl();
    return charTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringTerm createStringTerm()
  {
    StringTermImpl stringTerm = new StringTermImpl();
    return stringTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumTerm createEnumTerm()
  {
    EnumTermImpl enumTerm = new EnumTermImpl();
    return enumTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealTerm createRealTerm()
  {
    RealTermImpl realTerm = new RealTermImpl();
    return realTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntegerTerm createIntegerTerm()
  {
    IntegerTermImpl integerTerm = new IntegerTermImpl();
    return integerTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtendedTerm createExtendedTerm()
  {
    ExtendedTermImpl extendedTerm = new ExtendedTermImpl();
    return extendedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalTerm createConditionalTerm()
  {
    ConditionalTermImpl conditionalTerm = new ConditionalTermImpl();
    return conditionalTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseTerm createCaseTerm()
  {
    CaseTermImpl caseTerm = new CaseTermImpl();
    return caseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleTerm createTupleTerm()
  {
    TupleTermImpl tupleTerm = new TupleTermImpl();
    return tupleTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionTerm createCollectionTerm()
  {
    CollectionTermImpl collectionTerm = new CollectionTermImpl();
    return collectionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceTerm createSequenceTerm()
  {
    SequenceTermImpl sequenceTerm = new SequenceTermImpl();
    return sequenceTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapTerm createMapTerm()
  {
    MapTermImpl mapTerm = new MapTermImpl();
    return mapTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetTerm createSetTerm()
  {
    SetTermImpl setTerm = new SetTermImpl();
    return setTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagTerm createBagTerm()
  {
    BagTermImpl bagTerm = new BagTermImpl();
    return bagTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableBindingTerm createVariableBindingTerm()
  {
    VariableBindingTermImpl variableBindingTerm = new VariableBindingTermImpl();
    return variableBindingTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FiniteQuantificationTerm createFiniteQuantificationTerm()
  {
    FiniteQuantificationTermImpl finiteQuantificationTerm = new FiniteQuantificationTermImpl();
    return finiteQuantificationTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistUniqueTerm createExistUniqueTerm()
  {
    ExistUniqueTermImpl existUniqueTerm = new ExistUniqueTermImpl();
    return existUniqueTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistTerm createExistTerm()
  {
    ExistTermImpl existTerm = new ExistTermImpl();
    return existTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForallTerm createForallTerm()
  {
    ForallTermImpl forallTerm = new ForallTermImpl();
    return forallTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetTerm createLetTerm()
  {
    LetTermImpl letTerm = new LetTermImpl();
    return letTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComprehensionTerm createComprehensionTerm()
  {
    ComprehensionTermImpl comprehensionTerm = new ComprehensionTermImpl();
    return comprehensionTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetCT createSetCT()
  {
    SetCTImpl setCT = new SetCTImpl();
    return setCT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapCT createMapCT()
  {
    MapCTImpl mapCT = new MapCTImpl();
    return mapCT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceCT createSequenceCT()
  {
    SequenceCTImpl sequenceCT = new SequenceCTImpl();
    return sequenceCT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BagCT createBagCT()
  {
    BagCTImpl bagCT = new BagCTImpl();
    return bagCT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleAsTerm createRuleAsTerm()
  {
    RuleAsTermImpl ruleAsTerm = new RuleAsTermImpl();
    return ruleAsTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TermAsRule createTermAsRule()
  {
    TermAsRuleImpl termAsRule = new TermAsRuleImpl();
    return termAsRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicRule createBasicRule()
  {
    BasicRuleImpl basicRule = new BasicRuleImpl();
    return basicRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SkipRule createSkipRule()
  {
    SkipRuleImpl skipRule = new SkipRuleImpl();
    return skipRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateRule createUpdateRule()
  {
    UpdateRuleImpl updateRule = new UpdateRuleImpl();
    return updateRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockRule createBlockRule()
  {
    BlockRuleImpl blockRule = new BlockRuleImpl();
    return blockRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalRule createConditionalRule()
  {
    ConditionalRuleImpl conditionalRule = new ConditionalRuleImpl();
    return conditionalRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChooseRule createChooseRule()
  {
    ChooseRuleImpl chooseRule = new ChooseRuleImpl();
    return chooseRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForallRule createForallRule()
  {
    ForallRuleImpl forallRule = new ForallRuleImpl();
    return forallRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LetRule createLetRule()
  {
    LetRuleImpl letRule = new LetRuleImpl();
    return letRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MacroCallRule createMacroCallRule()
  {
    MacroCallRuleImpl macroCallRule = new MacroCallRuleImpl();
    return macroCallRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExtendRule createExtendRule()
  {
    ExtendRuleImpl extendRule = new ExtendRuleImpl();
    return extendRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboRule createTurboRule()
  {
    TurboRuleImpl turboRule = new TurboRuleImpl();
    return turboRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SeqRule createSeqRule()
  {
    SeqRuleImpl seqRule = new SeqRuleImpl();
    return seqRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IterateRule createIterateRule()
  {
    IterateRuleImpl iterateRule = new IterateRuleImpl();
    return iterateRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboCallRule createTurboCallRule()
  {
    TurboCallRuleImpl turboCallRule = new TurboCallRuleImpl();
    return turboCallRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboReturnRule createTurboReturnRule()
  {
    TurboReturnRuleImpl turboReturnRule = new TurboReturnRuleImpl();
    return turboReturnRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboLocalStateRule createTurboLocalStateRule()
  {
    TurboLocalStateRuleImpl turboLocalStateRule = new TurboLocalStateRuleImpl();
    return turboLocalStateRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DerivedRule createDerivedRule()
  {
    DerivedRuleImpl derivedRule = new DerivedRuleImpl();
    return derivedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicDerivedRule createBasicDerivedRule()
  {
    BasicDerivedRuleImpl basicDerivedRule = new BasicDerivedRuleImpl();
    return basicDerivedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseRule createCaseRule()
  {
    CaseRuleImpl caseRule = new CaseRuleImpl();
    return caseRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurboDerivedRule createTurboDerivedRule()
  {
    TurboDerivedRuleImpl turboDerivedRule = new TurboDerivedRuleImpl();
    return turboDerivedRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecursiveWhileRule createRecursiveWhileRule()
  {
    RecursiveWhileRuleImpl recursiveWhileRule = new RecursiveWhileRuleImpl();
    return recursiveWhileRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IterativeWhileRule createIterativeWhileRule()
  {
    IterativeWhileRuleImpl iterativeWhileRule = new IterativeWhileRuleImpl();
    return iterativeWhileRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryOperation createBinaryOperation()
  {
    BinaryOperationImpl binaryOperation = new BinaryOperationImpl();
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsmetalPackage getAsmetalPackage()
  {
    return (AsmetalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AsmetalPackage getPackage()
  {
    return AsmetalPackage.eINSTANCE;
  }

} //AsmetalFactoryImpl
