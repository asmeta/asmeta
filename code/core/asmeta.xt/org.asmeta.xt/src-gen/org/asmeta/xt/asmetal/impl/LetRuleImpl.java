/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import java.util.Collection;

import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.LetRule;
import org.asmeta.xt.asmetal.Rule;
import org.asmeta.xt.asmetal.Term;
import org.asmeta.xt.asmetal.VariableTerm;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Let Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.LetRuleImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.LetRuleImpl#getInitExpression <em>Init Expression</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.LetRuleImpl#getInRule <em>In Rule</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LetRuleImpl extends BasicRuleImpl implements LetRule
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected EList<VariableTerm> variable;

  /**
   * The cached value of the '{@link #getInitExpression() <em>Init Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitExpression()
   * @generated
   * @ordered
   */
  protected EList<Term> initExpression;

  /**
   * The cached value of the '{@link #getInRule() <em>In Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInRule()
   * @generated
   * @ordered
   */
  protected Rule inRule;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LetRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.LET_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableTerm> getVariable()
  {
    if (variable == null)
    {
      variable = new EObjectContainmentEList<VariableTerm>(VariableTerm.class, this, AsmetalPackage.LET_RULE__VARIABLE);
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getInitExpression()
  {
    if (initExpression == null)
    {
      initExpression = new EObjectContainmentEList<Term>(Term.class, this, AsmetalPackage.LET_RULE__INIT_EXPRESSION);
    }
    return initExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getInRule()
  {
    return inRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInRule(Rule newInRule, NotificationChain msgs)
  {
    Rule oldInRule = inRule;
    inRule = newInRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.LET_RULE__IN_RULE, oldInRule, newInRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInRule(Rule newInRule)
  {
    if (newInRule != inRule)
    {
      NotificationChain msgs = null;
      if (inRule != null)
        msgs = ((InternalEObject)inRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.LET_RULE__IN_RULE, null, msgs);
      if (newInRule != null)
        msgs = ((InternalEObject)newInRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.LET_RULE__IN_RULE, null, msgs);
      msgs = basicSetInRule(newInRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.LET_RULE__IN_RULE, newInRule, newInRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.LET_RULE__VARIABLE:
        return ((InternalEList<?>)getVariable()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.LET_RULE__INIT_EXPRESSION:
        return ((InternalEList<?>)getInitExpression()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.LET_RULE__IN_RULE:
        return basicSetInRule(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.LET_RULE__VARIABLE:
        return getVariable();
      case AsmetalPackage.LET_RULE__INIT_EXPRESSION:
        return getInitExpression();
      case AsmetalPackage.LET_RULE__IN_RULE:
        return getInRule();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.LET_RULE__VARIABLE:
        getVariable().clear();
        getVariable().addAll((Collection<? extends VariableTerm>)newValue);
        return;
      case AsmetalPackage.LET_RULE__INIT_EXPRESSION:
        getInitExpression().clear();
        getInitExpression().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetalPackage.LET_RULE__IN_RULE:
        setInRule((Rule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.LET_RULE__VARIABLE:
        getVariable().clear();
        return;
      case AsmetalPackage.LET_RULE__INIT_EXPRESSION:
        getInitExpression().clear();
        return;
      case AsmetalPackage.LET_RULE__IN_RULE:
        setInRule((Rule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.LET_RULE__VARIABLE:
        return variable != null && !variable.isEmpty();
      case AsmetalPackage.LET_RULE__INIT_EXPRESSION:
        return initExpression != null && !initExpression.isEmpty();
      case AsmetalPackage.LET_RULE__IN_RULE:
        return inRule != null;
    }
    return super.eIsSet(featureID);
  }

} //LetRuleImpl
