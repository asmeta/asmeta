/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import java.util.Collection;

import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.CaseRule;
import org.asmeta.xt.asmetal.Rule;
import org.asmeta.xt.asmetal.Term;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Case Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseRuleImpl#getTerm <em>Term</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseRuleImpl#getCaseTerm <em>Case Term</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseRuleImpl#getCaseBranch <em>Case Branch</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.CaseRuleImpl#getOtherwiseBranch <em>Otherwise Branch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CaseRuleImpl extends BasicDerivedRuleImpl implements CaseRule
{
  /**
   * The cached value of the '{@link #getTerm() <em>Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm()
   * @generated
   * @ordered
   */
  protected Term term;

  /**
   * The cached value of the '{@link #getCaseTerm() <em>Case Term</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseTerm()
   * @generated
   * @ordered
   */
  protected EList<Term> caseTerm;

  /**
   * The cached value of the '{@link #getCaseBranch() <em>Case Branch</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseBranch()
   * @generated
   * @ordered
   */
  protected EList<Rule> caseBranch;

  /**
   * The cached value of the '{@link #getOtherwiseBranch() <em>Otherwise Branch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherwiseBranch()
   * @generated
   * @ordered
   */
  protected Rule otherwiseBranch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaseRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.CASE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getTerm()
  {
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTerm(Term newTerm, NotificationChain msgs)
  {
    Term oldTerm = term;
    term = newTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_RULE__TERM, oldTerm, newTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTerm(Term newTerm)
  {
    if (newTerm != term)
    {
      NotificationChain msgs = null;
      if (term != null)
        msgs = ((InternalEObject)term).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_RULE__TERM, null, msgs);
      if (newTerm != null)
        msgs = ((InternalEObject)newTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_RULE__TERM, null, msgs);
      msgs = basicSetTerm(newTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_RULE__TERM, newTerm, newTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Term> getCaseTerm()
  {
    if (caseTerm == null)
    {
      caseTerm = new EObjectContainmentEList<Term>(Term.class, this, AsmetalPackage.CASE_RULE__CASE_TERM);
    }
    return caseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Rule> getCaseBranch()
  {
    if (caseBranch == null)
    {
      caseBranch = new EObjectContainmentEList<Rule>(Rule.class, this, AsmetalPackage.CASE_RULE__CASE_BRANCH);
    }
    return caseBranch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule getOtherwiseBranch()
  {
    return otherwiseBranch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOtherwiseBranch(Rule newOtherwiseBranch, NotificationChain msgs)
  {
    Rule oldOtherwiseBranch = otherwiseBranch;
    otherwiseBranch = newOtherwiseBranch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH, oldOtherwiseBranch, newOtherwiseBranch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOtherwiseBranch(Rule newOtherwiseBranch)
  {
    if (newOtherwiseBranch != otherwiseBranch)
    {
      NotificationChain msgs = null;
      if (otherwiseBranch != null)
        msgs = ((InternalEObject)otherwiseBranch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH, null, msgs);
      if (newOtherwiseBranch != null)
        msgs = ((InternalEObject)newOtherwiseBranch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH, null, msgs);
      msgs = basicSetOtherwiseBranch(newOtherwiseBranch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH, newOtherwiseBranch, newOtherwiseBranch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_RULE__TERM:
        return basicSetTerm(null, msgs);
      case AsmetalPackage.CASE_RULE__CASE_TERM:
        return ((InternalEList<?>)getCaseTerm()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.CASE_RULE__CASE_BRANCH:
        return ((InternalEList<?>)getCaseBranch()).basicRemove(otherEnd, msgs);
      case AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH:
        return basicSetOtherwiseBranch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_RULE__TERM:
        return getTerm();
      case AsmetalPackage.CASE_RULE__CASE_TERM:
        return getCaseTerm();
      case AsmetalPackage.CASE_RULE__CASE_BRANCH:
        return getCaseBranch();
      case AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH:
        return getOtherwiseBranch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_RULE__TERM:
        setTerm((Term)newValue);
        return;
      case AsmetalPackage.CASE_RULE__CASE_TERM:
        getCaseTerm().clear();
        getCaseTerm().addAll((Collection<? extends Term>)newValue);
        return;
      case AsmetalPackage.CASE_RULE__CASE_BRANCH:
        getCaseBranch().clear();
        getCaseBranch().addAll((Collection<? extends Rule>)newValue);
        return;
      case AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH:
        setOtherwiseBranch((Rule)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_RULE__TERM:
        setTerm((Term)null);
        return;
      case AsmetalPackage.CASE_RULE__CASE_TERM:
        getCaseTerm().clear();
        return;
      case AsmetalPackage.CASE_RULE__CASE_BRANCH:
        getCaseBranch().clear();
        return;
      case AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH:
        setOtherwiseBranch((Rule)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CASE_RULE__TERM:
        return term != null;
      case AsmetalPackage.CASE_RULE__CASE_TERM:
        return caseTerm != null && !caseTerm.isEmpty();
      case AsmetalPackage.CASE_RULE__CASE_BRANCH:
        return caseBranch != null && !caseBranch.isEmpty();
      case AsmetalPackage.CASE_RULE__OTHERWISE_BRANCH:
        return otherwiseBranch != null;
    }
    return super.eIsSet(featureID);
  }

  public java.util.List<org.asmeta.xt.asmetal.Rule> getCaseBranches()
  {
  	java.util.List<org.asmeta.xt.asmetal.Rule> ruleList = new java.util.ArrayList<org.asmeta.xt.asmetal.Rule>();
	
	for (org.asmeta.xt.asmetal.Rule r : this.caseBranch) {
		ruleList.add(r);
	}
	
  	return ruleList;
  }
} //CaseRuleImpl
