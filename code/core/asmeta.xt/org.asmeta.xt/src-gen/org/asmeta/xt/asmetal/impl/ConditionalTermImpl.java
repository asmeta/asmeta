/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.ConditionalTerm;
import org.asmeta.xt.asmetal.Term;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.asmeta.xt.asmetal.impl.ConditionalTermImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.ConditionalTermImpl#getThenTerm <em>Then Term</em>}</li>
 *   <li>{@link org.asmeta.xt.asmetal.impl.ConditionalTermImpl#getElseTerm <em>Else Term</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalTermImpl extends ExtendedTermImpl implements ConditionalTerm
{
  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Term guard;

  /**
   * The cached value of the '{@link #getThenTerm() <em>Then Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenTerm()
   * @generated
   * @ordered
   */
  protected Term thenTerm;

  /**
   * The cached value of the '{@link #getElseTerm() <em>Else Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseTerm()
   * @generated
   * @ordered
   */
  protected Term elseTerm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AsmetalPackage.Literals.CONDITIONAL_TERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Term newGuard, NotificationChain msgs)
  {
    Term oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(Term newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getThenTerm()
  {
    return thenTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenTerm(Term newThenTerm, NotificationChain msgs)
  {
    Term oldThenTerm = thenTerm;
    thenTerm = newThenTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__THEN_TERM, oldThenTerm, newThenTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThenTerm(Term newThenTerm)
  {
    if (newThenTerm != thenTerm)
    {
      NotificationChain msgs = null;
      if (thenTerm != null)
        msgs = ((InternalEObject)thenTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__THEN_TERM, null, msgs);
      if (newThenTerm != null)
        msgs = ((InternalEObject)newThenTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__THEN_TERM, null, msgs);
      msgs = basicSetThenTerm(newThenTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__THEN_TERM, newThenTerm, newThenTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term getElseTerm()
  {
    return elseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseTerm(Term newElseTerm, NotificationChain msgs)
  {
    Term oldElseTerm = elseTerm;
    elseTerm = newElseTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM, oldElseTerm, newElseTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseTerm(Term newElseTerm)
  {
    if (newElseTerm != elseTerm)
    {
      NotificationChain msgs = null;
      if (elseTerm != null)
        msgs = ((InternalEObject)elseTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM, null, msgs);
      if (newElseTerm != null)
        msgs = ((InternalEObject)newElseTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM, null, msgs);
      msgs = basicSetElseTerm(newElseTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM, newElseTerm, newElseTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AsmetalPackage.CONDITIONAL_TERM__GUARD:
        return basicSetGuard(null, msgs);
      case AsmetalPackage.CONDITIONAL_TERM__THEN_TERM:
        return basicSetThenTerm(null, msgs);
      case AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM:
        return basicSetElseTerm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AsmetalPackage.CONDITIONAL_TERM__GUARD:
        return getGuard();
      case AsmetalPackage.CONDITIONAL_TERM__THEN_TERM:
        return getThenTerm();
      case AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM:
        return getElseTerm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AsmetalPackage.CONDITIONAL_TERM__GUARD:
        setGuard((Term)newValue);
        return;
      case AsmetalPackage.CONDITIONAL_TERM__THEN_TERM:
        setThenTerm((Term)newValue);
        return;
      case AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM:
        setElseTerm((Term)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CONDITIONAL_TERM__GUARD:
        setGuard((Term)null);
        return;
      case AsmetalPackage.CONDITIONAL_TERM__THEN_TERM:
        setThenTerm((Term)null);
        return;
      case AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM:
        setElseTerm((Term)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AsmetalPackage.CONDITIONAL_TERM__GUARD:
        return guard != null;
      case AsmetalPackage.CONDITIONAL_TERM__THEN_TERM:
        return thenTerm != null;
      case AsmetalPackage.CONDITIONAL_TERM__ELSE_TERM:
        return elseTerm != null;
    }
    return super.eIsSet(featureID);
  }

} //ConditionalTermImpl
