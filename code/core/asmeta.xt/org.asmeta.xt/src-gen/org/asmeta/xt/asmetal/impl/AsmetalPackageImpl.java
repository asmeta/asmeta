/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.impl;

import org.asmeta.xt.asmetal.AbstractTD;
import org.asmeta.xt.asmetal.AgentDomain;
import org.asmeta.xt.asmetal.AgentInitialization;
import org.asmeta.xt.asmetal.AnyDomain;
import org.asmeta.xt.asmetal.Asm;
import org.asmeta.xt.asmetal.AsmetalFactory;
import org.asmeta.xt.asmetal.AsmetalPackage;
import org.asmeta.xt.asmetal.BagCT;
import org.asmeta.xt.asmetal.BagDomain;
import org.asmeta.xt.asmetal.BagTerm;
import org.asmeta.xt.asmetal.BasicDerivedRule;
import org.asmeta.xt.asmetal.BasicFunction;
import org.asmeta.xt.asmetal.BasicRule;
import org.asmeta.xt.asmetal.BasicTD;
import org.asmeta.xt.asmetal.BasicTerm;
import org.asmeta.xt.asmetal.BinaryOperation;
import org.asmeta.xt.asmetal.BlockRule;
import org.asmeta.xt.asmetal.Body;
import org.asmeta.xt.asmetal.BooleanDomain;
import org.asmeta.xt.asmetal.BooleanTerm;
import org.asmeta.xt.asmetal.CaseRule;
import org.asmeta.xt.asmetal.CaseTerm;
import org.asmeta.xt.asmetal.CharDomain;
import org.asmeta.xt.asmetal.CharTerm;
import org.asmeta.xt.asmetal.ChooseRule;
import org.asmeta.xt.asmetal.CollectionTerm;
import org.asmeta.xt.asmetal.CompassionConstraint;
import org.asmeta.xt.asmetal.ComplexDomain;
import org.asmeta.xt.asmetal.ComplexTerm;
import org.asmeta.xt.asmetal.ComprehensionTerm;
import org.asmeta.xt.asmetal.ConcreteDomain;
import org.asmeta.xt.asmetal.ConditionalRule;
import org.asmeta.xt.asmetal.ConditionalTerm;
import org.asmeta.xt.asmetal.ConstantTerm;
import org.asmeta.xt.asmetal.ControlledFunction;
import org.asmeta.xt.asmetal.CtlSpec;
import org.asmeta.xt.asmetal.DerivedFunction;
import org.asmeta.xt.asmetal.DerivedRule;
import org.asmeta.xt.asmetal.Domain;
import org.asmeta.xt.asmetal.DomainDefinition;
import org.asmeta.xt.asmetal.DomainInitialization;
import org.asmeta.xt.asmetal.DomainTerm;
import org.asmeta.xt.asmetal.DynamicFunction;
import org.asmeta.xt.asmetal.EnumElement;
import org.asmeta.xt.asmetal.EnumTD;
import org.asmeta.xt.asmetal.EnumTerm;
import org.asmeta.xt.asmetal.ExistTerm;
import org.asmeta.xt.asmetal.ExistUniqueTerm;
import org.asmeta.xt.asmetal.ExportClause;
import org.asmeta.xt.asmetal.Expression;
import org.asmeta.xt.asmetal.ExtendRule;
import org.asmeta.xt.asmetal.ExtendedTerm;
import org.asmeta.xt.asmetal.FairnessConstraint;
import org.asmeta.xt.asmetal.FiniteQuantificationTerm;
import org.asmeta.xt.asmetal.ForallRule;
import org.asmeta.xt.asmetal.ForallTerm;
import org.asmeta.xt.asmetal.Function;
import org.asmeta.xt.asmetal.FunctionDefinition;
import org.asmeta.xt.asmetal.FunctionInitialization;
import org.asmeta.xt.asmetal.FunctionTerm;
import org.asmeta.xt.asmetal.Header;
import org.asmeta.xt.asmetal.ImportClause;
import org.asmeta.xt.asmetal.Initialization;
import org.asmeta.xt.asmetal.IntegerDomain;
import org.asmeta.xt.asmetal.IntegerTerm;
import org.asmeta.xt.asmetal.Invariant;
import org.asmeta.xt.asmetal.InvariantConstraint;
import org.asmeta.xt.asmetal.InvariantElement;
import org.asmeta.xt.asmetal.IterateRule;
import org.asmeta.xt.asmetal.IterativeWhileRule;
import org.asmeta.xt.asmetal.JusticeConstraint;
import org.asmeta.xt.asmetal.LetRule;
import org.asmeta.xt.asmetal.LetTerm;
import org.asmeta.xt.asmetal.LocalFunction;
import org.asmeta.xt.asmetal.LocationTerm;
import org.asmeta.xt.asmetal.LtlSpec;
import org.asmeta.xt.asmetal.MacroCallRule;
import org.asmeta.xt.asmetal.MacroDeclaration;
import org.asmeta.xt.asmetal.MapCT;
import org.asmeta.xt.asmetal.MapDomain;
import org.asmeta.xt.asmetal.MapTerm;
import org.asmeta.xt.asmetal.MonitoredFunction;
import org.asmeta.xt.asmetal.NaturalDomain;
import org.asmeta.xt.asmetal.NaturalTerm;
import org.asmeta.xt.asmetal.NumberTerm;
import org.asmeta.xt.asmetal.OutFunction;
import org.asmeta.xt.asmetal.PowersetDomain;
import org.asmeta.xt.asmetal.ProductDomain;
import org.asmeta.xt.asmetal.Property;
import org.asmeta.xt.asmetal.RealDomain;
import org.asmeta.xt.asmetal.RealTerm;
import org.asmeta.xt.asmetal.RecursiveWhileRule;
import org.asmeta.xt.asmetal.ReserveDomain;
import org.asmeta.xt.asmetal.Rule;
import org.asmeta.xt.asmetal.RuleAsTerm;
import org.asmeta.xt.asmetal.RuleDeclaration;
import org.asmeta.xt.asmetal.RuleDomain;
import org.asmeta.xt.asmetal.SeqRule;
import org.asmeta.xt.asmetal.SequenceCT;
import org.asmeta.xt.asmetal.SequenceDomain;
import org.asmeta.xt.asmetal.SequenceTerm;
import org.asmeta.xt.asmetal.SetCT;
import org.asmeta.xt.asmetal.SetTerm;
import org.asmeta.xt.asmetal.SharedFunction;
import org.asmeta.xt.asmetal.Signature;
import org.asmeta.xt.asmetal.SkipRule;
import org.asmeta.xt.asmetal.StandardDomain;
import org.asmeta.xt.asmetal.StaticFunction;
import org.asmeta.xt.asmetal.StringDomain;
import org.asmeta.xt.asmetal.StringTerm;
import org.asmeta.xt.asmetal.StructuredTD;
import org.asmeta.xt.asmetal.TemporalProperty;
import org.asmeta.xt.asmetal.Term;
import org.asmeta.xt.asmetal.TermAsRule;
import org.asmeta.xt.asmetal.TupleTerm;
import org.asmeta.xt.asmetal.TurboCallRule;
import org.asmeta.xt.asmetal.TurboDeclaration;
import org.asmeta.xt.asmetal.TurboDerivedRule;
import org.asmeta.xt.asmetal.TurboLocalStateRule;
import org.asmeta.xt.asmetal.TurboReturnRule;
import org.asmeta.xt.asmetal.TurboRule;
import org.asmeta.xt.asmetal.TypeDomain;
import org.asmeta.xt.asmetal.UndefDomain;
import org.asmeta.xt.asmetal.UndefTerm;
import org.asmeta.xt.asmetal.UpdateRule;
import org.asmeta.xt.asmetal.VariableBindingTerm;
import org.asmeta.xt.asmetal.VariableTerm;
import org.asmeta.xt.asmetal.basicExpr;
import org.asmeta.xt.asmetal.importData;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsmetalPackageImpl extends EPackageImpl implements AsmetalPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass asmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass headerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass importClauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass importDataEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass exportClauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signatureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass initializationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass domainInitializationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionInitializationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass agentInitializationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bodyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass domainDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionDefinitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass macroDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass propertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass temporalPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invariantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invariantElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ctlSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ltlSpecEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fairnessConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass justiceConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compassionConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass invariantConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass domainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass concreteDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass anyDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicTDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass standardDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass integerDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass realDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass naturalDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass charDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass complexDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass undefDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass abstractTDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass agentDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass reserveDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumTDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass structuredTDEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass productDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sequenceDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass powersetDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapDomainEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass derivedFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass staticFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dynamicFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass localFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass controlledFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sharedFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass monitoredFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass termEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass domainTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass functionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass locationTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constantTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass numberTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass booleanTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass undefTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass complexTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass naturalTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass charTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass enumTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass realTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass integerTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass extendedTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tupleTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass collectionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sequenceTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableBindingTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass finiteQuantificationTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass existUniqueTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass existTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forallTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass comprehensionTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setCTEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mapCTEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sequenceCTEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bagCTEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleAsTermEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass ruleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass termAsRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass skipRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updateRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass blockRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionalRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass chooseRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass forallRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass letRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass macroCallRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass extendRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass seqRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass iterateRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboCallRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboReturnRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboLocalStateRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass derivedRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass basicDerivedRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass caseRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass turboDerivedRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass recursiveWhileRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass iterativeWhileRuleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass binaryOperationEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.asmeta.xt.asmetal.AsmetalPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private AsmetalPackageImpl()
  {
    super(eNS_URI, AsmetalFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link AsmetalPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static AsmetalPackage init()
  {
    if (isInited) return (AsmetalPackage)EPackage.Registry.INSTANCE.getEPackage(AsmetalPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredAsmetalPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    AsmetalPackageImpl theAsmetalPackage = registeredAsmetalPackage instanceof AsmetalPackageImpl ? (AsmetalPackageImpl)registeredAsmetalPackage : new AsmetalPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theAsmetalPackage.createPackageContents();

    // Initialize created meta-data
    theAsmetalPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theAsmetalPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(AsmetalPackage.eNS_URI, theAsmetalPackage);
    return theAsmetalPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAsm()
  {
    return asmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAsm_IsAsynchr()
  {
    return (EAttribute)asmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAsm_Type()
  {
    return (EAttribute)asmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAsm_Name()
  {
    return (EAttribute)asmEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsm_HeaderSection()
  {
    return (EReference)asmEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsm_BodySection()
  {
    return (EReference)asmEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsm_Mainrule()
  {
    return (EReference)asmEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsm_InitialState()
  {
    return (EReference)asmEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAsm_DefaultInitialState()
  {
    return (EReference)asmEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getHeader()
  {
    return headerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHeader_ImportClause()
  {
    return (EReference)headerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHeader_ExportClause()
  {
    return (EReference)headerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHeader_Signature()
  {
    return (EReference)headerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImportClause()
  {
    return importClauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImportClause_ModuleName()
  {
    return (EAttribute)importClauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getImportClause_ImportedList()
  {
    return (EReference)importClauseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getimportData()
  {
    return importDataEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getimportData_Name()
  {
    return (EAttribute)importDataEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExportClause()
  {
    return exportClauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExportClause_ExportedList()
  {
    return (EAttribute)exportClauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExportClause_ExportAll()
  {
    return (EAttribute)exportClauseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSignature()
  {
    return signatureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignature_Domain()
  {
    return (EReference)signatureEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignature_Function()
  {
    return (EReference)signatureEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInitialization()
  {
    return initializationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInitialization_Name()
  {
    return (EAttribute)initializationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitialization_DomainInitialization()
  {
    return (EReference)initializationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitialization_FunctionInitialization()
  {
    return (EReference)initializationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInitialization_AgentInitialization()
  {
    return (EReference)initializationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDomainInitialization()
  {
    return domainInitializationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDomainInitialization_InitializedDomain()
  {
    return (EAttribute)domainInitializationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDomainInitialization_Body()
  {
    return (EReference)domainInitializationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunctionInitialization()
  {
    return functionInitializationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionInitialization_InizializedFunctionName()
  {
    return (EAttribute)functionInitializationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionInitialization_Variables()
  {
    return (EAttribute)functionInitializationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionInitialization_Domain()
  {
    return (EReference)functionInitializationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionInitialization_Body()
  {
    return (EReference)functionInitializationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAgentInitialization()
  {
    return agentInitializationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAgentInitialization_DomainName()
  {
    return (EAttribute)agentInitializationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAgentInitialization_Program()
  {
    return (EReference)agentInitializationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBody()
  {
    return bodyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_DomainDefinition()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_FunctionDefinition()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_RuleDeclaration()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_InvariantConstraint()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_FairnessConstraint()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBody_Property()
  {
    return (EReference)bodyEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDomainDefinition()
  {
    return domainDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDomainDefinition_DefinedDomainName()
  {
    return (EAttribute)domainDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDomainDefinition_Body()
  {
    return (EReference)domainDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunctionDefinition()
  {
    return functionDefinitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionDefinition_DefinedFunctionName()
  {
    return (EAttribute)functionDefinitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionDefinition_Variables()
  {
    return (EAttribute)functionDefinitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionDefinition_Domain()
  {
    return (EReference)functionDefinitionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionDefinition_Body()
  {
    return (EReference)functionDefinitionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRuleDeclaration()
  {
    return ruleDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRuleDeclaration_Name()
  {
    return (EAttribute)ruleDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRuleDeclaration_Variables()
  {
    return (EAttribute)ruleDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRuleDeclaration_Domain()
  {
    return (EReference)ruleDeclarationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRuleDeclaration_ReturnedDomain()
  {
    return (EReference)ruleDeclarationEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRuleDeclaration_RuleBody()
  {
    return (EReference)ruleDeclarationEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMacroDeclaration()
  {
    return macroDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboDeclaration()
  {
    return turboDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProperty()
  {
    return propertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getProperty_Name()
  {
    return (EAttribute)propertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProperty_Body()
  {
    return (EReference)propertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTemporalProperty()
  {
    return temporalPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvariant()
  {
    return invariantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvariant_Invar_list()
  {
    return (EReference)invariantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvariantElement()
  {
    return invariantElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInvariantElement_ConstrainedName()
  {
    return (EAttribute)invariantElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvariantElement_DomainList()
  {
    return (EReference)invariantElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCtlSpec()
  {
    return ctlSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLtlSpec()
  {
    return ltlSpecEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFairnessConstraint()
  {
    return fairnessConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJusticeConstraint()
  {
    return justiceConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJusticeConstraint_Body()
  {
    return (EReference)justiceConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompassionConstraint()
  {
    return compassionConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompassionConstraint_P()
  {
    return (EReference)compassionConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCompassionConstraint_Q()
  {
    return (EReference)compassionConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInvariantConstraint()
  {
    return invariantConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInvariantConstraint_Body()
  {
    return (EReference)invariantConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDomain()
  {
    return domainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDomain_Name()
  {
    return (EAttribute)domainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConcreteDomain()
  {
    return concreteDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConcreteDomain_Dynamic()
  {
    return (EAttribute)concreteDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConcreteDomain_TypeDomain()
  {
    return (EReference)concreteDomainEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTypeDomain()
  {
    return typeDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAnyDomain()
  {
    return anyDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicTD()
  {
    return basicTDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStandardDomain()
  {
    return standardDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntegerDomain()
  {
    return integerDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRealDomain()
  {
    return realDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStringDomain()
  {
    return stringDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNaturalDomain()
  {
    return naturalDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCharDomain()
  {
    return charDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComplexDomain()
  {
    return complexDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBooleanDomain()
  {
    return booleanDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUndefDomain()
  {
    return undefDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAbstractTD()
  {
    return abstractTDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAbstractTD_Dynamic()
  {
    return (EAttribute)abstractTDEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAgentDomain()
  {
    return agentDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReserveDomain()
  {
    return reserveDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumTD()
  {
    return enumTDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEnumTD_Element()
  {
    return (EReference)enumTDEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumElement()
  {
    return enumElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEnumElement_Symbol()
  {
    return (EAttribute)enumElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStructuredTD()
  {
    return structuredTDEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRuleDomain()
  {
    return ruleDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRuleDomain_Domains()
  {
    return (EReference)ruleDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProductDomain()
  {
    return productDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProductDomain_Domains()
  {
    return (EReference)productDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSequenceDomain()
  {
    return sequenceDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSequenceDomain_Domain()
  {
    return (EReference)sequenceDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPowersetDomain()
  {
    return powersetDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPowersetDomain_BaseDomain()
  {
    return (EReference)powersetDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBagDomain()
  {
    return bagDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBagDomain_Domain()
  {
    return (EReference)bagDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMapDomain()
  {
    return mapDomainEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapDomain_SourceDomain()
  {
    return (EReference)mapDomainEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapDomain_TargetDomain()
  {
    return (EReference)mapDomainEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunction()
  {
    return functionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunction_Name()
  {
    return (EAttribute)functionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunction_Domain()
  {
    return (EReference)functionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunction_Codomain()
  {
    return (EReference)functionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicFunction()
  {
    return basicFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDerivedFunction()
  {
    return derivedFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStaticFunction()
  {
    return staticFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDynamicFunction()
  {
    return dynamicFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDynamicFunction_Dynamic()
  {
    return (EAttribute)dynamicFunctionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLocalFunction()
  {
    return localFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getControlledFunction()
  {
    return controlledFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSharedFunction()
  {
    return sharedFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMonitoredFunction()
  {
    return monitoredFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOutFunction()
  {
    return outFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTerm()
  {
    return termEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDomainTerm()
  {
    return domainTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpression()
  {
    return expressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getExpression_Op()
  {
    return (EAttribute)expressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExpression_Operand()
  {
    return (EReference)expressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getbasicExpr()
  {
    return basicExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicTerm()
  {
    return basicTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFunctionTerm()
  {
    return functionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionTerm_Agent()
  {
    return (EAttribute)functionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFunctionTerm_FunctionName()
  {
    return (EAttribute)functionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFunctionTerm_Arguments()
  {
    return (EReference)functionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLocationTerm()
  {
    return locationTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLocationTerm_Agent()
  {
    return (EAttribute)locationTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLocationTerm_FunctionName()
  {
    return (EAttribute)locationTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLocationTerm_Arguments()
  {
    return (EReference)locationTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableTerm()
  {
    return variableTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableTerm_Name()
  {
    return (EAttribute)variableTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstantTerm()
  {
    return constantTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConstantTerm_Symbol()
  {
    return (EAttribute)constantTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNumberTerm()
  {
    return numberTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBooleanTerm()
  {
    return booleanTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUndefTerm()
  {
    return undefTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComplexTerm()
  {
    return complexTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNaturalTerm()
  {
    return naturalTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCharTerm()
  {
    return charTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStringTerm()
  {
    return stringTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEnumTerm()
  {
    return enumTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRealTerm()
  {
    return realTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntegerTerm()
  {
    return integerTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExtendedTerm()
  {
    return extendedTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionalTerm()
  {
    return conditionalTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalTerm_Guard()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalTerm_ThenTerm()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalTerm_ElseTerm()
  {
    return (EReference)conditionalTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseTerm()
  {
    return caseTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseTerm_ComparedTerm()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseTerm_ComparingTerm()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseTerm_ResultTerms()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseTerm_OtherwiseTerm()
  {
    return (EReference)caseTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTupleTerm()
  {
    return tupleTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTupleTerm_Terms()
  {
    return (EReference)tupleTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCollectionTerm()
  {
    return collectionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSequenceTerm()
  {
    return sequenceTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSequenceTerm_Start_term()
  {
    return (EReference)sequenceTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSequenceTerm_Other_terms()
  {
    return (EReference)sequenceTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSequenceTerm_End_term()
  {
    return (EReference)sequenceTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSequenceTerm_Step()
  {
    return (EReference)sequenceTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMapTerm()
  {
    return mapTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapTerm_Term()
  {
    return (EReference)mapTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetTerm()
  {
    return setTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetTerm_Start_term()
  {
    return (EReference)setTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetTerm_Other_terms()
  {
    return (EReference)setTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetTerm_End_term()
  {
    return (EReference)setTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetTerm_Step()
  {
    return (EReference)setTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBagTerm()
  {
    return bagTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBagTerm_Start_term()
  {
    return (EReference)bagTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBagTerm_Other_terms()
  {
    return (EReference)bagTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBagTerm_End_term()
  {
    return (EReference)bagTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBagTerm_Step()
  {
    return (EReference)bagTermEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableBindingTerm()
  {
    return variableBindingTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableBindingTerm_Variable()
  {
    return (EReference)variableBindingTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFiniteQuantificationTerm()
  {
    return finiteQuantificationTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFiniteQuantificationTerm_Ranges()
  {
    return (EReference)finiteQuantificationTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFiniteQuantificationTerm_Guard()
  {
    return (EReference)finiteQuantificationTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExistUniqueTerm()
  {
    return existUniqueTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExistTerm()
  {
    return existTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getForallTerm()
  {
    return forallTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLetTerm()
  {
    return letTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLetTerm_AssignmentTerm()
  {
    return (EReference)letTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLetTerm_Body()
  {
    return (EReference)letTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComprehensionTerm()
  {
    return comprehensionTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComprehensionTerm_Ranges()
  {
    return (EReference)comprehensionTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComprehensionTerm_Guard()
  {
    return (EReference)comprehensionTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComprehensionTerm_Term()
  {
    return (EReference)comprehensionTermEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetCT()
  {
    return setCTEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMapCT()
  {
    return mapCTEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSequenceCT()
  {
    return sequenceCTEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBagCT()
  {
    return bagCTEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRuleAsTerm()
  {
    return ruleAsTermEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRuleAsTerm_Name()
  {
    return (EAttribute)ruleAsTermEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRuleAsTerm_Domains()
  {
    return (EReference)ruleAsTermEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRule()
  {
    return ruleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTermAsRule()
  {
    return termAsRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTermAsRule_Term()
  {
    return (EReference)termAsRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTermAsRule_Parameters()
  {
    return (EReference)termAsRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicRule()
  {
    return basicRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSkipRule()
  {
    return skipRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUpdateRule()
  {
    return updateRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdateRule_Location()
  {
    return (EReference)updateRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getUpdateRule_UpdatingTerm()
  {
    return (EReference)updateRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBlockRule()
  {
    return blockRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBlockRule_Rules()
  {
    return (EReference)blockRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionalRule()
  {
    return conditionalRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalRule_Guard()
  {
    return (EReference)conditionalRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalRule_ThenRule()
  {
    return (EReference)conditionalRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionalRule_ElseRule()
  {
    return (EReference)conditionalRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getChooseRule()
  {
    return chooseRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getChooseRule_Variable()
  {
    return (EReference)chooseRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getChooseRule_Ranges()
  {
    return (EReference)chooseRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getChooseRule_Guard()
  {
    return (EReference)chooseRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getChooseRule_DoRule()
  {
    return (EReference)chooseRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getChooseRule_Ifnone()
  {
    return (EReference)chooseRuleEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getForallRule()
  {
    return forallRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForallRule_Variable()
  {
    return (EReference)forallRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForallRule_Ranges()
  {
    return (EReference)forallRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForallRule_Guard()
  {
    return (EReference)forallRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getForallRule_DoRule()
  {
    return (EReference)forallRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLetRule()
  {
    return letRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLetRule_Variable()
  {
    return (EReference)letRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLetRule_InitExpression()
  {
    return (EReference)letRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLetRule_InRule()
  {
    return (EReference)letRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMacroCallRule()
  {
    return macroCallRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMacroCallRule_Name()
  {
    return (EAttribute)macroCallRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMacroCallRule_Parameters()
  {
    return (EReference)macroCallRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExtendRule()
  {
    return extendRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExtendRule_ExtendedDomain()
  {
    return (EReference)extendRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExtendRule_BoundVar()
  {
    return (EReference)extendRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getExtendRule_DoRule()
  {
    return (EReference)extendRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboRule()
  {
    return turboRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSeqRule()
  {
    return seqRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSeqRule_Rules()
  {
    return (EReference)seqRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIterateRule()
  {
    return iterateRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getIterateRule_Rule()
  {
    return (EReference)iterateRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboCallRule()
  {
    return turboCallRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTurboCallRule_CalledRuleName()
  {
    return (EAttribute)turboCallRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboCallRule_Parameters()
  {
    return (EReference)turboCallRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboReturnRule()
  {
    return turboReturnRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboReturnRule_Location()
  {
    return (EReference)turboReturnRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboReturnRule_UpdateRule()
  {
    return (EReference)turboReturnRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboLocalStateRule()
  {
    return turboLocalStateRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboLocalStateRule_LocalFunction()
  {
    return (EReference)turboLocalStateRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboLocalStateRule_Init()
  {
    return (EReference)turboLocalStateRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboLocalStateRule_Body()
  {
    return (EReference)turboLocalStateRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDerivedRule()
  {
    return derivedRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBasicDerivedRule()
  {
    return basicDerivedRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCaseRule()
  {
    return caseRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseRule_Term()
  {
    return (EReference)caseRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseRule_CaseTerm()
  {
    return (EReference)caseRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseRule_CaseBranch()
  {
    return (EReference)caseRuleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCaseRule_OtherwiseBranch()
  {
    return (EReference)caseRuleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTurboDerivedRule()
  {
    return turboDerivedRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboDerivedRule_Guard()
  {
    return (EReference)turboDerivedRuleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTurboDerivedRule_Rule()
  {
    return (EReference)turboDerivedRuleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRecursiveWhileRule()
  {
    return recursiveWhileRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIterativeWhileRule()
  {
    return iterativeWhileRuleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBinaryOperation()
  {
    return binaryOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBinaryOperation_Left()
  {
    return (EReference)binaryOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBinaryOperation_Right()
  {
    return (EReference)binaryOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsmetalFactory getAsmetalFactory()
  {
    return (AsmetalFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    asmEClass = createEClass(ASM);
    createEAttribute(asmEClass, ASM__IS_ASYNCHR);
    createEAttribute(asmEClass, ASM__TYPE);
    createEAttribute(asmEClass, ASM__NAME);
    createEReference(asmEClass, ASM__HEADER_SECTION);
    createEReference(asmEClass, ASM__BODY_SECTION);
    createEReference(asmEClass, ASM__MAINRULE);
    createEReference(asmEClass, ASM__INITIAL_STATE);
    createEReference(asmEClass, ASM__DEFAULT_INITIAL_STATE);

    headerEClass = createEClass(HEADER);
    createEReference(headerEClass, HEADER__IMPORT_CLAUSE);
    createEReference(headerEClass, HEADER__EXPORT_CLAUSE);
    createEReference(headerEClass, HEADER__SIGNATURE);

    importClauseEClass = createEClass(IMPORT_CLAUSE);
    createEAttribute(importClauseEClass, IMPORT_CLAUSE__MODULE_NAME);
    createEReference(importClauseEClass, IMPORT_CLAUSE__IMPORTED_LIST);

    importDataEClass = createEClass(IMPORT_DATA);
    createEAttribute(importDataEClass, IMPORT_DATA__NAME);

    exportClauseEClass = createEClass(EXPORT_CLAUSE);
    createEAttribute(exportClauseEClass, EXPORT_CLAUSE__EXPORTED_LIST);
    createEAttribute(exportClauseEClass, EXPORT_CLAUSE__EXPORT_ALL);

    signatureEClass = createEClass(SIGNATURE);
    createEReference(signatureEClass, SIGNATURE__DOMAIN);
    createEReference(signatureEClass, SIGNATURE__FUNCTION);

    initializationEClass = createEClass(INITIALIZATION);
    createEAttribute(initializationEClass, INITIALIZATION__NAME);
    createEReference(initializationEClass, INITIALIZATION__DOMAIN_INITIALIZATION);
    createEReference(initializationEClass, INITIALIZATION__FUNCTION_INITIALIZATION);
    createEReference(initializationEClass, INITIALIZATION__AGENT_INITIALIZATION);

    domainInitializationEClass = createEClass(DOMAIN_INITIALIZATION);
    createEAttribute(domainInitializationEClass, DOMAIN_INITIALIZATION__INITIALIZED_DOMAIN);
    createEReference(domainInitializationEClass, DOMAIN_INITIALIZATION__BODY);

    functionInitializationEClass = createEClass(FUNCTION_INITIALIZATION);
    createEAttribute(functionInitializationEClass, FUNCTION_INITIALIZATION__INIZIALIZED_FUNCTION_NAME);
    createEAttribute(functionInitializationEClass, FUNCTION_INITIALIZATION__VARIABLES);
    createEReference(functionInitializationEClass, FUNCTION_INITIALIZATION__DOMAIN);
    createEReference(functionInitializationEClass, FUNCTION_INITIALIZATION__BODY);

    agentInitializationEClass = createEClass(AGENT_INITIALIZATION);
    createEAttribute(agentInitializationEClass, AGENT_INITIALIZATION__DOMAIN_NAME);
    createEReference(agentInitializationEClass, AGENT_INITIALIZATION__PROGRAM);

    bodyEClass = createEClass(BODY);
    createEReference(bodyEClass, BODY__DOMAIN_DEFINITION);
    createEReference(bodyEClass, BODY__FUNCTION_DEFINITION);
    createEReference(bodyEClass, BODY__RULE_DECLARATION);
    createEReference(bodyEClass, BODY__INVARIANT_CONSTRAINT);
    createEReference(bodyEClass, BODY__FAIRNESS_CONSTRAINT);
    createEReference(bodyEClass, BODY__PROPERTY);

    domainDefinitionEClass = createEClass(DOMAIN_DEFINITION);
    createEAttribute(domainDefinitionEClass, DOMAIN_DEFINITION__DEFINED_DOMAIN_NAME);
    createEReference(domainDefinitionEClass, DOMAIN_DEFINITION__BODY);

    functionDefinitionEClass = createEClass(FUNCTION_DEFINITION);
    createEAttribute(functionDefinitionEClass, FUNCTION_DEFINITION__DEFINED_FUNCTION_NAME);
    createEAttribute(functionDefinitionEClass, FUNCTION_DEFINITION__VARIABLES);
    createEReference(functionDefinitionEClass, FUNCTION_DEFINITION__DOMAIN);
    createEReference(functionDefinitionEClass, FUNCTION_DEFINITION__BODY);

    ruleDeclarationEClass = createEClass(RULE_DECLARATION);
    createEAttribute(ruleDeclarationEClass, RULE_DECLARATION__NAME);
    createEAttribute(ruleDeclarationEClass, RULE_DECLARATION__VARIABLES);
    createEReference(ruleDeclarationEClass, RULE_DECLARATION__DOMAIN);
    createEReference(ruleDeclarationEClass, RULE_DECLARATION__RETURNED_DOMAIN);
    createEReference(ruleDeclarationEClass, RULE_DECLARATION__RULE_BODY);

    macroDeclarationEClass = createEClass(MACRO_DECLARATION);

    turboDeclarationEClass = createEClass(TURBO_DECLARATION);

    propertyEClass = createEClass(PROPERTY);
    createEAttribute(propertyEClass, PROPERTY__NAME);
    createEReference(propertyEClass, PROPERTY__BODY);

    temporalPropertyEClass = createEClass(TEMPORAL_PROPERTY);

    invariantEClass = createEClass(INVARIANT);
    createEReference(invariantEClass, INVARIANT__INVAR_LIST);

    invariantElementEClass = createEClass(INVARIANT_ELEMENT);
    createEAttribute(invariantElementEClass, INVARIANT_ELEMENT__CONSTRAINED_NAME);
    createEReference(invariantElementEClass, INVARIANT_ELEMENT__DOMAIN_LIST);

    ctlSpecEClass = createEClass(CTL_SPEC);

    ltlSpecEClass = createEClass(LTL_SPEC);

    fairnessConstraintEClass = createEClass(FAIRNESS_CONSTRAINT);

    justiceConstraintEClass = createEClass(JUSTICE_CONSTRAINT);
    createEReference(justiceConstraintEClass, JUSTICE_CONSTRAINT__BODY);

    compassionConstraintEClass = createEClass(COMPASSION_CONSTRAINT);
    createEReference(compassionConstraintEClass, COMPASSION_CONSTRAINT__P);
    createEReference(compassionConstraintEClass, COMPASSION_CONSTRAINT__Q);

    invariantConstraintEClass = createEClass(INVARIANT_CONSTRAINT);
    createEReference(invariantConstraintEClass, INVARIANT_CONSTRAINT__BODY);

    domainEClass = createEClass(DOMAIN);
    createEAttribute(domainEClass, DOMAIN__NAME);

    concreteDomainEClass = createEClass(CONCRETE_DOMAIN);
    createEAttribute(concreteDomainEClass, CONCRETE_DOMAIN__DYNAMIC);
    createEReference(concreteDomainEClass, CONCRETE_DOMAIN__TYPE_DOMAIN);

    typeDomainEClass = createEClass(TYPE_DOMAIN);

    anyDomainEClass = createEClass(ANY_DOMAIN);

    basicTDEClass = createEClass(BASIC_TD);

    standardDomainEClass = createEClass(STANDARD_DOMAIN);

    integerDomainEClass = createEClass(INTEGER_DOMAIN);

    realDomainEClass = createEClass(REAL_DOMAIN);

    stringDomainEClass = createEClass(STRING_DOMAIN);

    naturalDomainEClass = createEClass(NATURAL_DOMAIN);

    charDomainEClass = createEClass(CHAR_DOMAIN);

    complexDomainEClass = createEClass(COMPLEX_DOMAIN);

    booleanDomainEClass = createEClass(BOOLEAN_DOMAIN);

    undefDomainEClass = createEClass(UNDEF_DOMAIN);

    abstractTDEClass = createEClass(ABSTRACT_TD);
    createEAttribute(abstractTDEClass, ABSTRACT_TD__DYNAMIC);

    agentDomainEClass = createEClass(AGENT_DOMAIN);

    reserveDomainEClass = createEClass(RESERVE_DOMAIN);

    enumTDEClass = createEClass(ENUM_TD);
    createEReference(enumTDEClass, ENUM_TD__ELEMENT);

    enumElementEClass = createEClass(ENUM_ELEMENT);
    createEAttribute(enumElementEClass, ENUM_ELEMENT__SYMBOL);

    structuredTDEClass = createEClass(STRUCTURED_TD);

    ruleDomainEClass = createEClass(RULE_DOMAIN);
    createEReference(ruleDomainEClass, RULE_DOMAIN__DOMAINS);

    productDomainEClass = createEClass(PRODUCT_DOMAIN);
    createEReference(productDomainEClass, PRODUCT_DOMAIN__DOMAINS);

    sequenceDomainEClass = createEClass(SEQUENCE_DOMAIN);
    createEReference(sequenceDomainEClass, SEQUENCE_DOMAIN__DOMAIN);

    powersetDomainEClass = createEClass(POWERSET_DOMAIN);
    createEReference(powersetDomainEClass, POWERSET_DOMAIN__BASE_DOMAIN);

    bagDomainEClass = createEClass(BAG_DOMAIN);
    createEReference(bagDomainEClass, BAG_DOMAIN__DOMAIN);

    mapDomainEClass = createEClass(MAP_DOMAIN);
    createEReference(mapDomainEClass, MAP_DOMAIN__SOURCE_DOMAIN);
    createEReference(mapDomainEClass, MAP_DOMAIN__TARGET_DOMAIN);

    functionEClass = createEClass(FUNCTION);
    createEAttribute(functionEClass, FUNCTION__NAME);
    createEReference(functionEClass, FUNCTION__DOMAIN);
    createEReference(functionEClass, FUNCTION__CODOMAIN);

    basicFunctionEClass = createEClass(BASIC_FUNCTION);

    derivedFunctionEClass = createEClass(DERIVED_FUNCTION);

    staticFunctionEClass = createEClass(STATIC_FUNCTION);

    dynamicFunctionEClass = createEClass(DYNAMIC_FUNCTION);
    createEAttribute(dynamicFunctionEClass, DYNAMIC_FUNCTION__DYNAMIC);

    localFunctionEClass = createEClass(LOCAL_FUNCTION);

    controlledFunctionEClass = createEClass(CONTROLLED_FUNCTION);

    sharedFunctionEClass = createEClass(SHARED_FUNCTION);

    monitoredFunctionEClass = createEClass(MONITORED_FUNCTION);

    outFunctionEClass = createEClass(OUT_FUNCTION);

    termEClass = createEClass(TERM);

    domainTermEClass = createEClass(DOMAIN_TERM);

    expressionEClass = createEClass(EXPRESSION);
    createEAttribute(expressionEClass, EXPRESSION__OP);
    createEReference(expressionEClass, EXPRESSION__OPERAND);

    basicExprEClass = createEClass(BASIC_EXPR);

    basicTermEClass = createEClass(BASIC_TERM);

    functionTermEClass = createEClass(FUNCTION_TERM);
    createEAttribute(functionTermEClass, FUNCTION_TERM__AGENT);
    createEAttribute(functionTermEClass, FUNCTION_TERM__FUNCTION_NAME);
    createEReference(functionTermEClass, FUNCTION_TERM__ARGUMENTS);

    locationTermEClass = createEClass(LOCATION_TERM);
    createEAttribute(locationTermEClass, LOCATION_TERM__AGENT);
    createEAttribute(locationTermEClass, LOCATION_TERM__FUNCTION_NAME);
    createEReference(locationTermEClass, LOCATION_TERM__ARGUMENTS);

    variableTermEClass = createEClass(VARIABLE_TERM);
    createEAttribute(variableTermEClass, VARIABLE_TERM__NAME);

    constantTermEClass = createEClass(CONSTANT_TERM);
    createEAttribute(constantTermEClass, CONSTANT_TERM__SYMBOL);

    numberTermEClass = createEClass(NUMBER_TERM);

    booleanTermEClass = createEClass(BOOLEAN_TERM);

    undefTermEClass = createEClass(UNDEF_TERM);

    complexTermEClass = createEClass(COMPLEX_TERM);

    naturalTermEClass = createEClass(NATURAL_TERM);

    charTermEClass = createEClass(CHAR_TERM);

    stringTermEClass = createEClass(STRING_TERM);

    enumTermEClass = createEClass(ENUM_TERM);

    realTermEClass = createEClass(REAL_TERM);

    integerTermEClass = createEClass(INTEGER_TERM);

    extendedTermEClass = createEClass(EXTENDED_TERM);

    conditionalTermEClass = createEClass(CONDITIONAL_TERM);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__GUARD);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__THEN_TERM);
    createEReference(conditionalTermEClass, CONDITIONAL_TERM__ELSE_TERM);

    caseTermEClass = createEClass(CASE_TERM);
    createEReference(caseTermEClass, CASE_TERM__COMPARED_TERM);
    createEReference(caseTermEClass, CASE_TERM__COMPARING_TERM);
    createEReference(caseTermEClass, CASE_TERM__RESULT_TERMS);
    createEReference(caseTermEClass, CASE_TERM__OTHERWISE_TERM);

    tupleTermEClass = createEClass(TUPLE_TERM);
    createEReference(tupleTermEClass, TUPLE_TERM__TERMS);

    collectionTermEClass = createEClass(COLLECTION_TERM);

    sequenceTermEClass = createEClass(SEQUENCE_TERM);
    createEReference(sequenceTermEClass, SEQUENCE_TERM__START_TERM);
    createEReference(sequenceTermEClass, SEQUENCE_TERM__OTHER_TERMS);
    createEReference(sequenceTermEClass, SEQUENCE_TERM__END_TERM);
    createEReference(sequenceTermEClass, SEQUENCE_TERM__STEP);

    mapTermEClass = createEClass(MAP_TERM);
    createEReference(mapTermEClass, MAP_TERM__TERM);

    setTermEClass = createEClass(SET_TERM);
    createEReference(setTermEClass, SET_TERM__START_TERM);
    createEReference(setTermEClass, SET_TERM__OTHER_TERMS);
    createEReference(setTermEClass, SET_TERM__END_TERM);
    createEReference(setTermEClass, SET_TERM__STEP);

    bagTermEClass = createEClass(BAG_TERM);
    createEReference(bagTermEClass, BAG_TERM__START_TERM);
    createEReference(bagTermEClass, BAG_TERM__OTHER_TERMS);
    createEReference(bagTermEClass, BAG_TERM__END_TERM);
    createEReference(bagTermEClass, BAG_TERM__STEP);

    variableBindingTermEClass = createEClass(VARIABLE_BINDING_TERM);
    createEReference(variableBindingTermEClass, VARIABLE_BINDING_TERM__VARIABLE);

    finiteQuantificationTermEClass = createEClass(FINITE_QUANTIFICATION_TERM);
    createEReference(finiteQuantificationTermEClass, FINITE_QUANTIFICATION_TERM__RANGES);
    createEReference(finiteQuantificationTermEClass, FINITE_QUANTIFICATION_TERM__GUARD);

    existUniqueTermEClass = createEClass(EXIST_UNIQUE_TERM);

    existTermEClass = createEClass(EXIST_TERM);

    forallTermEClass = createEClass(FORALL_TERM);

    letTermEClass = createEClass(LET_TERM);
    createEReference(letTermEClass, LET_TERM__ASSIGNMENT_TERM);
    createEReference(letTermEClass, LET_TERM__BODY);

    comprehensionTermEClass = createEClass(COMPREHENSION_TERM);
    createEReference(comprehensionTermEClass, COMPREHENSION_TERM__RANGES);
    createEReference(comprehensionTermEClass, COMPREHENSION_TERM__GUARD);
    createEReference(comprehensionTermEClass, COMPREHENSION_TERM__TERM);

    setCTEClass = createEClass(SET_CT);

    mapCTEClass = createEClass(MAP_CT);

    sequenceCTEClass = createEClass(SEQUENCE_CT);

    bagCTEClass = createEClass(BAG_CT);

    ruleAsTermEClass = createEClass(RULE_AS_TERM);
    createEAttribute(ruleAsTermEClass, RULE_AS_TERM__NAME);
    createEReference(ruleAsTermEClass, RULE_AS_TERM__DOMAINS);

    ruleEClass = createEClass(RULE);

    termAsRuleEClass = createEClass(TERM_AS_RULE);
    createEReference(termAsRuleEClass, TERM_AS_RULE__TERM);
    createEReference(termAsRuleEClass, TERM_AS_RULE__PARAMETERS);

    basicRuleEClass = createEClass(BASIC_RULE);

    skipRuleEClass = createEClass(SKIP_RULE);

    updateRuleEClass = createEClass(UPDATE_RULE);
    createEReference(updateRuleEClass, UPDATE_RULE__LOCATION);
    createEReference(updateRuleEClass, UPDATE_RULE__UPDATING_TERM);

    blockRuleEClass = createEClass(BLOCK_RULE);
    createEReference(blockRuleEClass, BLOCK_RULE__RULES);

    conditionalRuleEClass = createEClass(CONDITIONAL_RULE);
    createEReference(conditionalRuleEClass, CONDITIONAL_RULE__GUARD);
    createEReference(conditionalRuleEClass, CONDITIONAL_RULE__THEN_RULE);
    createEReference(conditionalRuleEClass, CONDITIONAL_RULE__ELSE_RULE);

    chooseRuleEClass = createEClass(CHOOSE_RULE);
    createEReference(chooseRuleEClass, CHOOSE_RULE__VARIABLE);
    createEReference(chooseRuleEClass, CHOOSE_RULE__RANGES);
    createEReference(chooseRuleEClass, CHOOSE_RULE__GUARD);
    createEReference(chooseRuleEClass, CHOOSE_RULE__DO_RULE);
    createEReference(chooseRuleEClass, CHOOSE_RULE__IFNONE);

    forallRuleEClass = createEClass(FORALL_RULE);
    createEReference(forallRuleEClass, FORALL_RULE__VARIABLE);
    createEReference(forallRuleEClass, FORALL_RULE__RANGES);
    createEReference(forallRuleEClass, FORALL_RULE__GUARD);
    createEReference(forallRuleEClass, FORALL_RULE__DO_RULE);

    letRuleEClass = createEClass(LET_RULE);
    createEReference(letRuleEClass, LET_RULE__VARIABLE);
    createEReference(letRuleEClass, LET_RULE__INIT_EXPRESSION);
    createEReference(letRuleEClass, LET_RULE__IN_RULE);

    macroCallRuleEClass = createEClass(MACRO_CALL_RULE);
    createEAttribute(macroCallRuleEClass, MACRO_CALL_RULE__NAME);
    createEReference(macroCallRuleEClass, MACRO_CALL_RULE__PARAMETERS);

    extendRuleEClass = createEClass(EXTEND_RULE);
    createEReference(extendRuleEClass, EXTEND_RULE__EXTENDED_DOMAIN);
    createEReference(extendRuleEClass, EXTEND_RULE__BOUND_VAR);
    createEReference(extendRuleEClass, EXTEND_RULE__DO_RULE);

    turboRuleEClass = createEClass(TURBO_RULE);

    seqRuleEClass = createEClass(SEQ_RULE);
    createEReference(seqRuleEClass, SEQ_RULE__RULES);

    iterateRuleEClass = createEClass(ITERATE_RULE);
    createEReference(iterateRuleEClass, ITERATE_RULE__RULE);

    turboCallRuleEClass = createEClass(TURBO_CALL_RULE);
    createEAttribute(turboCallRuleEClass, TURBO_CALL_RULE__CALLED_RULE_NAME);
    createEReference(turboCallRuleEClass, TURBO_CALL_RULE__PARAMETERS);

    turboReturnRuleEClass = createEClass(TURBO_RETURN_RULE);
    createEReference(turboReturnRuleEClass, TURBO_RETURN_RULE__LOCATION);
    createEReference(turboReturnRuleEClass, TURBO_RETURN_RULE__UPDATE_RULE);

    turboLocalStateRuleEClass = createEClass(TURBO_LOCAL_STATE_RULE);
    createEReference(turboLocalStateRuleEClass, TURBO_LOCAL_STATE_RULE__LOCAL_FUNCTION);
    createEReference(turboLocalStateRuleEClass, TURBO_LOCAL_STATE_RULE__INIT);
    createEReference(turboLocalStateRuleEClass, TURBO_LOCAL_STATE_RULE__BODY);

    derivedRuleEClass = createEClass(DERIVED_RULE);

    basicDerivedRuleEClass = createEClass(BASIC_DERIVED_RULE);

    caseRuleEClass = createEClass(CASE_RULE);
    createEReference(caseRuleEClass, CASE_RULE__TERM);
    createEReference(caseRuleEClass, CASE_RULE__CASE_TERM);
    createEReference(caseRuleEClass, CASE_RULE__CASE_BRANCH);
    createEReference(caseRuleEClass, CASE_RULE__OTHERWISE_BRANCH);

    turboDerivedRuleEClass = createEClass(TURBO_DERIVED_RULE);
    createEReference(turboDerivedRuleEClass, TURBO_DERIVED_RULE__GUARD);
    createEReference(turboDerivedRuleEClass, TURBO_DERIVED_RULE__RULE);

    recursiveWhileRuleEClass = createEClass(RECURSIVE_WHILE_RULE);

    iterativeWhileRuleEClass = createEClass(ITERATIVE_WHILE_RULE);

    binaryOperationEClass = createEClass(BINARY_OPERATION);
    createEReference(binaryOperationEClass, BINARY_OPERATION__LEFT);
    createEReference(binaryOperationEClass, BINARY_OPERATION__RIGHT);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    macroDeclarationEClass.getESuperTypes().add(this.getRuleDeclaration());
    turboDeclarationEClass.getESuperTypes().add(this.getRuleDeclaration());
    temporalPropertyEClass.getESuperTypes().add(this.getProperty());
    invariantEClass.getESuperTypes().add(this.getProperty());
    ctlSpecEClass.getESuperTypes().add(this.getTemporalProperty());
    ltlSpecEClass.getESuperTypes().add(this.getTemporalProperty());
    justiceConstraintEClass.getESuperTypes().add(this.getFairnessConstraint());
    compassionConstraintEClass.getESuperTypes().add(this.getFairnessConstraint());
    domainEClass.getESuperTypes().add(this.getDomainTerm());
    concreteDomainEClass.getESuperTypes().add(this.getDomain());
    typeDomainEClass.getESuperTypes().add(this.getDomain());
    anyDomainEClass.getESuperTypes().add(this.getTypeDomain());
    basicTDEClass.getESuperTypes().add(this.getTypeDomain());
    standardDomainEClass.getESuperTypes().add(this.getBasicTD());
    integerDomainEClass.getESuperTypes().add(this.getStandardDomain());
    realDomainEClass.getESuperTypes().add(this.getStandardDomain());
    stringDomainEClass.getESuperTypes().add(this.getStandardDomain());
    naturalDomainEClass.getESuperTypes().add(this.getStandardDomain());
    charDomainEClass.getESuperTypes().add(this.getStandardDomain());
    complexDomainEClass.getESuperTypes().add(this.getStandardDomain());
    booleanDomainEClass.getESuperTypes().add(this.getStandardDomain());
    undefDomainEClass.getESuperTypes().add(this.getStandardDomain());
    abstractTDEClass.getESuperTypes().add(this.getTypeDomain());
    agentDomainEClass.getESuperTypes().add(this.getAbstractTD());
    reserveDomainEClass.getESuperTypes().add(this.getAbstractTD());
    enumTDEClass.getESuperTypes().add(this.getTypeDomain());
    structuredTDEClass.getESuperTypes().add(this.getTypeDomain());
    ruleDomainEClass.getESuperTypes().add(this.getStructuredTD());
    productDomainEClass.getESuperTypes().add(this.getStructuredTD());
    sequenceDomainEClass.getESuperTypes().add(this.getStructuredTD());
    powersetDomainEClass.getESuperTypes().add(this.getStructuredTD());
    bagDomainEClass.getESuperTypes().add(this.getStructuredTD());
    mapDomainEClass.getESuperTypes().add(this.getStructuredTD());
    basicFunctionEClass.getESuperTypes().add(this.getFunction());
    derivedFunctionEClass.getESuperTypes().add(this.getFunction());
    staticFunctionEClass.getESuperTypes().add(this.getBasicFunction());
    dynamicFunctionEClass.getESuperTypes().add(this.getBasicFunction());
    localFunctionEClass.getESuperTypes().add(this.getDynamicFunction());
    controlledFunctionEClass.getESuperTypes().add(this.getDynamicFunction());
    sharedFunctionEClass.getESuperTypes().add(this.getDynamicFunction());
    monitoredFunctionEClass.getESuperTypes().add(this.getDynamicFunction());
    outFunctionEClass.getESuperTypes().add(this.getDynamicFunction());
    domainTermEClass.getESuperTypes().add(this.getTerm());
    expressionEClass.getESuperTypes().add(this.getTerm());
    basicExprEClass.getESuperTypes().add(this.getExpression());
    basicTermEClass.getESuperTypes().add(this.getbasicExpr());
    functionTermEClass.getESuperTypes().add(this.getBasicTerm());
    locationTermEClass.getESuperTypes().add(this.getBasicTerm());
    variableTermEClass.getESuperTypes().add(this.getBasicTerm());
    constantTermEClass.getESuperTypes().add(this.getBasicTerm());
    numberTermEClass.getESuperTypes().add(this.getConstantTerm());
    booleanTermEClass.getESuperTypes().add(this.getConstantTerm());
    undefTermEClass.getESuperTypes().add(this.getConstantTerm());
    complexTermEClass.getESuperTypes().add(this.getConstantTerm());
    naturalTermEClass.getESuperTypes().add(this.getConstantTerm());
    charTermEClass.getESuperTypes().add(this.getConstantTerm());
    stringTermEClass.getESuperTypes().add(this.getConstantTerm());
    enumTermEClass.getESuperTypes().add(this.getConstantTerm());
    realTermEClass.getESuperTypes().add(this.getNumberTerm());
    integerTermEClass.getESuperTypes().add(this.getNumberTerm());
    extendedTermEClass.getESuperTypes().add(this.getTerm());
    conditionalTermEClass.getESuperTypes().add(this.getExtendedTerm());
    caseTermEClass.getESuperTypes().add(this.getExtendedTerm());
    tupleTermEClass.getESuperTypes().add(this.getExtendedTerm());
    collectionTermEClass.getESuperTypes().add(this.getExtendedTerm());
    sequenceTermEClass.getESuperTypes().add(this.getCollectionTerm());
    mapTermEClass.getESuperTypes().add(this.getCollectionTerm());
    setTermEClass.getESuperTypes().add(this.getCollectionTerm());
    bagTermEClass.getESuperTypes().add(this.getCollectionTerm());
    variableBindingTermEClass.getESuperTypes().add(this.getExtendedTerm());
    finiteQuantificationTermEClass.getESuperTypes().add(this.getbasicExpr());
    finiteQuantificationTermEClass.getESuperTypes().add(this.getVariableBindingTerm());
    existUniqueTermEClass.getESuperTypes().add(this.getFiniteQuantificationTerm());
    existTermEClass.getESuperTypes().add(this.getFiniteQuantificationTerm());
    forallTermEClass.getESuperTypes().add(this.getFiniteQuantificationTerm());
    letTermEClass.getESuperTypes().add(this.getVariableBindingTerm());
    comprehensionTermEClass.getESuperTypes().add(this.getVariableBindingTerm());
    setCTEClass.getESuperTypes().add(this.getComprehensionTerm());
    mapCTEClass.getESuperTypes().add(this.getComprehensionTerm());
    sequenceCTEClass.getESuperTypes().add(this.getComprehensionTerm());
    bagCTEClass.getESuperTypes().add(this.getComprehensionTerm());
    ruleAsTermEClass.getESuperTypes().add(this.getExtendedTerm());
    termAsRuleEClass.getESuperTypes().add(this.getRule());
    basicRuleEClass.getESuperTypes().add(this.getRule());
    skipRuleEClass.getESuperTypes().add(this.getBasicRule());
    updateRuleEClass.getESuperTypes().add(this.getRule());
    blockRuleEClass.getESuperTypes().add(this.getBasicRule());
    conditionalRuleEClass.getESuperTypes().add(this.getBasicRule());
    chooseRuleEClass.getESuperTypes().add(this.getBasicRule());
    forallRuleEClass.getESuperTypes().add(this.getBasicRule());
    letRuleEClass.getESuperTypes().add(this.getBasicRule());
    macroCallRuleEClass.getESuperTypes().add(this.getBasicRule());
    extendRuleEClass.getESuperTypes().add(this.getBasicRule());
    turboRuleEClass.getESuperTypes().add(this.getRule());
    seqRuleEClass.getESuperTypes().add(this.getTurboRule());
    iterateRuleEClass.getESuperTypes().add(this.getTurboRule());
    turboCallRuleEClass.getESuperTypes().add(this.getTurboRule());
    turboReturnRuleEClass.getESuperTypes().add(this.getRule());
    turboLocalStateRuleEClass.getESuperTypes().add(this.getTurboRule());
    derivedRuleEClass.getESuperTypes().add(this.getRule());
    basicDerivedRuleEClass.getESuperTypes().add(this.getDerivedRule());
    caseRuleEClass.getESuperTypes().add(this.getBasicDerivedRule());
    turboDerivedRuleEClass.getESuperTypes().add(this.getDerivedRule());
    recursiveWhileRuleEClass.getESuperTypes().add(this.getTurboDerivedRule());
    iterativeWhileRuleEClass.getESuperTypes().add(this.getTurboDerivedRule());
    binaryOperationEClass.getESuperTypes().add(this.getExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(asmEClass, Asm.class, "Asm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAsm_IsAsynchr(), ecorePackage.getEBoolean(), "isAsynchr", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAsm_Type(), ecorePackage.getEString(), "type", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAsm_Name(), ecorePackage.getEString(), "name", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsm_HeaderSection(), this.getHeader(), null, "headerSection", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsm_BodySection(), this.getBody(), null, "bodySection", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsm_Mainrule(), this.getMacroDeclaration(), null, "mainrule", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsm_InitialState(), this.getInitialization(), null, "initialState", null, 0, -1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAsm_DefaultInitialState(), this.getInitialization(), null, "defaultInitialState", null, 0, 1, Asm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(headerEClass, Header.class, "Header", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getHeader_ImportClause(), this.getImportClause(), null, "importClause", null, 0, -1, Header.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHeader_ExportClause(), this.getExportClause(), null, "exportClause", null, 0, 1, Header.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHeader_Signature(), this.getSignature(), null, "signature", null, 0, 1, Header.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(importClauseEClass, ImportClause.class, "ImportClause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getImportClause_ModuleName(), ecorePackage.getEString(), "moduleName", null, 0, 1, ImportClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getImportClause_ImportedList(), this.getimportData(), null, "importedList", null, 0, -1, ImportClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(importDataEClass, importData.class, "importData", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getimportData_Name(), ecorePackage.getEString(), "name", null, 0, 1, importData.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(exportClauseEClass, ExportClause.class, "ExportClause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExportClause_ExportedList(), ecorePackage.getEString(), "exportedList", null, 0, -1, ExportClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getExportClause_ExportAll(), ecorePackage.getEBoolean(), "exportAll", null, 0, 1, ExportClause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signatureEClass, Signature.class, "Signature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSignature_Domain(), this.getDomain(), null, "domain", null, 0, -1, Signature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSignature_Function(), this.getFunction(), null, "function", null, 0, -1, Signature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(initializationEClass, Initialization.class, "Initialization", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInitialization_Name(), ecorePackage.getEString(), "name", null, 0, 1, Initialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInitialization_DomainInitialization(), this.getDomainInitialization(), null, "domainInitialization", null, 0, -1, Initialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInitialization_FunctionInitialization(), this.getFunctionInitialization(), null, "functionInitialization", null, 0, -1, Initialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInitialization_AgentInitialization(), this.getAgentInitialization(), null, "agentInitialization", null, 0, -1, Initialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(domainInitializationEClass, DomainInitialization.class, "DomainInitialization", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDomainInitialization_InitializedDomain(), ecorePackage.getEString(), "initializedDomain", null, 0, 1, DomainInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDomainInitialization_Body(), this.getTerm(), null, "body", null, 0, 1, DomainInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionInitializationEClass, FunctionInitialization.class, "FunctionInitialization", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionInitialization_InizializedFunctionName(), ecorePackage.getEString(), "inizializedFunctionName", null, 0, 1, FunctionInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunctionInitialization_Variables(), ecorePackage.getEString(), "variables", null, 0, -1, FunctionInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionInitialization_Domain(), this.getDomain(), null, "domain", null, 0, -1, FunctionInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionInitialization_Body(), this.getTerm(), null, "body", null, 0, 1, FunctionInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(agentInitializationEClass, AgentInitialization.class, "AgentInitialization", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAgentInitialization_DomainName(), ecorePackage.getEString(), "domainName", null, 0, 1, AgentInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAgentInitialization_Program(), this.getMacroCallRule(), null, "program", null, 0, 1, AgentInitialization.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bodyEClass, Body.class, "Body", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBody_DomainDefinition(), this.getDomainDefinition(), null, "domainDefinition", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBody_FunctionDefinition(), this.getFunctionDefinition(), null, "functionDefinition", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBody_RuleDeclaration(), this.getRuleDeclaration(), null, "ruleDeclaration", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBody_InvariantConstraint(), this.getInvariantConstraint(), null, "invariantConstraint", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBody_FairnessConstraint(), this.getFairnessConstraint(), null, "fairnessConstraint", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBody_Property(), this.getProperty(), null, "property", null, 0, -1, Body.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(domainDefinitionEClass, DomainDefinition.class, "DomainDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDomainDefinition_DefinedDomainName(), ecorePackage.getEString(), "definedDomainName", null, 0, 1, DomainDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDomainDefinition_Body(), this.getTerm(), null, "body", null, 0, 1, DomainDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionDefinitionEClass, FunctionDefinition.class, "FunctionDefinition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionDefinition_DefinedFunctionName(), ecorePackage.getEString(), "definedFunctionName", null, 0, 1, FunctionDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunctionDefinition_Variables(), ecorePackage.getEString(), "variables", null, 0, -1, FunctionDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDefinition_Domain(), this.getDomain(), null, "domain", null, 0, -1, FunctionDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionDefinition_Body(), this.getTerm(), null, "body", null, 0, 1, FunctionDefinition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ruleDeclarationEClass, RuleDeclaration.class, "RuleDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRuleDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, RuleDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRuleDeclaration_Variables(), ecorePackage.getEString(), "variables", null, 0, -1, RuleDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleDeclaration_Domain(), this.getDomain(), null, "domain", null, 0, -1, RuleDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleDeclaration_ReturnedDomain(), this.getDomain(), null, "returnedDomain", null, 0, 1, RuleDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleDeclaration_RuleBody(), this.getRule(), null, "ruleBody", null, 0, 1, RuleDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(macroDeclarationEClass, MacroDeclaration.class, "MacroDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(turboDeclarationEClass, TurboDeclaration.class, "TurboDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(propertyEClass, Property.class, "Property", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getProperty_Name(), ecorePackage.getEString(), "name", null, 0, 1, Property.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProperty_Body(), this.getTerm(), null, "body", null, 0, 1, Property.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(temporalPropertyEClass, TemporalProperty.class, "TemporalProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(invariantEClass, Invariant.class, "Invariant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInvariant_Invar_list(), this.getInvariantElement(), null, "invar_list", null, 0, -1, Invariant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(invariantElementEClass, InvariantElement.class, "InvariantElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInvariantElement_ConstrainedName(), ecorePackage.getEString(), "constrainedName", null, 0, 1, InvariantElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInvariantElement_DomainList(), this.getDomain(), null, "domainList", null, 0, -1, InvariantElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ctlSpecEClass, CtlSpec.class, "CtlSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ltlSpecEClass, LtlSpec.class, "LtlSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fairnessConstraintEClass, FairnessConstraint.class, "FairnessConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(justiceConstraintEClass, JusticeConstraint.class, "JusticeConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getJusticeConstraint_Body(), this.getTerm(), null, "body", null, 0, 1, JusticeConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(compassionConstraintEClass, CompassionConstraint.class, "CompassionConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCompassionConstraint_P(), this.getTerm(), null, "p", null, 0, 1, CompassionConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCompassionConstraint_Q(), this.getTerm(), null, "q", null, 0, 1, CompassionConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(invariantConstraintEClass, InvariantConstraint.class, "InvariantConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInvariantConstraint_Body(), this.getTerm(), null, "body", null, 0, 1, InvariantConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(domainEClass, Domain.class, "Domain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDomain_Name(), ecorePackage.getEString(), "name", null, 0, 1, Domain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(concreteDomainEClass, ConcreteDomain.class, "ConcreteDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConcreteDomain_Dynamic(), ecorePackage.getEBoolean(), "dynamic", null, 0, 1, ConcreteDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConcreteDomain_TypeDomain(), this.getDomain(), null, "typeDomain", null, 0, 1, ConcreteDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeDomainEClass, TypeDomain.class, "TypeDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(anyDomainEClass, AnyDomain.class, "AnyDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(basicTDEClass, BasicTD.class, "BasicTD", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(standardDomainEClass, StandardDomain.class, "StandardDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(integerDomainEClass, IntegerDomain.class, "IntegerDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(realDomainEClass, RealDomain.class, "RealDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stringDomainEClass, StringDomain.class, "StringDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(naturalDomainEClass, NaturalDomain.class, "NaturalDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(charDomainEClass, CharDomain.class, "CharDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(complexDomainEClass, ComplexDomain.class, "ComplexDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(booleanDomainEClass, BooleanDomain.class, "BooleanDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(undefDomainEClass, UndefDomain.class, "UndefDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(abstractTDEClass, AbstractTD.class, "AbstractTD", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAbstractTD_Dynamic(), ecorePackage.getEBoolean(), "dynamic", null, 0, 1, AbstractTD.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(agentDomainEClass, AgentDomain.class, "AgentDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(reserveDomainEClass, ReserveDomain.class, "ReserveDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(enumTDEClass, EnumTD.class, "EnumTD", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEnumTD_Element(), this.getEnumElement(), null, "element", null, 0, -1, EnumTD.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(enumElementEClass, EnumElement.class, "EnumElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEnumElement_Symbol(), ecorePackage.getEString(), "symbol", null, 0, 1, EnumElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(structuredTDEClass, StructuredTD.class, "StructuredTD", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ruleDomainEClass, RuleDomain.class, "RuleDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRuleDomain_Domains(), this.getDomain(), null, "domains", null, 0, -1, RuleDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(productDomainEClass, ProductDomain.class, "ProductDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProductDomain_Domains(), this.getDomain(), null, "domains", null, 0, -1, ProductDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sequenceDomainEClass, SequenceDomain.class, "SequenceDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSequenceDomain_Domain(), this.getDomain(), null, "domain", null, 0, 1, SequenceDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(powersetDomainEClass, PowersetDomain.class, "PowersetDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPowersetDomain_BaseDomain(), this.getDomain(), null, "baseDomain", null, 0, 1, PowersetDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bagDomainEClass, BagDomain.class, "BagDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBagDomain_Domain(), this.getDomain(), null, "domain", null, 0, 1, BagDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapDomainEClass, MapDomain.class, "MapDomain", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapDomain_SourceDomain(), this.getDomain(), null, "sourceDomain", null, 0, 1, MapDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapDomain_TargetDomain(), this.getDomain(), null, "targetDomain", null, 0, 1, MapDomain.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(functionEClass, Function.class, "Function", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunction_Name(), ecorePackage.getEString(), "name", null, 0, 1, Function.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunction_Domain(), this.getDomain(), null, "domain", null, 0, 1, Function.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunction_Codomain(), this.getDomain(), null, "codomain", null, 0, 1, Function.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicFunctionEClass, BasicFunction.class, "BasicFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(derivedFunctionEClass, DerivedFunction.class, "DerivedFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(staticFunctionEClass, StaticFunction.class, "StaticFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(dynamicFunctionEClass, DynamicFunction.class, "DynamicFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDynamicFunction_Dynamic(), ecorePackage.getEBoolean(), "dynamic", null, 0, 1, DynamicFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(localFunctionEClass, LocalFunction.class, "LocalFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(controlledFunctionEClass, ControlledFunction.class, "ControlledFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sharedFunctionEClass, SharedFunction.class, "SharedFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(monitoredFunctionEClass, MonitoredFunction.class, "MonitoredFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outFunctionEClass, OutFunction.class, "OutFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(termEClass, Term.class, "Term", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(domainTermEClass, DomainTerm.class, "DomainTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionEClass, Expression.class, "Expression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getExpression_Op(), ecorePackage.getEString(), "op", null, 0, 1, Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExpression_Operand(), this.getExpression(), null, "operand", null, 0, 1, Expression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicExprEClass, basicExpr.class, "basicExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(basicTermEClass, BasicTerm.class, "BasicTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(functionTermEClass, FunctionTerm.class, "FunctionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFunctionTerm_Agent(), ecorePackage.getEString(), "agent", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFunctionTerm_FunctionName(), ecorePackage.getEString(), "functionName", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFunctionTerm_Arguments(), this.getTupleTerm(), null, "arguments", null, 0, 1, FunctionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(locationTermEClass, LocationTerm.class, "LocationTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLocationTerm_Agent(), ecorePackage.getEString(), "agent", null, 0, 1, LocationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLocationTerm_FunctionName(), ecorePackage.getEString(), "functionName", null, 0, 1, LocationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLocationTerm_Arguments(), this.getTupleTerm(), null, "arguments", null, 0, 1, LocationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableTermEClass, VariableTerm.class, "VariableTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariableTerm_Name(), ecorePackage.getEString(), "name", null, 0, 1, VariableTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constantTermEClass, ConstantTerm.class, "ConstantTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConstantTerm_Symbol(), ecorePackage.getEString(), "symbol", null, 0, 1, ConstantTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(numberTermEClass, NumberTerm.class, "NumberTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(booleanTermEClass, BooleanTerm.class, "BooleanTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(undefTermEClass, UndefTerm.class, "UndefTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(complexTermEClass, ComplexTerm.class, "ComplexTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(naturalTermEClass, NaturalTerm.class, "NaturalTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(charTermEClass, CharTerm.class, "CharTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(stringTermEClass, StringTerm.class, "StringTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(enumTermEClass, EnumTerm.class, "EnumTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(realTermEClass, RealTerm.class, "RealTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(integerTermEClass, IntegerTerm.class, "IntegerTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(extendedTermEClass, ExtendedTerm.class, "ExtendedTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(conditionalTermEClass, ConditionalTerm.class, "ConditionalTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalTerm_Guard(), this.getTerm(), null, "guard", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalTerm_ThenTerm(), this.getTerm(), null, "thenTerm", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalTerm_ElseTerm(), this.getTerm(), null, "elseTerm", null, 0, 1, ConditionalTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(caseTermEClass, CaseTerm.class, "CaseTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseTerm_ComparedTerm(), this.getTerm(), null, "comparedTerm", null, 0, 1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_ComparingTerm(), this.getTerm(), null, "comparingTerm", null, 0, -1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_ResultTerms(), this.getTerm(), null, "resultTerms", null, 0, -1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseTerm_OtherwiseTerm(), this.getTerm(), null, "otherwiseTerm", null, 0, 1, CaseTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tupleTermEClass, TupleTerm.class, "TupleTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTupleTerm_Terms(), this.getTerm(), null, "terms", null, 0, -1, TupleTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(collectionTermEClass, CollectionTerm.class, "CollectionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sequenceTermEClass, SequenceTerm.class, "SequenceTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSequenceTerm_Start_term(), this.getTerm(), null, "start_term", null, 0, 1, SequenceTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSequenceTerm_Other_terms(), this.getTerm(), null, "other_terms", null, 0, -1, SequenceTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSequenceTerm_End_term(), this.getTerm(), null, "end_term", null, 0, 1, SequenceTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSequenceTerm_Step(), this.getConstantTerm(), null, "step", null, 0, 1, SequenceTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mapTermEClass, MapTerm.class, "MapTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapTerm_Term(), this.getTerm(), null, "term", null, 0, -1, MapTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setTermEClass, SetTerm.class, "SetTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetTerm_Start_term(), this.getTerm(), null, "start_term", null, 0, 1, SetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetTerm_Other_terms(), this.getTerm(), null, "other_terms", null, 0, -1, SetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetTerm_End_term(), this.getTerm(), null, "end_term", null, 0, 1, SetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSetTerm_Step(), this.getConstantTerm(), null, "step", null, 0, 1, SetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bagTermEClass, BagTerm.class, "BagTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBagTerm_Start_term(), this.getBasicTerm(), null, "start_term", null, 0, 1, BagTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBagTerm_Other_terms(), this.getBasicTerm(), null, "other_terms", null, 0, -1, BagTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBagTerm_End_term(), this.getConstantTerm(), null, "end_term", null, 0, 1, BagTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBagTerm_Step(), this.getConstantTerm(), null, "step", null, 0, 1, BagTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableBindingTermEClass, VariableBindingTerm.class, "VariableBindingTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableBindingTerm_Variable(), this.getVariableTerm(), null, "variable", null, 0, -1, VariableBindingTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(finiteQuantificationTermEClass, FiniteQuantificationTerm.class, "FiniteQuantificationTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFiniteQuantificationTerm_Ranges(), this.getTerm(), null, "ranges", null, 0, -1, FiniteQuantificationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFiniteQuantificationTerm_Guard(), this.getTerm(), null, "guard", null, 0, 1, FiniteQuantificationTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(existUniqueTermEClass, ExistUniqueTerm.class, "ExistUniqueTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(existTermEClass, ExistTerm.class, "ExistTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(forallTermEClass, ForallTerm.class, "ForallTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(letTermEClass, LetTerm.class, "LetTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLetTerm_AssignmentTerm(), this.getTerm(), null, "assignmentTerm", null, 0, -1, LetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetTerm_Body(), this.getTerm(), null, "body", null, 0, 1, LetTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(comprehensionTermEClass, ComprehensionTerm.class, "ComprehensionTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getComprehensionTerm_Ranges(), this.getTerm(), null, "ranges", null, 0, -1, ComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComprehensionTerm_Guard(), this.getTerm(), null, "guard", null, 0, 1, ComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComprehensionTerm_Term(), this.getTerm(), null, "term", null, 0, 1, ComprehensionTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setCTEClass, SetCT.class, "SetCT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(mapCTEClass, MapCT.class, "MapCT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sequenceCTEClass, SequenceCT.class, "SequenceCT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(bagCTEClass, BagCT.class, "BagCT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(ruleAsTermEClass, RuleAsTerm.class, "RuleAsTerm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRuleAsTerm_Name(), ecorePackage.getEString(), "name", null, 0, 1, RuleAsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRuleAsTerm_Domains(), this.getDomain(), null, "domains", null, 0, -1, RuleAsTerm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(ruleEClass, Rule.class, "Rule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(termAsRuleEClass, TermAsRule.class, "TermAsRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTermAsRule_Term(), this.getBasicTerm(), null, "term", null, 0, 1, TermAsRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTermAsRule_Parameters(), this.getTerm(), null, "parameters", null, 0, -1, TermAsRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(basicRuleEClass, BasicRule.class, "BasicRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(skipRuleEClass, SkipRule.class, "SkipRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(updateRuleEClass, UpdateRule.class, "UpdateRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getUpdateRule_Location(), this.getBasicTerm(), null, "location", null, 0, 1, UpdateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getUpdateRule_UpdatingTerm(), this.getTerm(), null, "updatingTerm", null, 0, 1, UpdateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(blockRuleEClass, BlockRule.class, "BlockRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBlockRule_Rules(), this.getRule(), null, "rules", null, 0, -1, BlockRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionalRuleEClass, ConditionalRule.class, "ConditionalRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionalRule_Guard(), this.getTerm(), null, "guard", null, 0, 1, ConditionalRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalRule_ThenRule(), this.getRule(), null, "thenRule", null, 0, 1, ConditionalRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionalRule_ElseRule(), this.getRule(), null, "elseRule", null, 0, 1, ConditionalRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(chooseRuleEClass, ChooseRule.class, "ChooseRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getChooseRule_Variable(), this.getVariableTerm(), null, "variable", null, 0, -1, ChooseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getChooseRule_Ranges(), this.getTerm(), null, "ranges", null, 0, -1, ChooseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getChooseRule_Guard(), this.getTerm(), null, "guard", null, 0, 1, ChooseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getChooseRule_DoRule(), this.getRule(), null, "doRule", null, 0, 1, ChooseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getChooseRule_Ifnone(), this.getRule(), null, "ifnone", null, 0, 1, ChooseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(forallRuleEClass, ForallRule.class, "ForallRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForallRule_Variable(), this.getVariableTerm(), null, "variable", null, 0, -1, ForallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForallRule_Ranges(), this.getTerm(), null, "ranges", null, 0, -1, ForallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForallRule_Guard(), this.getTerm(), null, "guard", null, 0, 1, ForallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForallRule_DoRule(), this.getRule(), null, "doRule", null, 0, 1, ForallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(letRuleEClass, LetRule.class, "LetRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLetRule_Variable(), this.getVariableTerm(), null, "variable", null, 0, -1, LetRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetRule_InitExpression(), this.getTerm(), null, "initExpression", null, 0, -1, LetRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLetRule_InRule(), this.getRule(), null, "inRule", null, 0, 1, LetRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(macroCallRuleEClass, MacroCallRule.class, "MacroCallRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMacroCallRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, MacroCallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMacroCallRule_Parameters(), this.getTerm(), null, "parameters", null, 0, -1, MacroCallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(extendRuleEClass, ExtendRule.class, "ExtendRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getExtendRule_ExtendedDomain(), this.getDomain(), null, "extendedDomain", null, 0, 1, ExtendRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExtendRule_BoundVar(), this.getVariableTerm(), null, "boundVar", null, 0, -1, ExtendRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getExtendRule_DoRule(), this.getRule(), null, "doRule", null, 0, 1, ExtendRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(turboRuleEClass, TurboRule.class, "TurboRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(seqRuleEClass, SeqRule.class, "SeqRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSeqRule_Rules(), this.getRule(), null, "rules", null, 0, -1, SeqRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(iterateRuleEClass, IterateRule.class, "IterateRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getIterateRule_Rule(), this.getRule(), null, "rule", null, 0, 1, IterateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(turboCallRuleEClass, TurboCallRule.class, "TurboCallRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTurboCallRule_CalledRuleName(), ecorePackage.getEString(), "calledRuleName", null, 0, 1, TurboCallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTurboCallRule_Parameters(), this.getTerm(), null, "parameters", null, 0, -1, TurboCallRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(turboReturnRuleEClass, TurboReturnRule.class, "TurboReturnRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTurboReturnRule_Location(), this.getBasicTerm(), null, "location", null, 0, 1, TurboReturnRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTurboReturnRule_UpdateRule(), this.getTurboCallRule(), null, "updateRule", null, 0, 1, TurboReturnRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(turboLocalStateRuleEClass, TurboLocalStateRule.class, "TurboLocalStateRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTurboLocalStateRule_LocalFunction(), this.getLocalFunction(), null, "localFunction", null, 0, -1, TurboLocalStateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTurboLocalStateRule_Init(), this.getRule(), null, "init", null, 0, -1, TurboLocalStateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTurboLocalStateRule_Body(), this.getRule(), null, "body", null, 0, 1, TurboLocalStateRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(derivedRuleEClass, DerivedRule.class, "DerivedRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(basicDerivedRuleEClass, BasicDerivedRule.class, "BasicDerivedRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(caseRuleEClass, CaseRule.class, "CaseRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCaseRule_Term(), this.getTerm(), null, "term", null, 0, 1, CaseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseRule_CaseTerm(), this.getTerm(), null, "caseTerm", null, 0, -1, CaseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseRule_CaseBranch(), this.getRule(), null, "caseBranch", null, 0, -1, CaseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCaseRule_OtherwiseBranch(), this.getRule(), null, "otherwiseBranch", null, 0, 1, CaseRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(turboDerivedRuleEClass, TurboDerivedRule.class, "TurboDerivedRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTurboDerivedRule_Guard(), this.getTerm(), null, "guard", null, 0, 1, TurboDerivedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTurboDerivedRule_Rule(), this.getRule(), null, "rule", null, 0, 1, TurboDerivedRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(recursiveWhileRuleEClass, RecursiveWhileRule.class, "RecursiveWhileRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(iterativeWhileRuleEClass, IterativeWhileRule.class, "IterativeWhileRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(binaryOperationEClass, BinaryOperation.class, "BinaryOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBinaryOperation_Left(), this.getExpression(), null, "left", null, 0, 1, BinaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBinaryOperation_Right(), this.getExpression(), null, "right", null, 0, 1, BinaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //AsmetalPackageImpl
