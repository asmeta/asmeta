/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.util;

import org.asmeta.xt.asmetal.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.asmeta.xt.asmetal.AsmetalPackage
 * @generated
 */
public class AsmetalAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AsmetalPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsmetalAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AsmetalPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AsmetalSwitch<Adapter> modelSwitch =
    new AsmetalSwitch<Adapter>()
    {
      @Override
      public Adapter caseAsm(Asm object)
      {
        return createAsmAdapter();
      }
      @Override
      public Adapter caseHeader(Header object)
      {
        return createHeaderAdapter();
      }
      @Override
      public Adapter caseImportClause(ImportClause object)
      {
        return createImportClauseAdapter();
      }
      @Override
      public Adapter caseimportData(importData object)
      {
        return createimportDataAdapter();
      }
      @Override
      public Adapter caseExportClause(ExportClause object)
      {
        return createExportClauseAdapter();
      }
      @Override
      public Adapter caseSignature(Signature object)
      {
        return createSignatureAdapter();
      }
      @Override
      public Adapter caseInitialization(Initialization object)
      {
        return createInitializationAdapter();
      }
      @Override
      public Adapter caseDomainInitialization(DomainInitialization object)
      {
        return createDomainInitializationAdapter();
      }
      @Override
      public Adapter caseFunctionInitialization(FunctionInitialization object)
      {
        return createFunctionInitializationAdapter();
      }
      @Override
      public Adapter caseAgentInitialization(AgentInitialization object)
      {
        return createAgentInitializationAdapter();
      }
      @Override
      public Adapter caseBody(Body object)
      {
        return createBodyAdapter();
      }
      @Override
      public Adapter caseDomainDefinition(DomainDefinition object)
      {
        return createDomainDefinitionAdapter();
      }
      @Override
      public Adapter caseFunctionDefinition(FunctionDefinition object)
      {
        return createFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseRuleDeclaration(RuleDeclaration object)
      {
        return createRuleDeclarationAdapter();
      }
      @Override
      public Adapter caseMacroDeclaration(MacroDeclaration object)
      {
        return createMacroDeclarationAdapter();
      }
      @Override
      public Adapter caseTurboDeclaration(TurboDeclaration object)
      {
        return createTurboDeclarationAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseTemporalProperty(TemporalProperty object)
      {
        return createTemporalPropertyAdapter();
      }
      @Override
      public Adapter caseInvariant(Invariant object)
      {
        return createInvariantAdapter();
      }
      @Override
      public Adapter caseInvariantElement(InvariantElement object)
      {
        return createInvariantElementAdapter();
      }
      @Override
      public Adapter caseCtlSpec(CtlSpec object)
      {
        return createCtlSpecAdapter();
      }
      @Override
      public Adapter caseLtlSpec(LtlSpec object)
      {
        return createLtlSpecAdapter();
      }
      @Override
      public Adapter caseFairnessConstraint(FairnessConstraint object)
      {
        return createFairnessConstraintAdapter();
      }
      @Override
      public Adapter caseJusticeConstraint(JusticeConstraint object)
      {
        return createJusticeConstraintAdapter();
      }
      @Override
      public Adapter caseCompassionConstraint(CompassionConstraint object)
      {
        return createCompassionConstraintAdapter();
      }
      @Override
      public Adapter caseInvariantConstraint(InvariantConstraint object)
      {
        return createInvariantConstraintAdapter();
      }
      @Override
      public Adapter caseDomain(Domain object)
      {
        return createDomainAdapter();
      }
      @Override
      public Adapter caseConcreteDomain(ConcreteDomain object)
      {
        return createConcreteDomainAdapter();
      }
      @Override
      public Adapter caseTypeDomain(TypeDomain object)
      {
        return createTypeDomainAdapter();
      }
      @Override
      public Adapter caseAnyDomain(AnyDomain object)
      {
        return createAnyDomainAdapter();
      }
      @Override
      public Adapter caseBasicTD(BasicTD object)
      {
        return createBasicTDAdapter();
      }
      @Override
      public Adapter caseStandardDomain(StandardDomain object)
      {
        return createStandardDomainAdapter();
      }
      @Override
      public Adapter caseIntegerDomain(IntegerDomain object)
      {
        return createIntegerDomainAdapter();
      }
      @Override
      public Adapter caseRealDomain(RealDomain object)
      {
        return createRealDomainAdapter();
      }
      @Override
      public Adapter caseStringDomain(StringDomain object)
      {
        return createStringDomainAdapter();
      }
      @Override
      public Adapter caseNaturalDomain(NaturalDomain object)
      {
        return createNaturalDomainAdapter();
      }
      @Override
      public Adapter caseCharDomain(CharDomain object)
      {
        return createCharDomainAdapter();
      }
      @Override
      public Adapter caseComplexDomain(ComplexDomain object)
      {
        return createComplexDomainAdapter();
      }
      @Override
      public Adapter caseBooleanDomain(BooleanDomain object)
      {
        return createBooleanDomainAdapter();
      }
      @Override
      public Adapter caseUndefDomain(UndefDomain object)
      {
        return createUndefDomainAdapter();
      }
      @Override
      public Adapter caseAbstractTD(AbstractTD object)
      {
        return createAbstractTDAdapter();
      }
      @Override
      public Adapter caseAgentDomain(AgentDomain object)
      {
        return createAgentDomainAdapter();
      }
      @Override
      public Adapter caseReserveDomain(ReserveDomain object)
      {
        return createReserveDomainAdapter();
      }
      @Override
      public Adapter caseEnumTD(EnumTD object)
      {
        return createEnumTDAdapter();
      }
      @Override
      public Adapter caseEnumElement(EnumElement object)
      {
        return createEnumElementAdapter();
      }
      @Override
      public Adapter caseStructuredTD(StructuredTD object)
      {
        return createStructuredTDAdapter();
      }
      @Override
      public Adapter caseRuleDomain(RuleDomain object)
      {
        return createRuleDomainAdapter();
      }
      @Override
      public Adapter caseProductDomain(ProductDomain object)
      {
        return createProductDomainAdapter();
      }
      @Override
      public Adapter caseSequenceDomain(SequenceDomain object)
      {
        return createSequenceDomainAdapter();
      }
      @Override
      public Adapter casePowersetDomain(PowersetDomain object)
      {
        return createPowersetDomainAdapter();
      }
      @Override
      public Adapter caseBagDomain(BagDomain object)
      {
        return createBagDomainAdapter();
      }
      @Override
      public Adapter caseMapDomain(MapDomain object)
      {
        return createMapDomainAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseBasicFunction(BasicFunction object)
      {
        return createBasicFunctionAdapter();
      }
      @Override
      public Adapter caseDerivedFunction(DerivedFunction object)
      {
        return createDerivedFunctionAdapter();
      }
      @Override
      public Adapter caseStaticFunction(StaticFunction object)
      {
        return createStaticFunctionAdapter();
      }
      @Override
      public Adapter caseDynamicFunction(DynamicFunction object)
      {
        return createDynamicFunctionAdapter();
      }
      @Override
      public Adapter caseLocalFunction(LocalFunction object)
      {
        return createLocalFunctionAdapter();
      }
      @Override
      public Adapter caseControlledFunction(ControlledFunction object)
      {
        return createControlledFunctionAdapter();
      }
      @Override
      public Adapter caseSharedFunction(SharedFunction object)
      {
        return createSharedFunctionAdapter();
      }
      @Override
      public Adapter caseMonitoredFunction(MonitoredFunction object)
      {
        return createMonitoredFunctionAdapter();
      }
      @Override
      public Adapter caseOutFunction(OutFunction object)
      {
        return createOutFunctionAdapter();
      }
      @Override
      public Adapter caseTerm(Term object)
      {
        return createTermAdapter();
      }
      @Override
      public Adapter caseDomainTerm(DomainTerm object)
      {
        return createDomainTermAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter casebasicExpr(basicExpr object)
      {
        return createbasicExprAdapter();
      }
      @Override
      public Adapter caseBasicTerm(BasicTerm object)
      {
        return createBasicTermAdapter();
      }
      @Override
      public Adapter caseFunctionTerm(FunctionTerm object)
      {
        return createFunctionTermAdapter();
      }
      @Override
      public Adapter caseLocationTerm(LocationTerm object)
      {
        return createLocationTermAdapter();
      }
      @Override
      public Adapter caseVariableTerm(VariableTerm object)
      {
        return createVariableTermAdapter();
      }
      @Override
      public Adapter caseConstantTerm(ConstantTerm object)
      {
        return createConstantTermAdapter();
      }
      @Override
      public Adapter caseNumberTerm(NumberTerm object)
      {
        return createNumberTermAdapter();
      }
      @Override
      public Adapter caseBooleanTerm(BooleanTerm object)
      {
        return createBooleanTermAdapter();
      }
      @Override
      public Adapter caseUndefTerm(UndefTerm object)
      {
        return createUndefTermAdapter();
      }
      @Override
      public Adapter caseComplexTerm(ComplexTerm object)
      {
        return createComplexTermAdapter();
      }
      @Override
      public Adapter caseNaturalTerm(NaturalTerm object)
      {
        return createNaturalTermAdapter();
      }
      @Override
      public Adapter caseCharTerm(CharTerm object)
      {
        return createCharTermAdapter();
      }
      @Override
      public Adapter caseStringTerm(StringTerm object)
      {
        return createStringTermAdapter();
      }
      @Override
      public Adapter caseEnumTerm(EnumTerm object)
      {
        return createEnumTermAdapter();
      }
      @Override
      public Adapter caseRealTerm(RealTerm object)
      {
        return createRealTermAdapter();
      }
      @Override
      public Adapter caseIntegerTerm(IntegerTerm object)
      {
        return createIntegerTermAdapter();
      }
      @Override
      public Adapter caseExtendedTerm(ExtendedTerm object)
      {
        return createExtendedTermAdapter();
      }
      @Override
      public Adapter caseConditionalTerm(ConditionalTerm object)
      {
        return createConditionalTermAdapter();
      }
      @Override
      public Adapter caseCaseTerm(CaseTerm object)
      {
        return createCaseTermAdapter();
      }
      @Override
      public Adapter caseTupleTerm(TupleTerm object)
      {
        return createTupleTermAdapter();
      }
      @Override
      public Adapter caseCollectionTerm(CollectionTerm object)
      {
        return createCollectionTermAdapter();
      }
      @Override
      public Adapter caseSequenceTerm(SequenceTerm object)
      {
        return createSequenceTermAdapter();
      }
      @Override
      public Adapter caseMapTerm(MapTerm object)
      {
        return createMapTermAdapter();
      }
      @Override
      public Adapter caseSetTerm(SetTerm object)
      {
        return createSetTermAdapter();
      }
      @Override
      public Adapter caseBagTerm(BagTerm object)
      {
        return createBagTermAdapter();
      }
      @Override
      public Adapter caseVariableBindingTerm(VariableBindingTerm object)
      {
        return createVariableBindingTermAdapter();
      }
      @Override
      public Adapter caseFiniteQuantificationTerm(FiniteQuantificationTerm object)
      {
        return createFiniteQuantificationTermAdapter();
      }
      @Override
      public Adapter caseExistUniqueTerm(ExistUniqueTerm object)
      {
        return createExistUniqueTermAdapter();
      }
      @Override
      public Adapter caseExistTerm(ExistTerm object)
      {
        return createExistTermAdapter();
      }
      @Override
      public Adapter caseForallTerm(ForallTerm object)
      {
        return createForallTermAdapter();
      }
      @Override
      public Adapter caseLetTerm(LetTerm object)
      {
        return createLetTermAdapter();
      }
      @Override
      public Adapter caseComprehensionTerm(ComprehensionTerm object)
      {
        return createComprehensionTermAdapter();
      }
      @Override
      public Adapter caseSetCT(SetCT object)
      {
        return createSetCTAdapter();
      }
      @Override
      public Adapter caseMapCT(MapCT object)
      {
        return createMapCTAdapter();
      }
      @Override
      public Adapter caseSequenceCT(SequenceCT object)
      {
        return createSequenceCTAdapter();
      }
      @Override
      public Adapter caseBagCT(BagCT object)
      {
        return createBagCTAdapter();
      }
      @Override
      public Adapter caseRuleAsTerm(RuleAsTerm object)
      {
        return createRuleAsTermAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseTermAsRule(TermAsRule object)
      {
        return createTermAsRuleAdapter();
      }
      @Override
      public Adapter caseBasicRule(BasicRule object)
      {
        return createBasicRuleAdapter();
      }
      @Override
      public Adapter caseSkipRule(SkipRule object)
      {
        return createSkipRuleAdapter();
      }
      @Override
      public Adapter caseUpdateRule(UpdateRule object)
      {
        return createUpdateRuleAdapter();
      }
      @Override
      public Adapter caseBlockRule(BlockRule object)
      {
        return createBlockRuleAdapter();
      }
      @Override
      public Adapter caseConditionalRule(ConditionalRule object)
      {
        return createConditionalRuleAdapter();
      }
      @Override
      public Adapter caseChooseRule(ChooseRule object)
      {
        return createChooseRuleAdapter();
      }
      @Override
      public Adapter caseForallRule(ForallRule object)
      {
        return createForallRuleAdapter();
      }
      @Override
      public Adapter caseLetRule(LetRule object)
      {
        return createLetRuleAdapter();
      }
      @Override
      public Adapter caseMacroCallRule(MacroCallRule object)
      {
        return createMacroCallRuleAdapter();
      }
      @Override
      public Adapter caseExtendRule(ExtendRule object)
      {
        return createExtendRuleAdapter();
      }
      @Override
      public Adapter caseTurboRule(TurboRule object)
      {
        return createTurboRuleAdapter();
      }
      @Override
      public Adapter caseSeqRule(SeqRule object)
      {
        return createSeqRuleAdapter();
      }
      @Override
      public Adapter caseIterateRule(IterateRule object)
      {
        return createIterateRuleAdapter();
      }
      @Override
      public Adapter caseTurboCallRule(TurboCallRule object)
      {
        return createTurboCallRuleAdapter();
      }
      @Override
      public Adapter caseTurboReturnRule(TurboReturnRule object)
      {
        return createTurboReturnRuleAdapter();
      }
      @Override
      public Adapter caseTurboLocalStateRule(TurboLocalStateRule object)
      {
        return createTurboLocalStateRuleAdapter();
      }
      @Override
      public Adapter caseDerivedRule(DerivedRule object)
      {
        return createDerivedRuleAdapter();
      }
      @Override
      public Adapter caseBasicDerivedRule(BasicDerivedRule object)
      {
        return createBasicDerivedRuleAdapter();
      }
      @Override
      public Adapter caseCaseRule(CaseRule object)
      {
        return createCaseRuleAdapter();
      }
      @Override
      public Adapter caseTurboDerivedRule(TurboDerivedRule object)
      {
        return createTurboDerivedRuleAdapter();
      }
      @Override
      public Adapter caseRecursiveWhileRule(RecursiveWhileRule object)
      {
        return createRecursiveWhileRuleAdapter();
      }
      @Override
      public Adapter caseIterativeWhileRule(IterativeWhileRule object)
      {
        return createIterativeWhileRuleAdapter();
      }
      @Override
      public Adapter caseBinaryOperation(BinaryOperation object)
      {
        return createBinaryOperationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Asm <em>Asm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Asm
   * @generated
   */
  public Adapter createAsmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Header <em>Header</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Header
   * @generated
   */
  public Adapter createHeaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ImportClause <em>Import Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ImportClause
   * @generated
   */
  public Adapter createImportClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.importData <em>import Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.importData
   * @generated
   */
  public Adapter createimportDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ExportClause <em>Export Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ExportClause
   * @generated
   */
  public Adapter createExportClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Signature <em>Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Signature
   * @generated
   */
  public Adapter createSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Initialization <em>Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Initialization
   * @generated
   */
  public Adapter createInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DomainInitialization <em>Domain Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DomainInitialization
   * @generated
   */
  public Adapter createDomainInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.FunctionInitialization <em>Function Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.FunctionInitialization
   * @generated
   */
  public Adapter createFunctionInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.AgentInitialization <em>Agent Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.AgentInitialization
   * @generated
   */
  public Adapter createAgentInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Body <em>Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Body
   * @generated
   */
  public Adapter createBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DomainDefinition <em>Domain Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DomainDefinition
   * @generated
   */
  public Adapter createDomainDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.FunctionDefinition <em>Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.FunctionDefinition
   * @generated
   */
  public Adapter createFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RuleDeclaration <em>Rule Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RuleDeclaration
   * @generated
   */
  public Adapter createRuleDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MacroDeclaration <em>Macro Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MacroDeclaration
   * @generated
   */
  public Adapter createMacroDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboDeclaration <em>Turbo Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboDeclaration
   * @generated
   */
  public Adapter createTurboDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TemporalProperty <em>Temporal Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TemporalProperty
   * @generated
   */
  public Adapter createTemporalPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Invariant <em>Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Invariant
   * @generated
   */
  public Adapter createInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.InvariantElement <em>Invariant Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.InvariantElement
   * @generated
   */
  public Adapter createInvariantElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CtlSpec <em>Ctl Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CtlSpec
   * @generated
   */
  public Adapter createCtlSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.LtlSpec <em>Ltl Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.LtlSpec
   * @generated
   */
  public Adapter createLtlSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.FairnessConstraint <em>Fairness Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.FairnessConstraint
   * @generated
   */
  public Adapter createFairnessConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.JusticeConstraint <em>Justice Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.JusticeConstraint
   * @generated
   */
  public Adapter createJusticeConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CompassionConstraint <em>Compassion Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CompassionConstraint
   * @generated
   */
  public Adapter createCompassionConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.InvariantConstraint <em>Invariant Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.InvariantConstraint
   * @generated
   */
  public Adapter createInvariantConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Domain <em>Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Domain
   * @generated
   */
  public Adapter createDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ConcreteDomain <em>Concrete Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ConcreteDomain
   * @generated
   */
  public Adapter createConcreteDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TypeDomain <em>Type Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TypeDomain
   * @generated
   */
  public Adapter createTypeDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.AnyDomain <em>Any Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.AnyDomain
   * @generated
   */
  public Adapter createAnyDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BasicTD <em>Basic TD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BasicTD
   * @generated
   */
  public Adapter createBasicTDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.StandardDomain <em>Standard Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.StandardDomain
   * @generated
   */
  public Adapter createStandardDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.IntegerDomain <em>Integer Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.IntegerDomain
   * @generated
   */
  public Adapter createIntegerDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RealDomain <em>Real Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RealDomain
   * @generated
   */
  public Adapter createRealDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.StringDomain <em>String Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.StringDomain
   * @generated
   */
  public Adapter createStringDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.NaturalDomain <em>Natural Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.NaturalDomain
   * @generated
   */
  public Adapter createNaturalDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CharDomain <em>Char Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CharDomain
   * @generated
   */
  public Adapter createCharDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ComplexDomain <em>Complex Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ComplexDomain
   * @generated
   */
  public Adapter createComplexDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BooleanDomain <em>Boolean Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BooleanDomain
   * @generated
   */
  public Adapter createBooleanDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.UndefDomain <em>Undef Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.UndefDomain
   * @generated
   */
  public Adapter createUndefDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.AbstractTD <em>Abstract TD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.AbstractTD
   * @generated
   */
  public Adapter createAbstractTDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.AgentDomain <em>Agent Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.AgentDomain
   * @generated
   */
  public Adapter createAgentDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ReserveDomain <em>Reserve Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ReserveDomain
   * @generated
   */
  public Adapter createReserveDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.EnumTD <em>Enum TD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.EnumTD
   * @generated
   */
  public Adapter createEnumTDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.EnumElement <em>Enum Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.EnumElement
   * @generated
   */
  public Adapter createEnumElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.StructuredTD <em>Structured TD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.StructuredTD
   * @generated
   */
  public Adapter createStructuredTDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RuleDomain <em>Rule Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RuleDomain
   * @generated
   */
  public Adapter createRuleDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ProductDomain <em>Product Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ProductDomain
   * @generated
   */
  public Adapter createProductDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SequenceDomain <em>Sequence Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SequenceDomain
   * @generated
   */
  public Adapter createSequenceDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.PowersetDomain <em>Powerset Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.PowersetDomain
   * @generated
   */
  public Adapter createPowersetDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BagDomain <em>Bag Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BagDomain
   * @generated
   */
  public Adapter createBagDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MapDomain <em>Map Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MapDomain
   * @generated
   */
  public Adapter createMapDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BasicFunction <em>Basic Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BasicFunction
   * @generated
   */
  public Adapter createBasicFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DerivedFunction <em>Derived Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DerivedFunction
   * @generated
   */
  public Adapter createDerivedFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.StaticFunction <em>Static Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.StaticFunction
   * @generated
   */
  public Adapter createStaticFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DynamicFunction <em>Dynamic Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DynamicFunction
   * @generated
   */
  public Adapter createDynamicFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.LocalFunction <em>Local Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.LocalFunction
   * @generated
   */
  public Adapter createLocalFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ControlledFunction <em>Controlled Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ControlledFunction
   * @generated
   */
  public Adapter createControlledFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SharedFunction <em>Shared Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SharedFunction
   * @generated
   */
  public Adapter createSharedFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MonitoredFunction <em>Monitored Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MonitoredFunction
   * @generated
   */
  public Adapter createMonitoredFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.OutFunction <em>Out Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.OutFunction
   * @generated
   */
  public Adapter createOutFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Term <em>Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Term
   * @generated
   */
  public Adapter createTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DomainTerm <em>Domain Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DomainTerm
   * @generated
   */
  public Adapter createDomainTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.basicExpr <em>basic Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.basicExpr
   * @generated
   */
  public Adapter createbasicExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BasicTerm <em>Basic Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BasicTerm
   * @generated
   */
  public Adapter createBasicTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.FunctionTerm <em>Function Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.FunctionTerm
   * @generated
   */
  public Adapter createFunctionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.LocationTerm <em>Location Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.LocationTerm
   * @generated
   */
  public Adapter createLocationTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.VariableTerm <em>Variable Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.VariableTerm
   * @generated
   */
  public Adapter createVariableTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ConstantTerm <em>Constant Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ConstantTerm
   * @generated
   */
  public Adapter createConstantTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.NumberTerm <em>Number Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.NumberTerm
   * @generated
   */
  public Adapter createNumberTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BooleanTerm <em>Boolean Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BooleanTerm
   * @generated
   */
  public Adapter createBooleanTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.UndefTerm <em>Undef Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.UndefTerm
   * @generated
   */
  public Adapter createUndefTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ComplexTerm <em>Complex Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ComplexTerm
   * @generated
   */
  public Adapter createComplexTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.NaturalTerm <em>Natural Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.NaturalTerm
   * @generated
   */
  public Adapter createNaturalTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CharTerm <em>Char Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CharTerm
   * @generated
   */
  public Adapter createCharTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.StringTerm <em>String Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.StringTerm
   * @generated
   */
  public Adapter createStringTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.EnumTerm <em>Enum Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.EnumTerm
   * @generated
   */
  public Adapter createEnumTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RealTerm <em>Real Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RealTerm
   * @generated
   */
  public Adapter createRealTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.IntegerTerm <em>Integer Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.IntegerTerm
   * @generated
   */
  public Adapter createIntegerTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ExtendedTerm <em>Extended Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ExtendedTerm
   * @generated
   */
  public Adapter createExtendedTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ConditionalTerm <em>Conditional Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ConditionalTerm
   * @generated
   */
  public Adapter createConditionalTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CaseTerm <em>Case Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CaseTerm
   * @generated
   */
  public Adapter createCaseTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TupleTerm <em>Tuple Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TupleTerm
   * @generated
   */
  public Adapter createTupleTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CollectionTerm <em>Collection Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CollectionTerm
   * @generated
   */
  public Adapter createCollectionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SequenceTerm <em>Sequence Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SequenceTerm
   * @generated
   */
  public Adapter createSequenceTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MapTerm <em>Map Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MapTerm
   * @generated
   */
  public Adapter createMapTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SetTerm <em>Set Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SetTerm
   * @generated
   */
  public Adapter createSetTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BagTerm <em>Bag Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BagTerm
   * @generated
   */
  public Adapter createBagTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.VariableBindingTerm <em>Variable Binding Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.VariableBindingTerm
   * @generated
   */
  public Adapter createVariableBindingTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.FiniteQuantificationTerm <em>Finite Quantification Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.FiniteQuantificationTerm
   * @generated
   */
  public Adapter createFiniteQuantificationTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ExistUniqueTerm <em>Exist Unique Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ExistUniqueTerm
   * @generated
   */
  public Adapter createExistUniqueTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ExistTerm <em>Exist Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ExistTerm
   * @generated
   */
  public Adapter createExistTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ForallTerm <em>Forall Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ForallTerm
   * @generated
   */
  public Adapter createForallTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.LetTerm <em>Let Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.LetTerm
   * @generated
   */
  public Adapter createLetTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ComprehensionTerm <em>Comprehension Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ComprehensionTerm
   * @generated
   */
  public Adapter createComprehensionTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SetCT <em>Set CT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SetCT
   * @generated
   */
  public Adapter createSetCTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MapCT <em>Map CT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MapCT
   * @generated
   */
  public Adapter createMapCTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SequenceCT <em>Sequence CT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SequenceCT
   * @generated
   */
  public Adapter createSequenceCTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BagCT <em>Bag CT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BagCT
   * @generated
   */
  public Adapter createBagCTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RuleAsTerm <em>Rule As Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RuleAsTerm
   * @generated
   */
  public Adapter createRuleAsTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TermAsRule <em>Term As Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TermAsRule
   * @generated
   */
  public Adapter createTermAsRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BasicRule <em>Basic Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BasicRule
   * @generated
   */
  public Adapter createBasicRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SkipRule <em>Skip Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SkipRule
   * @generated
   */
  public Adapter createSkipRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.UpdateRule <em>Update Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.UpdateRule
   * @generated
   */
  public Adapter createUpdateRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BlockRule <em>Block Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BlockRule
   * @generated
   */
  public Adapter createBlockRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ConditionalRule <em>Conditional Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ConditionalRule
   * @generated
   */
  public Adapter createConditionalRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ChooseRule <em>Choose Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ChooseRule
   * @generated
   */
  public Adapter createChooseRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ForallRule <em>Forall Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ForallRule
   * @generated
   */
  public Adapter createForallRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.LetRule <em>Let Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.LetRule
   * @generated
   */
  public Adapter createLetRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.MacroCallRule <em>Macro Call Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.MacroCallRule
   * @generated
   */
  public Adapter createMacroCallRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.ExtendRule <em>Extend Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.ExtendRule
   * @generated
   */
  public Adapter createExtendRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboRule <em>Turbo Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboRule
   * @generated
   */
  public Adapter createTurboRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.SeqRule <em>Seq Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.SeqRule
   * @generated
   */
  public Adapter createSeqRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.IterateRule <em>Iterate Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.IterateRule
   * @generated
   */
  public Adapter createIterateRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboCallRule <em>Turbo Call Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboCallRule
   * @generated
   */
  public Adapter createTurboCallRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboReturnRule <em>Turbo Return Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboReturnRule
   * @generated
   */
  public Adapter createTurboReturnRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboLocalStateRule <em>Turbo Local State Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboLocalStateRule
   * @generated
   */
  public Adapter createTurboLocalStateRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.DerivedRule <em>Derived Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.DerivedRule
   * @generated
   */
  public Adapter createDerivedRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BasicDerivedRule <em>Basic Derived Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BasicDerivedRule
   * @generated
   */
  public Adapter createBasicDerivedRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.CaseRule <em>Case Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.CaseRule
   * @generated
   */
  public Adapter createCaseRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.TurboDerivedRule <em>Turbo Derived Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.TurboDerivedRule
   * @generated
   */
  public Adapter createTurboDerivedRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.RecursiveWhileRule <em>Recursive While Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.RecursiveWhileRule
   * @generated
   */
  public Adapter createRecursiveWhileRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.IterativeWhileRule <em>Iterative While Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.IterativeWhileRule
   * @generated
   */
  public Adapter createIterativeWhileRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.asmeta.xt.asmetal.BinaryOperation <em>Binary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.asmeta.xt.asmetal.BinaryOperation
   * @generated
   */
  public Adapter createBinaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AsmetalAdapterFactory
