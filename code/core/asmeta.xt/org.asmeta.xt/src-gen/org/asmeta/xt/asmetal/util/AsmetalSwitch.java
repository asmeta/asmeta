/**
 * generated by Xtext 2.32.0
 */
package org.asmeta.xt.asmetal.util;

import org.asmeta.xt.asmetal.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.asmeta.xt.asmetal.AsmetalPackage
 * @generated
 */
public class AsmetalSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AsmetalPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AsmetalSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AsmetalPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AsmetalPackage.ASM:
      {
        Asm asm = (Asm)theEObject;
        T result = caseAsm(asm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.HEADER:
      {
        Header header = (Header)theEObject;
        T result = caseHeader(header);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.IMPORT_CLAUSE:
      {
        ImportClause importClause = (ImportClause)theEObject;
        T result = caseImportClause(importClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.IMPORT_DATA:
      {
        importData importData = (importData)theEObject;
        T result = caseimportData(importData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXPORT_CLAUSE:
      {
        ExportClause exportClause = (ExportClause)theEObject;
        T result = caseExportClause(exportClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SIGNATURE:
      {
        Signature signature = (Signature)theEObject;
        T result = caseSignature(signature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INITIALIZATION:
      {
        Initialization initialization = (Initialization)theEObject;
        T result = caseInitialization(initialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DOMAIN_INITIALIZATION:
      {
        DomainInitialization domainInitialization = (DomainInitialization)theEObject;
        T result = caseDomainInitialization(domainInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FUNCTION_INITIALIZATION:
      {
        FunctionInitialization functionInitialization = (FunctionInitialization)theEObject;
        T result = caseFunctionInitialization(functionInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.AGENT_INITIALIZATION:
      {
        AgentInitialization agentInitialization = (AgentInitialization)theEObject;
        T result = caseAgentInitialization(agentInitialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BODY:
      {
        Body body = (Body)theEObject;
        T result = caseBody(body);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DOMAIN_DEFINITION:
      {
        DomainDefinition domainDefinition = (DomainDefinition)theEObject;
        T result = caseDomainDefinition(domainDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FUNCTION_DEFINITION:
      {
        FunctionDefinition functionDefinition = (FunctionDefinition)theEObject;
        T result = caseFunctionDefinition(functionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RULE_DECLARATION:
      {
        RuleDeclaration ruleDeclaration = (RuleDeclaration)theEObject;
        T result = caseRuleDeclaration(ruleDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MACRO_DECLARATION:
      {
        MacroDeclaration macroDeclaration = (MacroDeclaration)theEObject;
        T result = caseMacroDeclaration(macroDeclaration);
        if (result == null) result = caseRuleDeclaration(macroDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_DECLARATION:
      {
        TurboDeclaration turboDeclaration = (TurboDeclaration)theEObject;
        T result = caseTurboDeclaration(turboDeclaration);
        if (result == null) result = caseRuleDeclaration(turboDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TEMPORAL_PROPERTY:
      {
        TemporalProperty temporalProperty = (TemporalProperty)theEObject;
        T result = caseTemporalProperty(temporalProperty);
        if (result == null) result = caseProperty(temporalProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INVARIANT:
      {
        Invariant invariant = (Invariant)theEObject;
        T result = caseInvariant(invariant);
        if (result == null) result = caseProperty(invariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INVARIANT_ELEMENT:
      {
        InvariantElement invariantElement = (InvariantElement)theEObject;
        T result = caseInvariantElement(invariantElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CTL_SPEC:
      {
        CtlSpec ctlSpec = (CtlSpec)theEObject;
        T result = caseCtlSpec(ctlSpec);
        if (result == null) result = caseTemporalProperty(ctlSpec);
        if (result == null) result = caseProperty(ctlSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.LTL_SPEC:
      {
        LtlSpec ltlSpec = (LtlSpec)theEObject;
        T result = caseLtlSpec(ltlSpec);
        if (result == null) result = caseTemporalProperty(ltlSpec);
        if (result == null) result = caseProperty(ltlSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FAIRNESS_CONSTRAINT:
      {
        FairnessConstraint fairnessConstraint = (FairnessConstraint)theEObject;
        T result = caseFairnessConstraint(fairnessConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.JUSTICE_CONSTRAINT:
      {
        JusticeConstraint justiceConstraint = (JusticeConstraint)theEObject;
        T result = caseJusticeConstraint(justiceConstraint);
        if (result == null) result = caseFairnessConstraint(justiceConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.COMPASSION_CONSTRAINT:
      {
        CompassionConstraint compassionConstraint = (CompassionConstraint)theEObject;
        T result = caseCompassionConstraint(compassionConstraint);
        if (result == null) result = caseFairnessConstraint(compassionConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INVARIANT_CONSTRAINT:
      {
        InvariantConstraint invariantConstraint = (InvariantConstraint)theEObject;
        T result = caseInvariantConstraint(invariantConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DOMAIN:
      {
        Domain domain = (Domain)theEObject;
        T result = caseDomain(domain);
        if (result == null) result = caseDomainTerm(domain);
        if (result == null) result = caseTerm(domain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CONCRETE_DOMAIN:
      {
        ConcreteDomain concreteDomain = (ConcreteDomain)theEObject;
        T result = caseConcreteDomain(concreteDomain);
        if (result == null) result = caseDomain(concreteDomain);
        if (result == null) result = caseDomainTerm(concreteDomain);
        if (result == null) result = caseTerm(concreteDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TYPE_DOMAIN:
      {
        TypeDomain typeDomain = (TypeDomain)theEObject;
        T result = caseTypeDomain(typeDomain);
        if (result == null) result = caseDomain(typeDomain);
        if (result == null) result = caseDomainTerm(typeDomain);
        if (result == null) result = caseTerm(typeDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ANY_DOMAIN:
      {
        AnyDomain anyDomain = (AnyDomain)theEObject;
        T result = caseAnyDomain(anyDomain);
        if (result == null) result = caseTypeDomain(anyDomain);
        if (result == null) result = caseDomain(anyDomain);
        if (result == null) result = caseDomainTerm(anyDomain);
        if (result == null) result = caseTerm(anyDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_TD:
      {
        BasicTD basicTD = (BasicTD)theEObject;
        T result = caseBasicTD(basicTD);
        if (result == null) result = caseTypeDomain(basicTD);
        if (result == null) result = caseDomain(basicTD);
        if (result == null) result = caseDomainTerm(basicTD);
        if (result == null) result = caseTerm(basicTD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.STANDARD_DOMAIN:
      {
        StandardDomain standardDomain = (StandardDomain)theEObject;
        T result = caseStandardDomain(standardDomain);
        if (result == null) result = caseBasicTD(standardDomain);
        if (result == null) result = caseTypeDomain(standardDomain);
        if (result == null) result = caseDomain(standardDomain);
        if (result == null) result = caseDomainTerm(standardDomain);
        if (result == null) result = caseTerm(standardDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INTEGER_DOMAIN:
      {
        IntegerDomain integerDomain = (IntegerDomain)theEObject;
        T result = caseIntegerDomain(integerDomain);
        if (result == null) result = caseStandardDomain(integerDomain);
        if (result == null) result = caseBasicTD(integerDomain);
        if (result == null) result = caseTypeDomain(integerDomain);
        if (result == null) result = caseDomain(integerDomain);
        if (result == null) result = caseDomainTerm(integerDomain);
        if (result == null) result = caseTerm(integerDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.REAL_DOMAIN:
      {
        RealDomain realDomain = (RealDomain)theEObject;
        T result = caseRealDomain(realDomain);
        if (result == null) result = caseStandardDomain(realDomain);
        if (result == null) result = caseBasicTD(realDomain);
        if (result == null) result = caseTypeDomain(realDomain);
        if (result == null) result = caseDomain(realDomain);
        if (result == null) result = caseDomainTerm(realDomain);
        if (result == null) result = caseTerm(realDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.STRING_DOMAIN:
      {
        StringDomain stringDomain = (StringDomain)theEObject;
        T result = caseStringDomain(stringDomain);
        if (result == null) result = caseStandardDomain(stringDomain);
        if (result == null) result = caseBasicTD(stringDomain);
        if (result == null) result = caseTypeDomain(stringDomain);
        if (result == null) result = caseDomain(stringDomain);
        if (result == null) result = caseDomainTerm(stringDomain);
        if (result == null) result = caseTerm(stringDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.NATURAL_DOMAIN:
      {
        NaturalDomain naturalDomain = (NaturalDomain)theEObject;
        T result = caseNaturalDomain(naturalDomain);
        if (result == null) result = caseStandardDomain(naturalDomain);
        if (result == null) result = caseBasicTD(naturalDomain);
        if (result == null) result = caseTypeDomain(naturalDomain);
        if (result == null) result = caseDomain(naturalDomain);
        if (result == null) result = caseDomainTerm(naturalDomain);
        if (result == null) result = caseTerm(naturalDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CHAR_DOMAIN:
      {
        CharDomain charDomain = (CharDomain)theEObject;
        T result = caseCharDomain(charDomain);
        if (result == null) result = caseStandardDomain(charDomain);
        if (result == null) result = caseBasicTD(charDomain);
        if (result == null) result = caseTypeDomain(charDomain);
        if (result == null) result = caseDomain(charDomain);
        if (result == null) result = caseDomainTerm(charDomain);
        if (result == null) result = caseTerm(charDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.COMPLEX_DOMAIN:
      {
        ComplexDomain complexDomain = (ComplexDomain)theEObject;
        T result = caseComplexDomain(complexDomain);
        if (result == null) result = caseStandardDomain(complexDomain);
        if (result == null) result = caseBasicTD(complexDomain);
        if (result == null) result = caseTypeDomain(complexDomain);
        if (result == null) result = caseDomain(complexDomain);
        if (result == null) result = caseDomainTerm(complexDomain);
        if (result == null) result = caseTerm(complexDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BOOLEAN_DOMAIN:
      {
        BooleanDomain booleanDomain = (BooleanDomain)theEObject;
        T result = caseBooleanDomain(booleanDomain);
        if (result == null) result = caseStandardDomain(booleanDomain);
        if (result == null) result = caseBasicTD(booleanDomain);
        if (result == null) result = caseTypeDomain(booleanDomain);
        if (result == null) result = caseDomain(booleanDomain);
        if (result == null) result = caseDomainTerm(booleanDomain);
        if (result == null) result = caseTerm(booleanDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.UNDEF_DOMAIN:
      {
        UndefDomain undefDomain = (UndefDomain)theEObject;
        T result = caseUndefDomain(undefDomain);
        if (result == null) result = caseStandardDomain(undefDomain);
        if (result == null) result = caseBasicTD(undefDomain);
        if (result == null) result = caseTypeDomain(undefDomain);
        if (result == null) result = caseDomain(undefDomain);
        if (result == null) result = caseDomainTerm(undefDomain);
        if (result == null) result = caseTerm(undefDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ABSTRACT_TD:
      {
        AbstractTD abstractTD = (AbstractTD)theEObject;
        T result = caseAbstractTD(abstractTD);
        if (result == null) result = caseTypeDomain(abstractTD);
        if (result == null) result = caseDomain(abstractTD);
        if (result == null) result = caseDomainTerm(abstractTD);
        if (result == null) result = caseTerm(abstractTD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.AGENT_DOMAIN:
      {
        AgentDomain agentDomain = (AgentDomain)theEObject;
        T result = caseAgentDomain(agentDomain);
        if (result == null) result = caseAbstractTD(agentDomain);
        if (result == null) result = caseTypeDomain(agentDomain);
        if (result == null) result = caseDomain(agentDomain);
        if (result == null) result = caseDomainTerm(agentDomain);
        if (result == null) result = caseTerm(agentDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RESERVE_DOMAIN:
      {
        ReserveDomain reserveDomain = (ReserveDomain)theEObject;
        T result = caseReserveDomain(reserveDomain);
        if (result == null) result = caseAbstractTD(reserveDomain);
        if (result == null) result = caseTypeDomain(reserveDomain);
        if (result == null) result = caseDomain(reserveDomain);
        if (result == null) result = caseDomainTerm(reserveDomain);
        if (result == null) result = caseTerm(reserveDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ENUM_TD:
      {
        EnumTD enumTD = (EnumTD)theEObject;
        T result = caseEnumTD(enumTD);
        if (result == null) result = caseTypeDomain(enumTD);
        if (result == null) result = caseDomain(enumTD);
        if (result == null) result = caseDomainTerm(enumTD);
        if (result == null) result = caseTerm(enumTD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ENUM_ELEMENT:
      {
        EnumElement enumElement = (EnumElement)theEObject;
        T result = caseEnumElement(enumElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.STRUCTURED_TD:
      {
        StructuredTD structuredTD = (StructuredTD)theEObject;
        T result = caseStructuredTD(structuredTD);
        if (result == null) result = caseTypeDomain(structuredTD);
        if (result == null) result = caseDomain(structuredTD);
        if (result == null) result = caseDomainTerm(structuredTD);
        if (result == null) result = caseTerm(structuredTD);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RULE_DOMAIN:
      {
        RuleDomain ruleDomain = (RuleDomain)theEObject;
        T result = caseRuleDomain(ruleDomain);
        if (result == null) result = caseStructuredTD(ruleDomain);
        if (result == null) result = caseTypeDomain(ruleDomain);
        if (result == null) result = caseDomain(ruleDomain);
        if (result == null) result = caseDomainTerm(ruleDomain);
        if (result == null) result = caseTerm(ruleDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.PRODUCT_DOMAIN:
      {
        ProductDomain productDomain = (ProductDomain)theEObject;
        T result = caseProductDomain(productDomain);
        if (result == null) result = caseStructuredTD(productDomain);
        if (result == null) result = caseTypeDomain(productDomain);
        if (result == null) result = caseDomain(productDomain);
        if (result == null) result = caseDomainTerm(productDomain);
        if (result == null) result = caseTerm(productDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SEQUENCE_DOMAIN:
      {
        SequenceDomain sequenceDomain = (SequenceDomain)theEObject;
        T result = caseSequenceDomain(sequenceDomain);
        if (result == null) result = caseStructuredTD(sequenceDomain);
        if (result == null) result = caseTypeDomain(sequenceDomain);
        if (result == null) result = caseDomain(sequenceDomain);
        if (result == null) result = caseDomainTerm(sequenceDomain);
        if (result == null) result = caseTerm(sequenceDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.POWERSET_DOMAIN:
      {
        PowersetDomain powersetDomain = (PowersetDomain)theEObject;
        T result = casePowersetDomain(powersetDomain);
        if (result == null) result = caseStructuredTD(powersetDomain);
        if (result == null) result = caseTypeDomain(powersetDomain);
        if (result == null) result = caseDomain(powersetDomain);
        if (result == null) result = caseDomainTerm(powersetDomain);
        if (result == null) result = caseTerm(powersetDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BAG_DOMAIN:
      {
        BagDomain bagDomain = (BagDomain)theEObject;
        T result = caseBagDomain(bagDomain);
        if (result == null) result = caseStructuredTD(bagDomain);
        if (result == null) result = caseTypeDomain(bagDomain);
        if (result == null) result = caseDomain(bagDomain);
        if (result == null) result = caseDomainTerm(bagDomain);
        if (result == null) result = caseTerm(bagDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MAP_DOMAIN:
      {
        MapDomain mapDomain = (MapDomain)theEObject;
        T result = caseMapDomain(mapDomain);
        if (result == null) result = caseStructuredTD(mapDomain);
        if (result == null) result = caseTypeDomain(mapDomain);
        if (result == null) result = caseDomain(mapDomain);
        if (result == null) result = caseDomainTerm(mapDomain);
        if (result == null) result = caseTerm(mapDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_FUNCTION:
      {
        BasicFunction basicFunction = (BasicFunction)theEObject;
        T result = caseBasicFunction(basicFunction);
        if (result == null) result = caseFunction(basicFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DERIVED_FUNCTION:
      {
        DerivedFunction derivedFunction = (DerivedFunction)theEObject;
        T result = caseDerivedFunction(derivedFunction);
        if (result == null) result = caseFunction(derivedFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.STATIC_FUNCTION:
      {
        StaticFunction staticFunction = (StaticFunction)theEObject;
        T result = caseStaticFunction(staticFunction);
        if (result == null) result = caseBasicFunction(staticFunction);
        if (result == null) result = caseFunction(staticFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DYNAMIC_FUNCTION:
      {
        DynamicFunction dynamicFunction = (DynamicFunction)theEObject;
        T result = caseDynamicFunction(dynamicFunction);
        if (result == null) result = caseBasicFunction(dynamicFunction);
        if (result == null) result = caseFunction(dynamicFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.LOCAL_FUNCTION:
      {
        LocalFunction localFunction = (LocalFunction)theEObject;
        T result = caseLocalFunction(localFunction);
        if (result == null) result = caseDynamicFunction(localFunction);
        if (result == null) result = caseBasicFunction(localFunction);
        if (result == null) result = caseFunction(localFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CONTROLLED_FUNCTION:
      {
        ControlledFunction controlledFunction = (ControlledFunction)theEObject;
        T result = caseControlledFunction(controlledFunction);
        if (result == null) result = caseDynamicFunction(controlledFunction);
        if (result == null) result = caseBasicFunction(controlledFunction);
        if (result == null) result = caseFunction(controlledFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SHARED_FUNCTION:
      {
        SharedFunction sharedFunction = (SharedFunction)theEObject;
        T result = caseSharedFunction(sharedFunction);
        if (result == null) result = caseDynamicFunction(sharedFunction);
        if (result == null) result = caseBasicFunction(sharedFunction);
        if (result == null) result = caseFunction(sharedFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MONITORED_FUNCTION:
      {
        MonitoredFunction monitoredFunction = (MonitoredFunction)theEObject;
        T result = caseMonitoredFunction(monitoredFunction);
        if (result == null) result = caseDynamicFunction(monitoredFunction);
        if (result == null) result = caseBasicFunction(monitoredFunction);
        if (result == null) result = caseFunction(monitoredFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.OUT_FUNCTION:
      {
        OutFunction outFunction = (OutFunction)theEObject;
        T result = caseOutFunction(outFunction);
        if (result == null) result = caseDynamicFunction(outFunction);
        if (result == null) result = caseBasicFunction(outFunction);
        if (result == null) result = caseFunction(outFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TERM:
      {
        Term term = (Term)theEObject;
        T result = caseTerm(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DOMAIN_TERM:
      {
        DomainTerm domainTerm = (DomainTerm)theEObject;
        T result = caseDomainTerm(domainTerm);
        if (result == null) result = caseTerm(domainTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseTerm(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_EXPR:
      {
        basicExpr basicExpr = (basicExpr)theEObject;
        T result = casebasicExpr(basicExpr);
        if (result == null) result = caseExpression(basicExpr);
        if (result == null) result = caseTerm(basicExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_TERM:
      {
        BasicTerm basicTerm = (BasicTerm)theEObject;
        T result = caseBasicTerm(basicTerm);
        if (result == null) result = casebasicExpr(basicTerm);
        if (result == null) result = caseExpression(basicTerm);
        if (result == null) result = caseTerm(basicTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FUNCTION_TERM:
      {
        FunctionTerm functionTerm = (FunctionTerm)theEObject;
        T result = caseFunctionTerm(functionTerm);
        if (result == null) result = caseBasicTerm(functionTerm);
        if (result == null) result = casebasicExpr(functionTerm);
        if (result == null) result = caseExpression(functionTerm);
        if (result == null) result = caseTerm(functionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.LOCATION_TERM:
      {
        LocationTerm locationTerm = (LocationTerm)theEObject;
        T result = caseLocationTerm(locationTerm);
        if (result == null) result = caseBasicTerm(locationTerm);
        if (result == null) result = casebasicExpr(locationTerm);
        if (result == null) result = caseExpression(locationTerm);
        if (result == null) result = caseTerm(locationTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.VARIABLE_TERM:
      {
        VariableTerm variableTerm = (VariableTerm)theEObject;
        T result = caseVariableTerm(variableTerm);
        if (result == null) result = caseBasicTerm(variableTerm);
        if (result == null) result = casebasicExpr(variableTerm);
        if (result == null) result = caseExpression(variableTerm);
        if (result == null) result = caseTerm(variableTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CONSTANT_TERM:
      {
        ConstantTerm constantTerm = (ConstantTerm)theEObject;
        T result = caseConstantTerm(constantTerm);
        if (result == null) result = caseBasicTerm(constantTerm);
        if (result == null) result = casebasicExpr(constantTerm);
        if (result == null) result = caseExpression(constantTerm);
        if (result == null) result = caseTerm(constantTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.NUMBER_TERM:
      {
        NumberTerm numberTerm = (NumberTerm)theEObject;
        T result = caseNumberTerm(numberTerm);
        if (result == null) result = caseConstantTerm(numberTerm);
        if (result == null) result = caseBasicTerm(numberTerm);
        if (result == null) result = casebasicExpr(numberTerm);
        if (result == null) result = caseExpression(numberTerm);
        if (result == null) result = caseTerm(numberTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BOOLEAN_TERM:
      {
        BooleanTerm booleanTerm = (BooleanTerm)theEObject;
        T result = caseBooleanTerm(booleanTerm);
        if (result == null) result = caseConstantTerm(booleanTerm);
        if (result == null) result = caseBasicTerm(booleanTerm);
        if (result == null) result = casebasicExpr(booleanTerm);
        if (result == null) result = caseExpression(booleanTerm);
        if (result == null) result = caseTerm(booleanTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.UNDEF_TERM:
      {
        UndefTerm undefTerm = (UndefTerm)theEObject;
        T result = caseUndefTerm(undefTerm);
        if (result == null) result = caseConstantTerm(undefTerm);
        if (result == null) result = caseBasicTerm(undefTerm);
        if (result == null) result = casebasicExpr(undefTerm);
        if (result == null) result = caseExpression(undefTerm);
        if (result == null) result = caseTerm(undefTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.COMPLEX_TERM:
      {
        ComplexTerm complexTerm = (ComplexTerm)theEObject;
        T result = caseComplexTerm(complexTerm);
        if (result == null) result = caseConstantTerm(complexTerm);
        if (result == null) result = caseBasicTerm(complexTerm);
        if (result == null) result = casebasicExpr(complexTerm);
        if (result == null) result = caseExpression(complexTerm);
        if (result == null) result = caseTerm(complexTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.NATURAL_TERM:
      {
        NaturalTerm naturalTerm = (NaturalTerm)theEObject;
        T result = caseNaturalTerm(naturalTerm);
        if (result == null) result = caseConstantTerm(naturalTerm);
        if (result == null) result = caseBasicTerm(naturalTerm);
        if (result == null) result = casebasicExpr(naturalTerm);
        if (result == null) result = caseExpression(naturalTerm);
        if (result == null) result = caseTerm(naturalTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CHAR_TERM:
      {
        CharTerm charTerm = (CharTerm)theEObject;
        T result = caseCharTerm(charTerm);
        if (result == null) result = caseConstantTerm(charTerm);
        if (result == null) result = caseBasicTerm(charTerm);
        if (result == null) result = casebasicExpr(charTerm);
        if (result == null) result = caseExpression(charTerm);
        if (result == null) result = caseTerm(charTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.STRING_TERM:
      {
        StringTerm stringTerm = (StringTerm)theEObject;
        T result = caseStringTerm(stringTerm);
        if (result == null) result = caseConstantTerm(stringTerm);
        if (result == null) result = caseBasicTerm(stringTerm);
        if (result == null) result = casebasicExpr(stringTerm);
        if (result == null) result = caseExpression(stringTerm);
        if (result == null) result = caseTerm(stringTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ENUM_TERM:
      {
        EnumTerm enumTerm = (EnumTerm)theEObject;
        T result = caseEnumTerm(enumTerm);
        if (result == null) result = caseConstantTerm(enumTerm);
        if (result == null) result = caseBasicTerm(enumTerm);
        if (result == null) result = casebasicExpr(enumTerm);
        if (result == null) result = caseExpression(enumTerm);
        if (result == null) result = caseTerm(enumTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.REAL_TERM:
      {
        RealTerm realTerm = (RealTerm)theEObject;
        T result = caseRealTerm(realTerm);
        if (result == null) result = caseNumberTerm(realTerm);
        if (result == null) result = caseConstantTerm(realTerm);
        if (result == null) result = caseBasicTerm(realTerm);
        if (result == null) result = casebasicExpr(realTerm);
        if (result == null) result = caseExpression(realTerm);
        if (result == null) result = caseTerm(realTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.INTEGER_TERM:
      {
        IntegerTerm integerTerm = (IntegerTerm)theEObject;
        T result = caseIntegerTerm(integerTerm);
        if (result == null) result = caseNumberTerm(integerTerm);
        if (result == null) result = caseConstantTerm(integerTerm);
        if (result == null) result = caseBasicTerm(integerTerm);
        if (result == null) result = casebasicExpr(integerTerm);
        if (result == null) result = caseExpression(integerTerm);
        if (result == null) result = caseTerm(integerTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXTENDED_TERM:
      {
        ExtendedTerm extendedTerm = (ExtendedTerm)theEObject;
        T result = caseExtendedTerm(extendedTerm);
        if (result == null) result = caseTerm(extendedTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CONDITIONAL_TERM:
      {
        ConditionalTerm conditionalTerm = (ConditionalTerm)theEObject;
        T result = caseConditionalTerm(conditionalTerm);
        if (result == null) result = caseExtendedTerm(conditionalTerm);
        if (result == null) result = caseTerm(conditionalTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CASE_TERM:
      {
        CaseTerm caseTerm = (CaseTerm)theEObject;
        T result = caseCaseTerm(caseTerm);
        if (result == null) result = caseExtendedTerm(caseTerm);
        if (result == null) result = caseTerm(caseTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TUPLE_TERM:
      {
        TupleTerm tupleTerm = (TupleTerm)theEObject;
        T result = caseTupleTerm(tupleTerm);
        if (result == null) result = caseExtendedTerm(tupleTerm);
        if (result == null) result = caseTerm(tupleTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.COLLECTION_TERM:
      {
        CollectionTerm collectionTerm = (CollectionTerm)theEObject;
        T result = caseCollectionTerm(collectionTerm);
        if (result == null) result = caseExtendedTerm(collectionTerm);
        if (result == null) result = caseTerm(collectionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SEQUENCE_TERM:
      {
        SequenceTerm sequenceTerm = (SequenceTerm)theEObject;
        T result = caseSequenceTerm(sequenceTerm);
        if (result == null) result = caseCollectionTerm(sequenceTerm);
        if (result == null) result = caseExtendedTerm(sequenceTerm);
        if (result == null) result = caseTerm(sequenceTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MAP_TERM:
      {
        MapTerm mapTerm = (MapTerm)theEObject;
        T result = caseMapTerm(mapTerm);
        if (result == null) result = caseCollectionTerm(mapTerm);
        if (result == null) result = caseExtendedTerm(mapTerm);
        if (result == null) result = caseTerm(mapTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SET_TERM:
      {
        SetTerm setTerm = (SetTerm)theEObject;
        T result = caseSetTerm(setTerm);
        if (result == null) result = caseCollectionTerm(setTerm);
        if (result == null) result = caseExtendedTerm(setTerm);
        if (result == null) result = caseTerm(setTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BAG_TERM:
      {
        BagTerm bagTerm = (BagTerm)theEObject;
        T result = caseBagTerm(bagTerm);
        if (result == null) result = caseCollectionTerm(bagTerm);
        if (result == null) result = caseExtendedTerm(bagTerm);
        if (result == null) result = caseTerm(bagTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.VARIABLE_BINDING_TERM:
      {
        VariableBindingTerm variableBindingTerm = (VariableBindingTerm)theEObject;
        T result = caseVariableBindingTerm(variableBindingTerm);
        if (result == null) result = caseExtendedTerm(variableBindingTerm);
        if (result == null) result = caseTerm(variableBindingTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FINITE_QUANTIFICATION_TERM:
      {
        FiniteQuantificationTerm finiteQuantificationTerm = (FiniteQuantificationTerm)theEObject;
        T result = caseFiniteQuantificationTerm(finiteQuantificationTerm);
        if (result == null) result = casebasicExpr(finiteQuantificationTerm);
        if (result == null) result = caseVariableBindingTerm(finiteQuantificationTerm);
        if (result == null) result = caseExpression(finiteQuantificationTerm);
        if (result == null) result = caseExtendedTerm(finiteQuantificationTerm);
        if (result == null) result = caseTerm(finiteQuantificationTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXIST_UNIQUE_TERM:
      {
        ExistUniqueTerm existUniqueTerm = (ExistUniqueTerm)theEObject;
        T result = caseExistUniqueTerm(existUniqueTerm);
        if (result == null) result = caseFiniteQuantificationTerm(existUniqueTerm);
        if (result == null) result = casebasicExpr(existUniqueTerm);
        if (result == null) result = caseVariableBindingTerm(existUniqueTerm);
        if (result == null) result = caseExpression(existUniqueTerm);
        if (result == null) result = caseExtendedTerm(existUniqueTerm);
        if (result == null) result = caseTerm(existUniqueTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXIST_TERM:
      {
        ExistTerm existTerm = (ExistTerm)theEObject;
        T result = caseExistTerm(existTerm);
        if (result == null) result = caseFiniteQuantificationTerm(existTerm);
        if (result == null) result = casebasicExpr(existTerm);
        if (result == null) result = caseVariableBindingTerm(existTerm);
        if (result == null) result = caseExpression(existTerm);
        if (result == null) result = caseExtendedTerm(existTerm);
        if (result == null) result = caseTerm(existTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FORALL_TERM:
      {
        ForallTerm forallTerm = (ForallTerm)theEObject;
        T result = caseForallTerm(forallTerm);
        if (result == null) result = caseFiniteQuantificationTerm(forallTerm);
        if (result == null) result = casebasicExpr(forallTerm);
        if (result == null) result = caseVariableBindingTerm(forallTerm);
        if (result == null) result = caseExpression(forallTerm);
        if (result == null) result = caseExtendedTerm(forallTerm);
        if (result == null) result = caseTerm(forallTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.LET_TERM:
      {
        LetTerm letTerm = (LetTerm)theEObject;
        T result = caseLetTerm(letTerm);
        if (result == null) result = caseVariableBindingTerm(letTerm);
        if (result == null) result = caseExtendedTerm(letTerm);
        if (result == null) result = caseTerm(letTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.COMPREHENSION_TERM:
      {
        ComprehensionTerm comprehensionTerm = (ComprehensionTerm)theEObject;
        T result = caseComprehensionTerm(comprehensionTerm);
        if (result == null) result = caseVariableBindingTerm(comprehensionTerm);
        if (result == null) result = caseExtendedTerm(comprehensionTerm);
        if (result == null) result = caseTerm(comprehensionTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SET_CT:
      {
        SetCT setCT = (SetCT)theEObject;
        T result = caseSetCT(setCT);
        if (result == null) result = caseComprehensionTerm(setCT);
        if (result == null) result = caseVariableBindingTerm(setCT);
        if (result == null) result = caseExtendedTerm(setCT);
        if (result == null) result = caseTerm(setCT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MAP_CT:
      {
        MapCT mapCT = (MapCT)theEObject;
        T result = caseMapCT(mapCT);
        if (result == null) result = caseComprehensionTerm(mapCT);
        if (result == null) result = caseVariableBindingTerm(mapCT);
        if (result == null) result = caseExtendedTerm(mapCT);
        if (result == null) result = caseTerm(mapCT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SEQUENCE_CT:
      {
        SequenceCT sequenceCT = (SequenceCT)theEObject;
        T result = caseSequenceCT(sequenceCT);
        if (result == null) result = caseComprehensionTerm(sequenceCT);
        if (result == null) result = caseVariableBindingTerm(sequenceCT);
        if (result == null) result = caseExtendedTerm(sequenceCT);
        if (result == null) result = caseTerm(sequenceCT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BAG_CT:
      {
        BagCT bagCT = (BagCT)theEObject;
        T result = caseBagCT(bagCT);
        if (result == null) result = caseComprehensionTerm(bagCT);
        if (result == null) result = caseVariableBindingTerm(bagCT);
        if (result == null) result = caseExtendedTerm(bagCT);
        if (result == null) result = caseTerm(bagCT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RULE_AS_TERM:
      {
        RuleAsTerm ruleAsTerm = (RuleAsTerm)theEObject;
        T result = caseRuleAsTerm(ruleAsTerm);
        if (result == null) result = caseExtendedTerm(ruleAsTerm);
        if (result == null) result = caseTerm(ruleAsTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TERM_AS_RULE:
      {
        TermAsRule termAsRule = (TermAsRule)theEObject;
        T result = caseTermAsRule(termAsRule);
        if (result == null) result = caseRule(termAsRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_RULE:
      {
        BasicRule basicRule = (BasicRule)theEObject;
        T result = caseBasicRule(basicRule);
        if (result == null) result = caseRule(basicRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SKIP_RULE:
      {
        SkipRule skipRule = (SkipRule)theEObject;
        T result = caseSkipRule(skipRule);
        if (result == null) result = caseBasicRule(skipRule);
        if (result == null) result = caseRule(skipRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.UPDATE_RULE:
      {
        UpdateRule updateRule = (UpdateRule)theEObject;
        T result = caseUpdateRule(updateRule);
        if (result == null) result = caseRule(updateRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BLOCK_RULE:
      {
        BlockRule blockRule = (BlockRule)theEObject;
        T result = caseBlockRule(blockRule);
        if (result == null) result = caseBasicRule(blockRule);
        if (result == null) result = caseRule(blockRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CONDITIONAL_RULE:
      {
        ConditionalRule conditionalRule = (ConditionalRule)theEObject;
        T result = caseConditionalRule(conditionalRule);
        if (result == null) result = caseBasicRule(conditionalRule);
        if (result == null) result = caseRule(conditionalRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CHOOSE_RULE:
      {
        ChooseRule chooseRule = (ChooseRule)theEObject;
        T result = caseChooseRule(chooseRule);
        if (result == null) result = caseBasicRule(chooseRule);
        if (result == null) result = caseRule(chooseRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.FORALL_RULE:
      {
        ForallRule forallRule = (ForallRule)theEObject;
        T result = caseForallRule(forallRule);
        if (result == null) result = caseBasicRule(forallRule);
        if (result == null) result = caseRule(forallRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.LET_RULE:
      {
        LetRule letRule = (LetRule)theEObject;
        T result = caseLetRule(letRule);
        if (result == null) result = caseBasicRule(letRule);
        if (result == null) result = caseRule(letRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.MACRO_CALL_RULE:
      {
        MacroCallRule macroCallRule = (MacroCallRule)theEObject;
        T result = caseMacroCallRule(macroCallRule);
        if (result == null) result = caseBasicRule(macroCallRule);
        if (result == null) result = caseRule(macroCallRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.EXTEND_RULE:
      {
        ExtendRule extendRule = (ExtendRule)theEObject;
        T result = caseExtendRule(extendRule);
        if (result == null) result = caseBasicRule(extendRule);
        if (result == null) result = caseRule(extendRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_RULE:
      {
        TurboRule turboRule = (TurboRule)theEObject;
        T result = caseTurboRule(turboRule);
        if (result == null) result = caseRule(turboRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.SEQ_RULE:
      {
        SeqRule seqRule = (SeqRule)theEObject;
        T result = caseSeqRule(seqRule);
        if (result == null) result = caseTurboRule(seqRule);
        if (result == null) result = caseRule(seqRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ITERATE_RULE:
      {
        IterateRule iterateRule = (IterateRule)theEObject;
        T result = caseIterateRule(iterateRule);
        if (result == null) result = caseTurboRule(iterateRule);
        if (result == null) result = caseRule(iterateRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_CALL_RULE:
      {
        TurboCallRule turboCallRule = (TurboCallRule)theEObject;
        T result = caseTurboCallRule(turboCallRule);
        if (result == null) result = caseTurboRule(turboCallRule);
        if (result == null) result = caseRule(turboCallRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_RETURN_RULE:
      {
        TurboReturnRule turboReturnRule = (TurboReturnRule)theEObject;
        T result = caseTurboReturnRule(turboReturnRule);
        if (result == null) result = caseRule(turboReturnRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_LOCAL_STATE_RULE:
      {
        TurboLocalStateRule turboLocalStateRule = (TurboLocalStateRule)theEObject;
        T result = caseTurboLocalStateRule(turboLocalStateRule);
        if (result == null) result = caseTurboRule(turboLocalStateRule);
        if (result == null) result = caseRule(turboLocalStateRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.DERIVED_RULE:
      {
        DerivedRule derivedRule = (DerivedRule)theEObject;
        T result = caseDerivedRule(derivedRule);
        if (result == null) result = caseRule(derivedRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BASIC_DERIVED_RULE:
      {
        BasicDerivedRule basicDerivedRule = (BasicDerivedRule)theEObject;
        T result = caseBasicDerivedRule(basicDerivedRule);
        if (result == null) result = caseDerivedRule(basicDerivedRule);
        if (result == null) result = caseRule(basicDerivedRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.CASE_RULE:
      {
        CaseRule caseRule = (CaseRule)theEObject;
        T result = caseCaseRule(caseRule);
        if (result == null) result = caseBasicDerivedRule(caseRule);
        if (result == null) result = caseDerivedRule(caseRule);
        if (result == null) result = caseRule(caseRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.TURBO_DERIVED_RULE:
      {
        TurboDerivedRule turboDerivedRule = (TurboDerivedRule)theEObject;
        T result = caseTurboDerivedRule(turboDerivedRule);
        if (result == null) result = caseDerivedRule(turboDerivedRule);
        if (result == null) result = caseRule(turboDerivedRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.RECURSIVE_WHILE_RULE:
      {
        RecursiveWhileRule recursiveWhileRule = (RecursiveWhileRule)theEObject;
        T result = caseRecursiveWhileRule(recursiveWhileRule);
        if (result == null) result = caseTurboDerivedRule(recursiveWhileRule);
        if (result == null) result = caseDerivedRule(recursiveWhileRule);
        if (result == null) result = caseRule(recursiveWhileRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.ITERATIVE_WHILE_RULE:
      {
        IterativeWhileRule iterativeWhileRule = (IterativeWhileRule)theEObject;
        T result = caseIterativeWhileRule(iterativeWhileRule);
        if (result == null) result = caseTurboDerivedRule(iterativeWhileRule);
        if (result == null) result = caseDerivedRule(iterativeWhileRule);
        if (result == null) result = caseRule(iterativeWhileRule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AsmetalPackage.BINARY_OPERATION:
      {
        BinaryOperation binaryOperation = (BinaryOperation)theEObject;
        T result = caseBinaryOperation(binaryOperation);
        if (result == null) result = caseExpression(binaryOperation);
        if (result == null) result = caseTerm(binaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsm(Asm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Header</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Header</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHeader(Header object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportClause(ImportClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>import Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>import Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseimportData(importData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Export Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Export Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExportClause(ExportClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignature(Signature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialization(Initialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainInitialization(DomainInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionInitialization(FunctionInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgentInitialization(AgentInitialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBody(Body object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainDefinition(DomainDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDefinition(FunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleDeclaration(RuleDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Macro Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Macro Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMacroDeclaration(MacroDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboDeclaration(TurboDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Temporal Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Temporal Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemporalProperty(TemporalProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariant(Invariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantElement(InvariantElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ctl Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ctl Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCtlSpec(CtlSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ltl Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ltl Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLtlSpec(LtlSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fairness Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fairness Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFairnessConstraint(FairnessConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Justice Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Justice Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJusticeConstraint(JusticeConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compassion Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compassion Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompassionConstraint(CompassionConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantConstraint(InvariantConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomain(Domain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Concrete Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Concrete Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConcreteDomain(ConcreteDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDomain(TypeDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Any Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Any Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnyDomain(AnyDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic TD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic TD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicTD(BasicTD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardDomain(StandardDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerDomain(IntegerDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealDomain(RealDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringDomain(StringDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Natural Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Natural Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNaturalDomain(NaturalDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Char Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Char Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharDomain(CharDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexDomain(ComplexDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanDomain(BooleanDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Undef Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Undef Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUndefDomain(UndefDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract TD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract TD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractTD(AbstractTD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Agent Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Agent Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAgentDomain(AgentDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reserve Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reserve Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReserveDomain(ReserveDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum TD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum TD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumTD(EnumTD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumElement(EnumElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structured TD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structured TD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructuredTD(StructuredTD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleDomain(RuleDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Product Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Product Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProductDomain(ProductDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceDomain(SequenceDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Powerset Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Powerset Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowersetDomain(PowersetDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagDomain(BagDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapDomain(MapDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicFunction(BasicFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedFunction(DerivedFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Static Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Static Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStaticFunction(StaticFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dynamic Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dynamic Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDynamicFunction(DynamicFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Local Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Local Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocalFunction(LocalFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Controlled Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Controlled Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlledFunction(ControlledFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shared Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shared Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSharedFunction(SharedFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Monitored Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Monitored Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonitoredFunction(MonitoredFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutFunction(OutFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerm(Term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainTerm(DomainTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>basic Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>basic Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebasicExpr(basicExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicTerm(BasicTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionTerm(FunctionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Location Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Location Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocationTerm(LocationTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableTerm(VariableTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantTerm(ConstantTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberTerm(NumberTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanTerm(BooleanTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Undef Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Undef Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUndefTerm(UndefTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexTerm(ComplexTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Natural Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Natural Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNaturalTerm(NaturalTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Char Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Char Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharTerm(CharTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringTerm(StringTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumTerm(EnumTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Real Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Real Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRealTerm(RealTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Integer Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Integer Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntegerTerm(IntegerTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extended Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extended Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendedTerm(ExtendedTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalTerm(ConditionalTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseTerm(CaseTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleTerm(TupleTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionTerm(CollectionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceTerm(SequenceTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapTerm(MapTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetTerm(SetTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagTerm(BagTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Binding Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Binding Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableBindingTerm(VariableBindingTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Finite Quantification Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Finite Quantification Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFiniteQuantificationTerm(FiniteQuantificationTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist Unique Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist Unique Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistUniqueTerm(ExistUniqueTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistTerm(ExistTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forall Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forall Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForallTerm(ForallTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetTerm(LetTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comprehension Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comprehension Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComprehensionTerm(ComprehensionTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set CT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set CT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetCT(SetCT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map CT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map CT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapCT(MapCT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence CT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence CT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceCT(SequenceCT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bag CT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bag CT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBagCT(BagCT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule As Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule As Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRuleAsTerm(RuleAsTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Term As Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Term As Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTermAsRule(TermAsRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicRule(BasicRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Skip Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Skip Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSkipRule(SkipRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateRule(UpdateRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockRule(BlockRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalRule(ConditionalRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Choose Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Choose Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChooseRule(ChooseRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forall Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forall Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForallRule(ForallRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Let Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Let Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLetRule(LetRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Macro Call Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Macro Call Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMacroCallRule(MacroCallRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Extend Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Extend Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExtendRule(ExtendRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboRule(TurboRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Seq Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Seq Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSeqRule(SeqRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterate Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterate Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterateRule(IterateRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Call Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Call Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboCallRule(TurboCallRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Return Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Return Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboReturnRule(TurboReturnRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Local State Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Local State Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboLocalStateRule(TurboLocalStateRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Derived Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Derived Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDerivedRule(DerivedRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Derived Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Derived Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicDerivedRule(BasicDerivedRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseRule(CaseRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Turbo Derived Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Turbo Derived Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTurboDerivedRule(TurboDerivedRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Recursive While Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Recursive While Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecursiveWhileRule(RecursiveWhileRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Iterative While Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Iterative While Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIterativeWhileRule(IterativeWhileRule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryOperation(BinaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AsmetalSwitch
