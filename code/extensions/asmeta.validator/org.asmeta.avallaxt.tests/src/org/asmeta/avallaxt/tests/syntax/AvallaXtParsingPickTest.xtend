/*
 * generated by Xtext 2.14.0
 */
package org.asmeta.avallaxt.tests.syntax

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.asmeta.avallaxt.tests.AvallaInjectorProvider
import org.asmeta.avallaxt.avalla.Scenario
import org.asmeta.avallaxt.avalla.Set

@RunWith(XtextRunner)
@InjectWith(AvallaInjectorProvider)
class AvallaXtParsingPickTest {
	@Inject
	ParseHelper<Scenario> parseHelper
	
	@Test
	def void checkPick() {
		val result = parseHelper.parse('''
			scenario alpha
			load lll
			pick $p:= TEA;
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: �errors.join(", ")�''', errors.isEmpty)
	}
	
	@Test
	def void checkPickInRule() {
		val result = parseHelper.parse('''
			scenario alpha
			load lll
			pick $p in r_myRule := TEA;
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: �errors.join(", ")�''', errors.isEmpty)
	}
	
		@Test
	def void checkPickInRuleErr() {
		val result = parseHelper.parse('''
			scenario alpha
			load lll
			pick $p in myRule := TEA;
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue(errors.size == 1);
		Assert.assertTrue(errors.get(0).toString().contains("expecting RULE_RULE_NAME"));
	}
}
