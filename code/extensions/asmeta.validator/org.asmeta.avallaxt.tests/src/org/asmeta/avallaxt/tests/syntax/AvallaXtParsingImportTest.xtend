/*
 * generated by Xtext 2.14.0
 */
package org.asmeta.avallaxt.tests.syntax

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.asmeta.avallaxt.tests.AvallaInjectorProvider
import org.asmeta.avallaxt.avalla.Scenario
import org.asmeta.avallaxt.avalla.ExecBlock
import org.asmeta.avallaxt.avalla.Step
import org.asmeta.avallaxt.avalla.Block

@RunWith(XtextRunner)
@InjectWith(AvallaInjectorProvider)
// test of load
class AvallaXtParsingImportTest {
	@Inject
	ParseHelper<Scenario> parseHelper
	
	@Test
	def void importID() {
		test("spec");
	}

	@Test
	def void importASM() {
		test("spec.asm");
	}

	@Test
	def void importRelative() {
		test("4ooo/spec.asm");
	}

	@Test
	def void importAbsolute() {
		// anche assoluto vuole le virgolette
		test("\"c:\\temp\\spec.asm\"");
	}

	@Test
	def void importwithspaces() {		
		test("\"c:\\My Documents\\spec.asm\"");
	}

	@Test
	def void import2() {
		test("../../temp/aaa");
	}


	// test only the parser	
	def void test(String i){
		println("testing with " + i)
		val scenario = "scenario scen load "+ i;
		val result = parseHelper.parse(scenario)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: �errors.join(", ")�''', errors.isEmpty)
		Assert.assertEquals((result as Scenario).spec,i)
					
	}
}
