/**
 * generated by Xtext 2.16.0
 */
package org.asmeta.avallaxt.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.asmeta.avallaxt.avalla.Block;
import org.asmeta.avallaxt.avalla.Command;
import org.asmeta.avallaxt.avalla.Element;
import org.asmeta.avallaxt.services.AvallaGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class AvallaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AvallaGrammarAccess _avallaGrammarAccess;

  /**
   * def dispatch void format(Scenario scenario, extension IFormattableDocument document) {
   * // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
   * for (invariant : scenario.invariants) {
   * invariant.format
   * }
   * for (element : scenario.elements) {
   * element.format
   * }
   * }
   * 
   * def dispatch void format(Block block, extension IFormattableDocument document) {
   * // TODO: format HiddenRegions around keywords, attributes, cross references, etc.
   * for (element : block.elements) {
   * element.format
   * }
   * }
   */
  protected void _format(final Block block, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Block>append(block, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      this.textRegionExtensions.regionFor(block).keyword(this._avallaGrammarAccess.getBlockAccess().getBeginKeyword_0()), 
      this.textRegionExtensions.regionFor(block).keyword(this._avallaGrammarAccess.getBlockAccess().getEndKeyword_3()), _function_1);
    EList<Element> _elements = block.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  protected void _format(final Command command, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Command>prepend(command, _function);
  }

  public void format(final Object block, final IFormattableDocument document) {
    if (block instanceof XtextResource) {
      _format((XtextResource)block, document);
      return;
    } else if (block instanceof Block) {
      _format((Block)block, document);
      return;
    } else if (block instanceof Command) {
      _format((Command)block, document);
      return;
    } else if (block instanceof EObject) {
      _format((EObject)block, document);
      return;
    } else if (block == null) {
      _format((Void)null, document);
      return;
    } else if (block != null) {
      _format(block, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(block, document).toString());
    }
  }
}
