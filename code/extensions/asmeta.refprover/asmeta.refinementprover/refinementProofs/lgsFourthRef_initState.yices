(define-type LandingSet(scalar FRONT LEFT RIGHT LandingSetUNDEF))
(define-type HandleStatus(scalar UP DOWN HandleStatusUNDEF))
(define-type DoorStatus(scalar CLOSED OPENING OPEN CLOSING DoorStatusUNDEF))
(define-type GearStatus(scalar RETRACTED EXTENDING EXTENDED RETRACTING GearStatusUNDEF))
(define-type CylinderStatus(scalar CYLINDER_RETRACTED CYLINDER_EXTENDING CYLINDER_EXTENDED CYLINDER_RETRACTING CylinderStatusUNDEF))
;; functions - state 0
(define handle0::HandleStatus)
(define doors0::DoorStatus)
(define gears0::GearStatus)
(define cylindersDoors0::CylinderStatus)
(define cylindersGears0::CylinderStatus)
(define generalElectroValve0::bool)
(define openDoorsElectroValve0::bool)
(define closeDoorsElectroValve0::bool)
(define retractGearsElectroValve0::bool)
(define extendGearsElectroValve0::bool)
(define gearsExtended10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsRetracted10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsClosed10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsOpen10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsShockAbsorber10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsExtended00::bool)
(define gearsRetracted00::bool)
(define doorsClosed00::bool)
(define doorsOpen00::bool)
(define gearsShockAbsorber00::bool)
;; initial state
(assert (= doors0 CLOSED))
(assert (= gears0 EXTENDED))
(assert (= generalElectroValve0 false))
(assert (= extendGearsElectroValve0 false))
(assert (= retractGearsElectroValve0 false))
(assert (= openDoorsElectroValve0 false))
(assert (= closeDoorsElectroValve0 false))
;; derived functions definitions - state 0
(assert (= gearsExtended00 (and (gearsExtended10 FRONT) (gearsExtended10 LEFT) (gearsExtended10 RIGHT))))
(assert (= gearsRetracted00 (and (gearsRetracted10 FRONT) (gearsRetracted10 LEFT) (gearsRetracted10 RIGHT))))
(assert (= doorsClosed00 (and (doorsClosed10 FRONT) (doorsClosed10 LEFT) (doorsClosed10 RIGHT))))
(assert (= doorsOpen00 (and (doorsOpen10 FRONT) (doorsOpen10 LEFT) (doorsOpen10 RIGHT))))
(assert (= gearsShockAbsorber00 (and (gearsShockAbsorber10 FRONT) (gearsShockAbsorber10 LEFT) (gearsShockAbsorber10 RIGHT))))
(assert (= cylindersDoors0 (if (= doors0 OPEN) CYLINDER_EXTENDED (if (= doors0 OPENING) CYLINDER_EXTENDING (if (= doors0 CLOSING) CYLINDER_RETRACTING (if (= doors0 CLOSED) CYLINDER_RETRACTED CYLINDER_RETRACTED))))))
(assert (= cylindersGears0 (if (= gears0 RETRACTED) CYLINDER_RETRACTED (if (= gears0 EXTENDING) CYLINDER_EXTENDING (if (= gears0 EXTENDED) CYLINDER_EXTENDED (if (= gears0 RETRACTING) CYLINDER_RETRACTING CYLINDER_RETRACTING))))))
(check)
;; sat
;; functions - state 0
(define handler0::HandleStatus)
(define doorsr0::DoorStatus)
(define gearsr0::GearStatus)
(define cylindersDoorsr0::CylinderStatus)
(define cylindersGearsr0::CylinderStatus)
(define generalElectroValver0::bool)
(define openDoorsElectroValver0::bool)
(define closeDoorsElectroValver0::bool)
(define retractGearsElectroValver0::bool)
(define extendGearsElectroValver0::bool)
(define gearsExtendedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsRetractedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsClosedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsOpenr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsShockAbsorberr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsExtendedr00::bool)
(define gearsRetractedr00::bool)
(define doorsClosedr00::bool)
(define doorsOpenr00::bool)
(define gearsShockAbsorberr00::bool)
(define aGearExtendedr0::bool)
(define aGearRetractedr0::bool)
(define aDoorClosedr0::bool)
(define aDoorOpenr0::bool)
(define timeoutr0::bool)
(define anomalyr0::bool)
(define greenLightr0::bool)
(define orangeLightr0::bool)
(define redLightr0::bool)
;; initial state
(assert (= doorsr0 CLOSED))
(assert (= gearsr0 EXTENDED))
(assert (= generalElectroValver0 false))
(assert (= extendGearsElectroValver0 false))
(assert (= retractGearsElectroValver0 false))
(assert (= openDoorsElectroValver0 false))
(assert (= closeDoorsElectroValver0 false))
(assert (= anomalyr0 false))
;; derived functions definitions - state 0
(assert (= gearsExtendedr00 (and (gearsExtendedr10 FRONT) (gearsExtendedr10 LEFT) (gearsExtendedr10 RIGHT))))
(assert (= gearsRetractedr00 (and (gearsRetractedr10 FRONT) (gearsRetractedr10 LEFT) (gearsRetractedr10 RIGHT))))
(assert (= doorsClosedr00 (and (doorsClosedr10 FRONT) (doorsClosedr10 LEFT) (doorsClosedr10 RIGHT))))
(assert (= doorsOpenr00 (and (doorsOpenr10 FRONT) (doorsOpenr10 LEFT) (doorsOpenr10 RIGHT))))
(assert (= aGearExtendedr0 (or (gearsExtendedr10 FRONT) (gearsExtendedr10 LEFT) (gearsExtendedr10 RIGHT))))
(assert (= aGearRetractedr0 (or (gearsRetractedr10 FRONT) (gearsRetractedr10 LEFT) (gearsRetractedr10 RIGHT))))
(assert (= aDoorClosedr0 (or (doorsClosedr10 FRONT) (doorsClosedr10 LEFT) (doorsClosedr10 RIGHT))))
(assert (= aDoorOpenr0 (or (doorsOpenr10 FRONT) (doorsOpenr10 LEFT) (doorsOpenr10 RIGHT))))
(assert (= gearsShockAbsorberr00 (and (gearsShockAbsorberr10 FRONT) (gearsShockAbsorberr10 LEFT) (gearsShockAbsorberr10 RIGHT))))
(assert (= greenLightr0 (= gearsr0 EXTENDED)))
(assert (= orangeLightr0 (or (= gearsr0 EXTENDING) (= gearsr0 RETRACTING))))
(assert (= redLightr0 anomalyr0))
(assert (= cylindersDoorsr0 (if (= doorsr0 OPEN) CYLINDER_EXTENDED (if (= doorsr0 OPENING) CYLINDER_EXTENDING (if (= doorsr0 CLOSING) CYLINDER_RETRACTING (if (= doorsr0 CLOSED) CYLINDER_RETRACTED CYLINDER_RETRACTED))))))
(assert (= cylindersGearsr0 (if (= gearsr0 RETRACTED) CYLINDER_RETRACTED (if (= gearsr0 EXTENDING) CYLINDER_EXTENDING (if (= gearsr0 EXTENDED) CYLINDER_EXTENDED (if (= gearsr0 RETRACTING) CYLINDER_RETRACTING CYLINDER_RETRACTING))))))
(check)
;; sat
;; Initial state proof
(assert (not (and (= gears0 gearsr0) (= doors0 doorsr0))))
(check)
;; unsat
;; Initial states are conformant.