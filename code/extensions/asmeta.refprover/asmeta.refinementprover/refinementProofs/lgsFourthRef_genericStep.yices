(define-type LandingSet(scalar FRONT LEFT RIGHT LandingSetUNDEF))
(define-type HandleStatus(scalar UP DOWN HandleStatusUNDEF))
(define-type DoorStatus(scalar CLOSED OPENING OPEN CLOSING DoorStatusUNDEF))
(define-type GearStatus(scalar RETRACTED EXTENDING EXTENDED RETRACTING GearStatusUNDEF))
(define-type CylinderStatus(scalar CYLINDER_RETRACTED CYLINDER_EXTENDING CYLINDER_EXTENDED CYLINDER_RETRACTING CylinderStatusUNDEF))
;; functions - state 0
(define handle0::HandleStatus)
(define doors0::DoorStatus)
(define gears0::GearStatus)
(define cylindersDoors0::CylinderStatus)
(define cylindersGears0::CylinderStatus)
(define generalElectroValve0::bool)
(define openDoorsElectroValve0::bool)
(define closeDoorsElectroValve0::bool)
(define retractGearsElectroValve0::bool)
(define extendGearsElectroValve0::bool)
(define gearsExtended10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsRetracted10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsClosed10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsOpen10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsShockAbsorber10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsExtended00::bool)
(define gearsRetracted00::bool)
(define doorsClosed00::bool)
(define doorsOpen00::bool)
(define gearsShockAbsorber00::bool)
;; derived functions definitions - state 0
(assert (= gearsExtended00 (and (gearsExtended10 FRONT) (gearsExtended10 LEFT) (gearsExtended10 RIGHT))))
(assert (= gearsRetracted00 (and (gearsRetracted10 FRONT) (gearsRetracted10 LEFT) (gearsRetracted10 RIGHT))))
(assert (= doorsClosed00 (and (doorsClosed10 FRONT) (doorsClosed10 LEFT) (doorsClosed10 RIGHT))))
(assert (= doorsOpen00 (and (doorsOpen10 FRONT) (doorsOpen10 LEFT) (doorsOpen10 RIGHT))))
(assert (= gearsShockAbsorber00 (and (gearsShockAbsorber10 FRONT) (gearsShockAbsorber10 LEFT) (gearsShockAbsorber10 RIGHT))))
(assert (= cylindersDoors0 (if (= doors0 OPEN) CYLINDER_EXTENDED (if (= doors0 OPENING) CYLINDER_EXTENDING (if (= doors0 CLOSING) CYLINDER_RETRACTING (if (= doors0 CLOSED) CYLINDER_RETRACTED CYLINDER_RETRACTED))))))
(assert (= cylindersGears0 (if (= gears0 RETRACTED) CYLINDER_RETRACTED (if (= gears0 EXTENDING) CYLINDER_EXTENDING (if (= gears0 EXTENDED) CYLINDER_EXTENDED (if (= gears0 RETRACTING) CYLINDER_RETRACTING CYLINDER_RETRACTING))))))
(check)
;; sat
;; functions state 1
;; new controlled functions for next state - step 0
(define extendGearsElectroValve1::bool)
(define openDoorsElectroValve1::bool)
(define generalElectroValve1::bool)
(define closeDoorsElectroValve1::bool)
(define gears1::GearStatus)
(define retractGearsElectroValve1::bool)
(define doors1::DoorStatus)
;; logic variables - step 0
;; rules state 0
(assert (if (= handle0 UP) (if (/= gears0 RETRACTED) (and (=> (= doors0 CLOSED) (and (= generalElectroValve1 true) (= openDoorsElectroValve1 true) (= doors1 OPENING))) (=> (= doors0 CLOSING) (and (= closeDoorsElectroValve1 false) (= openDoorsElectroValve1 true) (= doors1 OPENING))) (=> (= doors0 OPENING) (=> doorsOpen00 (and (= openDoorsElectroValve1 false) (= doors1 OPEN)))) (=> (= doors0 OPEN) (and (=> (= gears0 EXTENDED) (=> gearsShockAbsorber00 (and (= retractGearsElectroValve1 true) (= gears1 RETRACTING)))) (=> (= gears0 RETRACTING) (=> gearsRetracted00 (and (= retractGearsElectroValve1 false) (= gears1 RETRACTED)))) (=> (= gears0 EXTENDING) (and (= extendGearsElectroValve1 false) (= retractGearsElectroValve1 true) (= gears1 RETRACTING)))))) (and (=> (= doors0 OPEN) (and (= closeDoorsElectroValve1 true) (= doors1 CLOSING))) (=> (= doors0 CLOSING) (=> doorsClosed00 (and (= generalElectroValve1 false) (= closeDoorsElectroValve1 false) (= doors1 CLOSED)))) (=> (= doors0 OPENING) (and (= closeDoorsElectroValve1 true) (= openDoorsElectroValve1 false) (= doors1 CLOSING))))) (if (/= gears0 EXTENDED) (and (=> (= doors0 CLOSED) (and (= generalElectroValve1 true) (= openDoorsElectroValve1 true) (= doors1 OPENING))) (=> (= doors0 OPENING) (=> doorsOpen00 (and (= openDoorsElectroValve1 false) (= doors1 OPEN)))) (=> (= doors0 CLOSING) (and (= closeDoorsElectroValve1 false) (= openDoorsElectroValve1 true) (= doors1 OPENING))) (=> (= doors0 OPEN) (and (=> (= gears0 RETRACTED) (and (= extendGearsElectroValve1 true) (= gears1 EXTENDING))) (=> (= gears0 EXTENDING) (=> gearsExtended00 (and (= extendGearsElectroValve1 false) (= gears1 EXTENDED)))) (=> (= gears0 RETRACTING) (and (= extendGearsElectroValve1 true) (= retractGearsElectroValve1 false) (= gears1 EXTENDING)))))) (and (=> (= doors0 OPEN) (and (= closeDoorsElectroValve1 true) (= doors1 CLOSING))) (=> (= doors0 CLOSING) (=> doorsClosed00 (and (= generalElectroValve1 false) (= closeDoorsElectroValve1 false) (= doors1 CLOSED)))) (=> (= doors0 OPENING) (and (= closeDoorsElectroValve1 true) (= openDoorsElectroValve1 false) (= doors1 CLOSING)))))))
;; unchanged functions - state 0
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 EXTENDED) gearsShockAbsorber00) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 RETRACTING) gearsRetracted00) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 EXTENDING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 RETRACTING)))) (= retractGearsElectroValve0 retractGearsElectroValve1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSED)) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 CLOSING) doorsClosed00) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSED)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 CLOSING) doorsClosed00))) (= generalElectroValve0 generalElectroValve1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 EXTENDING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 RETRACTED)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 EXTENDING) gearsExtended00) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 RETRACTING)))) (= extendGearsElectroValve0 extendGearsElectroValve1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 EXTENDED) gearsShockAbsorber00) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 RETRACTING) gearsRetracted00) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPEN) (= gears0 EXTENDING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 RETRACTED)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 EXTENDING) gearsExtended00) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPEN) (= gears0 RETRACTING)))) (= gears0 gears1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSED)) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSING)) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPENING) doorsOpen00) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 OPENING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSED)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPENING) doorsOpen00) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSING)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 OPENING)))) (= openDoorsElectroValve0 openDoorsElectroValve1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSING)) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 OPEN)) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 CLOSING) doorsClosed00) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 OPENING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSING)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 OPEN)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 CLOSING) doorsClosed00) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 OPENING)))) (= closeDoorsElectroValve0 closeDoorsElectroValve1)))
(assert (=> (not (or (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSED)) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 CLOSING)) (and (= handle0 UP) (/= gears0 RETRACTED) (= doors0 OPENING) doorsOpen00) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 OPEN)) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 CLOSING) doorsClosed00) (and (= handle0 UP) (not (/= gears0 RETRACTED)) (= doors0 OPENING)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSED)) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 OPENING) doorsOpen00) (and (not (= handle0 UP)) (/= gears0 EXTENDED) (= doors0 CLOSING)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 OPEN)) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 CLOSING) doorsClosed00) (and (not (= handle0 UP)) (not (/= gears0 EXTENDED)) (= doors0 OPENING)))) (= doors0 doors1)))
(check)
;; sat
;; functions - state 0
(define handler0::HandleStatus)
(define doorsr0::DoorStatus)
(define gearsr0::GearStatus)
(define cylindersDoorsr0::CylinderStatus)
(define cylindersGearsr0::CylinderStatus)
(define generalElectroValver0::bool)
(define openDoorsElectroValver0::bool)
(define closeDoorsElectroValver0::bool)
(define retractGearsElectroValver0::bool)
(define extendGearsElectroValver0::bool)
(define gearsExtendedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsRetractedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsClosedr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define doorsOpenr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsShockAbsorberr10::(-> (subtype (v::LandingSet) (/= v LandingSetUNDEF)) bool))
(define gearsExtendedr00::bool)
(define gearsRetractedr00::bool)
(define doorsClosedr00::bool)
(define doorsOpenr00::bool)
(define gearsShockAbsorberr00::bool)
(define aGearExtendedr0::bool)
(define aGearRetractedr0::bool)
(define aDoorClosedr0::bool)
(define aDoorOpenr0::bool)
(define timeoutr0::bool)
(define anomalyr0::bool)
(define greenLightr0::bool)
(define orangeLightr0::bool)
(define redLightr0::bool)
;; derived functions definitions - state 0
(assert (= gearsExtendedr00 (and (gearsExtendedr10 FRONT) (gearsExtendedr10 LEFT) (gearsExtendedr10 RIGHT))))
(assert (= gearsRetractedr00 (and (gearsRetractedr10 FRONT) (gearsRetractedr10 LEFT) (gearsRetractedr10 RIGHT))))
(assert (= doorsClosedr00 (and (doorsClosedr10 FRONT) (doorsClosedr10 LEFT) (doorsClosedr10 RIGHT))))
(assert (= doorsOpenr00 (and (doorsOpenr10 FRONT) (doorsOpenr10 LEFT) (doorsOpenr10 RIGHT))))
(assert (= aGearExtendedr0 (or (gearsExtendedr10 FRONT) (gearsExtendedr10 LEFT) (gearsExtendedr10 RIGHT))))
(assert (= aGearRetractedr0 (or (gearsRetractedr10 FRONT) (gearsRetractedr10 LEFT) (gearsRetractedr10 RIGHT))))
(assert (= aDoorClosedr0 (or (doorsClosedr10 FRONT) (doorsClosedr10 LEFT) (doorsClosedr10 RIGHT))))
(assert (= aDoorOpenr0 (or (doorsOpenr10 FRONT) (doorsOpenr10 LEFT) (doorsOpenr10 RIGHT))))
(assert (= gearsShockAbsorberr00 (and (gearsShockAbsorberr10 FRONT) (gearsShockAbsorberr10 LEFT) (gearsShockAbsorberr10 RIGHT))))
(assert (= greenLightr0 (= gearsr0 EXTENDED)))
(assert (= orangeLightr0 (or (= gearsr0 EXTENDING) (= gearsr0 RETRACTING))))
(assert (= redLightr0 anomalyr0))
(assert (= cylindersDoorsr0 (if (= doorsr0 OPEN) CYLINDER_EXTENDED (if (= doorsr0 OPENING) CYLINDER_EXTENDING (if (= doorsr0 CLOSING) CYLINDER_RETRACTING (if (= doorsr0 CLOSED) CYLINDER_RETRACTED CYLINDER_RETRACTED))))))
(assert (= cylindersGearsr0 (if (= gearsr0 RETRACTED) CYLINDER_RETRACTED (if (= gearsr0 EXTENDING) CYLINDER_EXTENDING (if (= gearsr0 EXTENDED) CYLINDER_EXTENDED (if (= gearsr0 RETRACTING) CYLINDER_RETRACTING CYLINDER_RETRACTING))))))
(check)
;; sat
;; functions state 1
;; new controlled functions for next state - step 0
(define anomalyr1::bool)
(define extendGearsElectroValver1::bool)
(define openDoorsElectroValver1::bool)
(define generalElectroValver1::bool)
(define doorsr1::DoorStatus)
(define retractGearsElectroValver1::bool)
(define gearsr1::GearStatus)
(define closeDoorsElectroValver1::bool)
;; logic variables - step 0
;; rules state 0
(assert (=> (not anomalyr0) (and (if (= handler0 UP) (if (/= gearsr0 RETRACTED) (and (=> (= doorsr0 CLOSED) (and (= generalElectroValver1 true) (= openDoorsElectroValver1 true) (= doorsr1 OPENING))) (=> (= doorsr0 CLOSING) (and (= closeDoorsElectroValver1 false) (= openDoorsElectroValver1 true) (= doorsr1 OPENING))) (=> (= doorsr0 OPENING) (=> doorsOpenr00 (and (= openDoorsElectroValver1 false) (= doorsr1 OPEN)))) (=> (= doorsr0 OPEN) (and (=> (= gearsr0 EXTENDED) (=> gearsShockAbsorberr00 (and (= retractGearsElectroValver1 true) (= gearsr1 RETRACTING)))) (=> (= gearsr0 RETRACTING) (=> gearsRetractedr00 (and (= retractGearsElectroValver1 false) (= gearsr1 RETRACTED)))) (=> (= gearsr0 EXTENDING) (and (= extendGearsElectroValver1 false) (= retractGearsElectroValver1 true) (= gearsr1 RETRACTING)))))) (and (=> (= doorsr0 OPEN) (and (= closeDoorsElectroValver1 true) (= doorsr1 CLOSING))) (=> (= doorsr0 CLOSING) (=> doorsClosedr00 (and (= generalElectroValver1 false) (= closeDoorsElectroValver1 false) (= doorsr1 CLOSED)))) (=> (= doorsr0 OPENING) (and (= closeDoorsElectroValver1 true) (= openDoorsElectroValver1 false) (= doorsr1 CLOSING))))) (if (/= gearsr0 EXTENDED) (and (=> (= doorsr0 CLOSED) (and (= generalElectroValver1 true) (= openDoorsElectroValver1 true) (= doorsr1 OPENING))) (=> (= doorsr0 OPENING) (=> doorsOpenr00 (and (= openDoorsElectroValver1 false) (= doorsr1 OPEN)))) (=> (= doorsr0 CLOSING) (and (= closeDoorsElectroValver1 false) (= openDoorsElectroValver1 true) (= doorsr1 OPENING))) (=> (= doorsr0 OPEN) (and (=> (= gearsr0 RETRACTED) (and (= extendGearsElectroValver1 true) (= gearsr1 EXTENDING))) (=> (= gearsr0 EXTENDING) (=> gearsExtendedr00 (and (= extendGearsElectroValver1 false) (= gearsr1 EXTENDED)))) (=> (= gearsr0 RETRACTING) (and (= extendGearsElectroValver1 true) (= retractGearsElectroValver1 false) (= gearsr1 EXTENDING)))))) (and (=> (= doorsr0 OPEN) (and (= closeDoorsElectroValver1 true) (= doorsr1 CLOSING))) (=> (= doorsr0 CLOSING) (=> doorsClosedr00 (and (= generalElectroValver1 false) (= closeDoorsElectroValver1 false) (= doorsr1 CLOSED)))) (=> (= doorsr0 OPENING) (and (= closeDoorsElectroValver1 true) (= openDoorsElectroValver1 false) (= doorsr1 CLOSING)))))) (and (=> (and (and openDoorsElectroValver0 aDoorClosedr0) timeoutr0) (= anomalyr1 true)) (=> (and (and openDoorsElectroValver0 (not doorsOpenr00)) timeoutr0) (= anomalyr1 true)) (=> (and (and closeDoorsElectroValver0 aDoorOpenr0) timeoutr0) (= anomalyr1 true)) (=> (and (and closeDoorsElectroValver0 (not doorsClosedr00)) timeoutr0) (= anomalyr1 true)) (=> (and (and retractGearsElectroValver0 aGearExtendedr0) timeoutr0) (= anomalyr1 true)) (=> (and (and retractGearsElectroValver0 (not gearsRetractedr00)) timeoutr0) (= anomalyr1 true)) (=> (and (and extendGearsElectroValver0 aGearRetractedr0) timeoutr0) (= anomalyr1 true)) (=> (and (and extendGearsElectroValver0 (not gearsExtendedr00)) timeoutr0) (= anomalyr1 true))))))
;; unchanged functions - state 0
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 EXTENDING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 RETRACTED)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 EXTENDING) gearsExtendedr00) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 RETRACTING)))) (= extendGearsElectroValver0 extendGearsElectroValver1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSING)) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 OPEN)) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 CLOSING) doorsClosedr00) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 OPENING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSING)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 OPEN)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 CLOSING) doorsClosedr00) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 OPENING)))) (= closeDoorsElectroValver0 closeDoorsElectroValver1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 EXTENDED) gearsShockAbsorberr00) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 RETRACTING) gearsRetractedr00) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 EXTENDING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 RETRACTED)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 EXTENDING) gearsExtendedr00) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 RETRACTING)))) (= gearsr0 gearsr1)))
(assert (=> (not (or (and (not anomalyr0) (and (and openDoorsElectroValver0 aDoorClosedr0) timeoutr0)) (and (not anomalyr0) (and (and openDoorsElectroValver0 (not doorsOpenr00)) timeoutr0)) (and (not anomalyr0) (and (and closeDoorsElectroValver0 aDoorOpenr0) timeoutr0)) (and (not anomalyr0) (and (and closeDoorsElectroValver0 (not doorsClosedr00)) timeoutr0)) (and (not anomalyr0) (and (and retractGearsElectroValver0 aGearExtendedr0) timeoutr0)) (and (not anomalyr0) (and (and retractGearsElectroValver0 (not gearsRetractedr00)) timeoutr0)) (and (not anomalyr0) (and (and extendGearsElectroValver0 aGearRetractedr0) timeoutr0)) (and (not anomalyr0) (and (and extendGearsElectroValver0 (not gearsExtendedr00)) timeoutr0)))) (= anomalyr0 anomalyr1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSED)) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSING)) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPENING) doorsOpenr00) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 OPEN)) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 CLOSING) doorsClosedr00) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 OPENING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSED)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPENING) doorsOpenr00) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSING)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 OPEN)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 CLOSING) doorsClosedr00) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 OPENING)))) (= doorsr0 doorsr1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 EXTENDED) gearsShockAbsorberr00) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 RETRACTING) gearsRetractedr00) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPEN) (= gearsr0 EXTENDING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPEN) (= gearsr0 RETRACTING)))) (= retractGearsElectroValver0 retractGearsElectroValver1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSED)) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 CLOSING) doorsClosedr00) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSED)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 CLOSING) doorsClosedr00))) (= generalElectroValver0 generalElectroValver1)))
(assert (=> (not (or (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSED)) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 CLOSING)) (and (not anomalyr0) (= handler0 UP) (/= gearsr0 RETRACTED) (= doorsr0 OPENING) doorsOpenr00) (and (not anomalyr0) (= handler0 UP) (not (/= gearsr0 RETRACTED)) (= doorsr0 OPENING)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSED)) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 OPENING) doorsOpenr00) (and (not anomalyr0) (not (= handler0 UP)) (/= gearsr0 EXTENDED) (= doorsr0 CLOSING)) (and (not anomalyr0) (not (= handler0 UP)) (not (/= gearsr0 EXTENDED)) (= doorsr0 OPENING)))) (= openDoorsElectroValver0 openDoorsElectroValver1)))
(check)
;; sat
;; Generic step proof
(assert (not (=> (and (= doors0 doorsr0) (= gears0 gearsr0) (= handle0 handler0) (= gearsRetracted00 gearsRetractedr00) (= doorsOpen00 doorsOpenr00) (= doorsClosed00 doorsClosedr00) (= gearsShockAbsorber00 gearsShockAbsorberr00) (= gearsExtended00 gearsExtendedr00)) (or (and (= doors0 doorsr1) (= gears0 gearsr1)) (and (= doors1 doorsr1) (= gears1 gearsr1))))))
(check)
;; unsat