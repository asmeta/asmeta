(define-type Device(scalar device1 device2 device3 DeviceUNDEF))
(define-type State(scalar WAITING_FOR_MESSAGE EXECUTE_CLIENT_TESTS CHECKING_FOR_EXTRA_RESOURCES DISPLAYING_THE_MESSAGE StateUNDEF))
;; functions - state 0
(define state0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) State))
(define extraResources0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
(define messageArrived0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
(define clientTestsAvailable0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
;; initial state
(assert (and (= (state0 device1) WAITING_FOR_MESSAGE) (= (state0 device2) WAITING_FOR_MESSAGE) (= (state0 device3) WAITING_FOR_MESSAGE)))
(check)
;; sat
;; functions state 1
;; new controlled functions for next state - step 0
(define state1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) State))
;; logic variables - step 0
;; rules state 0
(assert (and (and (=> (= (state0 device1) WAITING_FOR_MESSAGE) (=> (= (messageArrived0 device1) true) (if (= (clientTestsAvailable0 device1) true) (= (state1 device1) EXECUTE_CLIENT_TESTS) (= (state1 device1) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (state0 device1) EXECUTE_CLIENT_TESTS) (= (state1 device1) CHECKING_FOR_EXTRA_RESOURCES)) (=> (= (state0 device1) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResources0 device1) true) (= (state1 device1) DISPLAYING_THE_MESSAGE))) (=> (= (state0 device1) DISPLAYING_THE_MESSAGE) true)) (and (=> (= (state0 device2) WAITING_FOR_MESSAGE) (=> (= (messageArrived0 device2) true) (if (= (clientTestsAvailable0 device2) true) (= (state1 device2) EXECUTE_CLIENT_TESTS) (= (state1 device2) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (state0 device2) EXECUTE_CLIENT_TESTS) (= (state1 device2) CHECKING_FOR_EXTRA_RESOURCES)) (=> (= (state0 device2) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResources0 device2) true) (= (state1 device2) DISPLAYING_THE_MESSAGE))) (=> (= (state0 device2) DISPLAYING_THE_MESSAGE) true)) (and (=> (= (state0 device3) WAITING_FOR_MESSAGE) (=> (= (messageArrived0 device3) true) (if (= (clientTestsAvailable0 device3) true) (= (state1 device3) EXECUTE_CLIENT_TESTS) (= (state1 device3) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (state0 device3) EXECUTE_CLIENT_TESTS) (= (state1 device3) CHECKING_FOR_EXTRA_RESOURCES)) (=> (= (state0 device3) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResources0 device3) true) (= (state1 device3) DISPLAYING_THE_MESSAGE))) (=> (= (state0 device3) DISPLAYING_THE_MESSAGE) true))))
;; unchanged functions - state 0
(assert (=> (not (or (and (= (state0 device1) WAITING_FOR_MESSAGE) (= (messageArrived0 device1) true) (= (clientTestsAvailable0 device1) true)) (and (= (state0 device1) WAITING_FOR_MESSAGE) (= (messageArrived0 device1) true) (not (= (clientTestsAvailable0 device1) true))) (= (state0 device1) EXECUTE_CLIENT_TESTS) (= (state0 device1) CHECKING_FOR_EXTRA_RESOURCES))) (= (state0 device1) (state1 device1))))
(assert (=> (not (or (and (= (state0 device3) WAITING_FOR_MESSAGE) (= (messageArrived0 device3) true) (= (clientTestsAvailable0 device3) true)) (and (= (state0 device3) WAITING_FOR_MESSAGE) (= (messageArrived0 device3) true) (not (= (clientTestsAvailable0 device3) true))) (= (state0 device3) EXECUTE_CLIENT_TESTS) (= (state0 device3) CHECKING_FOR_EXTRA_RESOURCES))) (= (state0 device3) (state1 device3))))
(assert (=> (not (or (and (= (state0 device2) WAITING_FOR_MESSAGE) (= (messageArrived0 device2) true) (= (clientTestsAvailable0 device2) true)) (and (= (state0 device2) WAITING_FOR_MESSAGE) (= (messageArrived0 device2) true) (not (= (clientTestsAvailable0 device2) true))) (= (state0 device2) EXECUTE_CLIENT_TESTS) (= (state0 device2) CHECKING_FOR_EXTRA_RESOURCES))) (= (state0 device2) (state1 device2))))
(check)
;; sat
(define-type Key(scalar CANVAS TEXTSHADOW AUDIO FAIL_EX KeyUNDEF))
(define-type SubKey(scalar OGG MP3 SubKeyUNDEF))
(define-type MyBoolDom(scalar YES NO MyBoolDomUNDEF))
;; functions - state 0
(define stater0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) State))
(define modernizrr0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) MyBoolDom))
(define modernizrSubr0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) (subtype (v::SubKey) (/= v SubKeyUNDEF)) MyBoolDom))
(define cookier0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) MyBoolDom))
(define cookieSubr0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) (subtype (v::SubKey) (/= v SubKeyUNDEF)) MyBoolDom))
(define keyParentalRelr0::(-> (subtype (v::Key) (/= v KeyUNDEF)) (subtype (v::SubKey) (/= v SubKeyUNDEF)) bool))
(define extraResourcesr0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
(define messageArrivedr0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
(define clientTestsAvailabler0::(-> (subtype (v::Device) (/= v DeviceUNDEF)) bool))
;; initial state
(assert (and (= (stater0 device1) WAITING_FOR_MESSAGE) (= (stater0 device2) WAITING_FOR_MESSAGE) (= (stater0 device3) WAITING_FOR_MESSAGE)))
(assert (and (= (modernizrr0 device1 CANVAS) MyBoolDomUNDEF) (= (modernizrr0 device1 TEXTSHADOW) MyBoolDomUNDEF) (= (modernizrr0 device1 AUDIO) MyBoolDomUNDEF) (= (modernizrr0 device1 FAIL_EX) MyBoolDomUNDEF) (= (modernizrr0 device2 CANVAS) YES) (= (modernizrr0 device2 TEXTSHADOW) NO) (= (modernizrr0 device2 AUDIO) YES) (= (modernizrr0 device2 FAIL_EX) MyBoolDomUNDEF) (= (modernizrr0 device3 CANVAS) MyBoolDomUNDEF) (= (modernizrr0 device3 TEXTSHADOW) MyBoolDomUNDEF) (= (modernizrr0 device3 AUDIO) MyBoolDomUNDEF) (= (modernizrr0 device3 FAIL_EX) MyBoolDomUNDEF)))
(assert (and (= (modernizrSubr0 device1 CANVAS OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device1 CANVAS MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device1 TEXTSHADOW OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device1 TEXTSHADOW MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device1 AUDIO OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device1 AUDIO MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device1 FAIL_EX OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device1 FAIL_EX MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device2 CANVAS OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device2 CANVAS MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device2 TEXTSHADOW OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device2 TEXTSHADOW MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device2 AUDIO OGG) NO) (= (modernizrSubr0 device2 AUDIO MP3) YES) (= (modernizrSubr0 device2 FAIL_EX OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device2 FAIL_EX MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device3 CANVAS OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device3 CANVAS MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device3 TEXTSHADOW OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device3 TEXTSHADOW MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device3 AUDIO OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device3 AUDIO MP3) MyBoolDomUNDEF) (= (modernizrSubr0 device3 FAIL_EX OGG) MyBoolDomUNDEF) (= (modernizrSubr0 device3 FAIL_EX MP3) MyBoolDomUNDEF)))
;; derived functions definitions - state 0
(assert (and (= (keyParentalRelr0 CANVAS OGG) false) (= (keyParentalRelr0 CANVAS MP3) false) (= (keyParentalRelr0 TEXTSHADOW OGG) false) (= (keyParentalRelr0 TEXTSHADOW MP3) false) (= (keyParentalRelr0 AUDIO OGG) true) (= (keyParentalRelr0 AUDIO MP3) true) (= (keyParentalRelr0 FAIL_EX OGG) false) (= (keyParentalRelr0 FAIL_EX MP3) false)))
(check)
;; sat
;; functions state 1
;; new controlled functions for next state - step 0
(define cookier1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) MyBoolDom))
(define stater1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) State))
(define cookieSubr1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) (subtype (v::SubKey) (/= v SubKeyUNDEF)) MyBoolDom))
(define modernizrSubr1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) (subtype (v::SubKey) (/= v SubKeyUNDEF)) MyBoolDom))
(define modernizrr1::(-> (subtype (v::Device) (/= v DeviceUNDEF)) (subtype (v::Key) (/= v KeyUNDEF)) MyBoolDom))
;; logic variables - step 0
;; rules state 0
(assert (and (and (=> (= (stater0 device1) WAITING_FOR_MESSAGE) (=> (= (messageArrivedr0 device1) true) (if (= (clientTestsAvailabler0 device1) true) (= (stater1 device1) EXECUTE_CLIENT_TESTS) (= (stater1 device1) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (stater0 device1) EXECUTE_CLIENT_TESTS) (and (and (and (= (cookier1 device1 CANVAS) (modernizrr0 device1 CANVAS)) (and (=> (keyParentalRelr0 CANVAS OGG) (= (cookieSubr1 device1 CANVAS OGG) (modernizrSubr0 device1 CANVAS OGG))) (=> (keyParentalRelr0 CANVAS MP3) (= (cookieSubr1 device1 CANVAS MP3) (modernizrSubr0 device1 CANVAS MP3))))) (and (= (cookier1 device1 TEXTSHADOW) (modernizrr0 device1 TEXTSHADOW)) (and (=> (keyParentalRelr0 TEXTSHADOW OGG) (= (cookieSubr1 device1 TEXTSHADOW OGG) (modernizrSubr0 device1 TEXTSHADOW OGG))) (=> (keyParentalRelr0 TEXTSHADOW MP3) (= (cookieSubr1 device1 TEXTSHADOW MP3) (modernizrSubr0 device1 TEXTSHADOW MP3))))) (and (= (cookier1 device1 AUDIO) (modernizrr0 device1 AUDIO)) (and (=> (keyParentalRelr0 AUDIO OGG) (= (cookieSubr1 device1 AUDIO OGG) (modernizrSubr0 device1 AUDIO OGG))) (=> (keyParentalRelr0 AUDIO MP3) (= (cookieSubr1 device1 AUDIO MP3) (modernizrSubr0 device1 AUDIO MP3))))) (and (= (cookier1 device1 FAIL_EX) (modernizrr0 device1 FAIL_EX)) (and (=> (keyParentalRelr0 FAIL_EX OGG) (= (cookieSubr1 device1 FAIL_EX OGG) (modernizrSubr0 device1 FAIL_EX OGG))) (=> (keyParentalRelr0 FAIL_EX MP3) (= (cookieSubr1 device1 FAIL_EX MP3) (modernizrSubr0 device1 FAIL_EX MP3)))))) (= (stater1 device1) CHECKING_FOR_EXTRA_RESOURCES))) (=> (= (stater0 device1) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResourcesr0 device1) true) (= (stater1 device1) DISPLAYING_THE_MESSAGE))) (=> (= (stater0 device1) DISPLAYING_THE_MESSAGE) true)) (and (=> (= (stater0 device2) WAITING_FOR_MESSAGE) (=> (= (messageArrivedr0 device2) true) (if (= (clientTestsAvailabler0 device2) true) (= (stater1 device2) EXECUTE_CLIENT_TESTS) (= (stater1 device2) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (stater0 device2) EXECUTE_CLIENT_TESTS) (and (and (and (= (cookier1 device2 CANVAS) (modernizrr0 device2 CANVAS)) (and (=> (keyParentalRelr0 CANVAS OGG) (= (cookieSubr1 device2 CANVAS OGG) (modernizrSubr0 device2 CANVAS OGG))) (=> (keyParentalRelr0 CANVAS MP3) (= (cookieSubr1 device2 CANVAS MP3) (modernizrSubr0 device2 CANVAS MP3))))) (and (= (cookier1 device2 TEXTSHADOW) (modernizrr0 device2 TEXTSHADOW)) (and (=> (keyParentalRelr0 TEXTSHADOW OGG) (= (cookieSubr1 device2 TEXTSHADOW OGG) (modernizrSubr0 device2 TEXTSHADOW OGG))) (=> (keyParentalRelr0 TEXTSHADOW MP3) (= (cookieSubr1 device2 TEXTSHADOW MP3) (modernizrSubr0 device2 TEXTSHADOW MP3))))) (and (= (cookier1 device2 AUDIO) (modernizrr0 device2 AUDIO)) (and (=> (keyParentalRelr0 AUDIO OGG) (= (cookieSubr1 device2 AUDIO OGG) (modernizrSubr0 device2 AUDIO OGG))) (=> (keyParentalRelr0 AUDIO MP3) (= (cookieSubr1 device2 AUDIO MP3) (modernizrSubr0 device2 AUDIO MP3))))) (and (= (cookier1 device2 FAIL_EX) (modernizrr0 device2 FAIL_EX)) (and (=> (keyParentalRelr0 FAIL_EX OGG) (= (cookieSubr1 device2 FAIL_EX OGG) (modernizrSubr0 device2 FAIL_EX OGG))) (=> (keyParentalRelr0 FAIL_EX MP3) (= (cookieSubr1 device2 FAIL_EX MP3) (modernizrSubr0 device2 FAIL_EX MP3)))))) (= (stater1 device2) CHECKING_FOR_EXTRA_RESOURCES))) (=> (= (stater0 device2) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResourcesr0 device2) true) (= (stater1 device2) DISPLAYING_THE_MESSAGE))) (=> (= (stater0 device2) DISPLAYING_THE_MESSAGE) true)) (and (=> (= (stater0 device3) WAITING_FOR_MESSAGE) (=> (= (messageArrivedr0 device3) true) (if (= (clientTestsAvailabler0 device3) true) (= (stater1 device3) EXECUTE_CLIENT_TESTS) (= (stater1 device3) CHECKING_FOR_EXTRA_RESOURCES)))) (=> (= (stater0 device3) EXECUTE_CLIENT_TESTS) (and (and (and (= (cookier1 device3 CANVAS) (modernizrr0 device3 CANVAS)) (and (=> (keyParentalRelr0 CANVAS OGG) (= (cookieSubr1 device3 CANVAS OGG) (modernizrSubr0 device3 CANVAS OGG))) (=> (keyParentalRelr0 CANVAS MP3) (= (cookieSubr1 device3 CANVAS MP3) (modernizrSubr0 device3 CANVAS MP3))))) (and (= (cookier1 device3 TEXTSHADOW) (modernizrr0 device3 TEXTSHADOW)) (and (=> (keyParentalRelr0 TEXTSHADOW OGG) (= (cookieSubr1 device3 TEXTSHADOW OGG) (modernizrSubr0 device3 TEXTSHADOW OGG))) (=> (keyParentalRelr0 TEXTSHADOW MP3) (= (cookieSubr1 device3 TEXTSHADOW MP3) (modernizrSubr0 device3 TEXTSHADOW MP3))))) (and (= (cookier1 device3 AUDIO) (modernizrr0 device3 AUDIO)) (and (=> (keyParentalRelr0 AUDIO OGG) (= (cookieSubr1 device3 AUDIO OGG) (modernizrSubr0 device3 AUDIO OGG))) (=> (keyParentalRelr0 AUDIO MP3) (= (cookieSubr1 device3 AUDIO MP3) (modernizrSubr0 device3 AUDIO MP3))))) (and (= (cookier1 device3 FAIL_EX) (modernizrr0 device3 FAIL_EX)) (and (=> (keyParentalRelr0 FAIL_EX OGG) (= (cookieSubr1 device3 FAIL_EX OGG) (modernizrSubr0 device3 FAIL_EX OGG))) (=> (keyParentalRelr0 FAIL_EX MP3) (= (cookieSubr1 device3 FAIL_EX MP3) (modernizrSubr0 device3 FAIL_EX MP3)))))) (= (stater1 device3) CHECKING_FOR_EXTRA_RESOURCES))) (=> (= (stater0 device3) CHECKING_FOR_EXTRA_RESOURCES) (and (=> (extraResourcesr0 device3) true) (= (stater1 device3) DISPLAYING_THE_MESSAGE))) (=> (= (stater0 device3) DISPLAYING_THE_MESSAGE) true))))
;; unchanged functions - state 0
(assert (=> (not (= (stater0 device3) EXECUTE_CLIENT_TESTS)) (= (cookier0 device3 TEXTSHADOW) (cookier1 device3 TEXTSHADOW))))
(assert (=> (not (= (stater0 device2) EXECUTE_CLIENT_TESTS)) (= (cookier0 device2 TEXTSHADOW) (cookier1 device2 TEXTSHADOW))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW MP3))) (= (cookieSubr0 device3 TEXTSHADOW MP3) (cookieSubr1 device3 TEXTSHADOW MP3))))
(assert (=> (not (= (stater0 device1) EXECUTE_CLIENT_TESTS)) (= (cookier0 device1 TEXTSHADOW) (cookier1 device1 TEXTSHADOW))))
(assert (=> (not (= (stater0 device1) EXECUTE_CLIENT_TESTS)) (= (cookier0 device1 CANVAS) (cookier1 device1 CANVAS))))
(assert (=> (not (= (stater0 device2) EXECUTE_CLIENT_TESTS)) (= (cookier0 device2 FAIL_EX) (cookier1 device2 FAIL_EX))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO MP3))) (= (cookieSubr0 device2 AUDIO MP3) (cookieSubr1 device2 AUDIO MP3))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS MP3))) (= (cookieSubr0 device3 CANVAS MP3) (cookieSubr1 device3 CANVAS MP3))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO OGG))) (= (cookieSubr0 device3 AUDIO OGG) (cookieSubr1 device3 AUDIO OGG))))
(assert (=> (not (= (stater0 device3) EXECUTE_CLIENT_TESTS)) (= (cookier0 device3 CANVAS) (cookier1 device3 CANVAS))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW OGG))) (= (cookieSubr0 device2 TEXTSHADOW OGG) (cookieSubr1 device2 TEXTSHADOW OGG))))
(assert (=> (not (= (stater0 device2) EXECUTE_CLIENT_TESTS)) (= (cookier0 device2 CANVAS) (cookier1 device2 CANVAS))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS MP3))) (= (cookieSubr0 device2 CANVAS MP3) (cookieSubr1 device2 CANVAS MP3))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW MP3))) (= (cookieSubr0 device1 TEXTSHADOW MP3) (cookieSubr1 device1 TEXTSHADOW MP3))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX MP3))) (= (cookieSubr0 device3 FAIL_EX MP3) (cookieSubr1 device3 FAIL_EX MP3))))
(assert (=> (not (= (stater0 device3) EXECUTE_CLIENT_TESTS)) (= (cookier0 device3 AUDIO) (cookier1 device3 AUDIO))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO MP3))) (= (cookieSubr0 device1 AUDIO MP3) (cookieSubr1 device1 AUDIO MP3))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX MP3))) (= (cookieSubr0 device1 FAIL_EX MP3) (cookieSubr1 device1 FAIL_EX MP3))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX MP3))) (= (cookieSubr0 device2 FAIL_EX MP3) (cookieSubr1 device2 FAIL_EX MP3))))
(assert (=> (not (= (stater0 device1) EXECUTE_CLIENT_TESTS)) (= (cookier0 device1 FAIL_EX) (cookier1 device1 FAIL_EX))))
(assert (=> (not (or (and (= (stater0 device1) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device1) true) (= (clientTestsAvailabler0 device1) true)) (and (= (stater0 device1) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device1) true) (not (= (clientTestsAvailabler0 device1) true))) (= (stater0 device1) EXECUTE_CLIENT_TESTS) (= (stater0 device1) CHECKING_FOR_EXTRA_RESOURCES))) (= (stater0 device1) (stater1 device1))))
(assert (=> (not (or (and (= (stater0 device3) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device3) true) (= (clientTestsAvailabler0 device3) true)) (and (= (stater0 device3) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device3) true) (not (= (clientTestsAvailabler0 device3) true))) (= (stater0 device3) EXECUTE_CLIENT_TESTS) (= (stater0 device3) CHECKING_FOR_EXTRA_RESOURCES))) (= (stater0 device3) (stater1 device3))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW OGG))) (= (cookieSubr0 device3 TEXTSHADOW OGG) (cookieSubr1 device3 TEXTSHADOW OGG))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW MP3))) (= (cookieSubr0 device2 TEXTSHADOW MP3) (cookieSubr1 device2 TEXTSHADOW MP3))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO OGG))) (= (cookieSubr0 device2 AUDIO OGG) (cookieSubr1 device2 AUDIO OGG))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO MP3))) (= (cookieSubr0 device3 AUDIO MP3) (cookieSubr1 device3 AUDIO MP3))))
(assert (=> (not (= (stater0 device1) EXECUTE_CLIENT_TESTS)) (= (cookier0 device1 AUDIO) (cookier1 device1 AUDIO))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS OGG))) (= (cookieSubr0 device3 CANVAS OGG) (cookieSubr1 device3 CANVAS OGG))))
(assert (=> (not (= (stater0 device2) EXECUTE_CLIENT_TESTS)) (= (cookier0 device2 AUDIO) (cookier1 device2 AUDIO))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS OGG))) (= (cookieSubr0 device1 CANVAS OGG) (cookieSubr1 device1 CANVAS OGG))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX OGG))) (= (cookieSubr0 device1 FAIL_EX OGG) (cookieSubr1 device1 FAIL_EX OGG))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS OGG))) (= (cookieSubr0 device2 CANVAS OGG) (cookieSubr1 device2 CANVAS OGG))))
(assert (=> (not (= (stater0 device3) EXECUTE_CLIENT_TESTS)) (= (cookier0 device3 FAIL_EX) (cookier1 device3 FAIL_EX))))
(assert (=> (not (and (= (stater0 device3) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX OGG))) (= (cookieSubr0 device3 FAIL_EX OGG) (cookieSubr1 device3 FAIL_EX OGG))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 CANVAS MP3))) (= (cookieSubr0 device1 CANVAS MP3) (cookieSubr1 device1 CANVAS MP3))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 AUDIO OGG))) (= (cookieSubr0 device1 AUDIO OGG) (cookieSubr1 device1 AUDIO OGG))))
(assert (=> (not (and (= (stater0 device2) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 FAIL_EX OGG))) (= (cookieSubr0 device2 FAIL_EX OGG) (cookieSubr1 device2 FAIL_EX OGG))))
(assert (=> (not (or (and (= (stater0 device2) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device2) true) (= (clientTestsAvailabler0 device2) true)) (and (= (stater0 device2) WAITING_FOR_MESSAGE) (= (messageArrivedr0 device2) true) (not (= (clientTestsAvailabler0 device2) true))) (= (stater0 device2) EXECUTE_CLIENT_TESTS) (= (stater0 device2) CHECKING_FOR_EXTRA_RESOURCES))) (= (stater0 device2) (stater1 device2))))
(assert (=> (not (and (= (stater0 device1) EXECUTE_CLIENT_TESTS) (keyParentalRelr0 TEXTSHADOW OGG))) (= (cookieSubr0 device1 TEXTSHADOW OGG) (cookieSubr1 device1 TEXTSHADOW OGG))))
(check)
;; sat
;; Generic step proof
(assert
	(not
		(=>
			(and
				(= (state0 device1) (stater0 device1))
				(= (state0 device2) (stater0 device2))
				(= (state0 device3) (stater0 device3))
				(= (extraResources0 device1) (extraResourcesr0 device1))
				(= (extraResources0 device2) (extraResourcesr0 device2))
				(= (extraResources0 device3) (extraResourcesr0 device3))
				(= (messageArrived0 device1) (messageArrivedr0 device1))
				(= (messageArrived0 device2) (messageArrivedr0 device2))
				(= (messageArrived0 device3) (messageArrivedr0 device3))
				(= (clientTestsAvailable0 device1) (clientTestsAvailabler0 device1))
				(= (clientTestsAvailable0 device2) (clientTestsAvailabler0 device2))
				(= (clientTestsAvailable0 device3) (clientTestsAvailabler0 device3))
			)
			(or
				(and
					(= (state1 device1) (stater1 device1))
					(= (state1 device2) (stater1 device2))
					(= (state1 device3) (stater1 device3))
				)
				(and
					(= (state0 device1) (stater1 device1))
					(= (state0 device2) (stater1 device2))
					(= (state0 device3) (stater1 device3))
				)
			)
		)
	)
)
(check)
;; unsat
;; Generic step is conformant.