;; |= refined(any) => ( abstract(at least one) \/ stuttering)

(set-evidence! true)
(echo "Version with explicit representation of the exists (in the proof) over the abstract step\n\n")
(echo "correct refinement from chooseAbstract.asm to chooseRefined.asm\n")
;; functions - state 0
(define x00::(subrange 1 3))
(define x01::(subrange 1 3))
(define x0State0::(subrange 1 2))
(assert
	(not
		(=>
			;;refined (any)
			(and (= x01 x0State0) (<= x0State0 2) (<= 1 x0State0))
			;;abstract (at least one)
			(or
				(and (= x01 1) (<= 1 3) (<= 1 1))
				(and (= x01 2) (<= 2 3) (<= 1 2))
				(and (= x01 3) (<= 3 3) (<= 1 3))
				(= x00 x01)
			)
		)
	)
)
(check)
;; unsat: it is a correct refinement


(reset)
(echo "\nnon-correct refinement from chooseAbstractNoCorrectRef.asm to chooseRefinedNoCorrectRef.asm\n")
;; functions - state 0
(define x00::(subrange 1 3))
(define x01::(subrange 1 3))
(define x0State0::(subrange 1 3))
(assert
	(not
		(=>
			;;refined (any)
			(and (= x01 x0State0) (<= x0State0 3) (<= 1 x0State0))
			;;abstract (at least one)
			(or
				(and (= x01 1) (<= 1 2) (<= 1 1))
				(and (= x01 2) (<= 2 2) (<= 1 2))
				(= x00 x01)
			)
		)
	)
)
(check)
;; sat: it is not a correct refinement


(reset)
(echo "correct refinement from chooseRefined.asm to chooseRefinedRefined.asm\n")
;; functions - state 0
(define x00::(subrange 1 2))
(define x01::(subrange 1 2))
(assert
		(not
			(=>
				;;refined (any)
				(= x01 1)
				;;abstract (at least one)
				(or
					(and
						(= x01 1)
						(or (= 1 1) (= 1 2))
					)
					(and
						(= x01 2)
						(or (= 2 1) (= 2 2))
					)
					(= x00 x01)
				)
			)
		)
)
(check)