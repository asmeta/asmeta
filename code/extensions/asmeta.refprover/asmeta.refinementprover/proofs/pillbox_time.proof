;;Proof of refinement from pillbox_ground to pillbox_time
(define-type LedLights(scalar OFF ON LedLightsUNDEF))
(define-type Drugs(scalar TYLENOL ASPIRINE MOMENT DrugsUNDEF))
(define-type Drawer)
;; functions - state 0
(define isOff10::(-> Drawer bool))
(define isOn10::(-> Drawer bool))
(define pillDeadlineHit10::(-> Drawer bool))
(define isOn1ABSTRACT0::(-> Drawer bool))
(define areOthersOn10::(-> Drawer bool))
(define pillDeadlineHit1ABSTRACT0::(-> Drawer bool))
(define isPillTaken10::(-> Drawer bool))
(define isOff1ABSTRACT0::(-> Drawer bool))
(define drug10::(-> Drawer Drugs))
(define time_consumption10::(-> Drawer int))
(define tenMinutes00::Timer)
(define isPillTobeTaken10::(-> Drawer bool))
(define drawer100::Drawer)
(define areOthersOn1ABSTRACT0::(-> Drawer bool))
(define isPillTaken1ABSTRACT0::(-> Drawer bool))
(define drawerLed10::(-> Drawer LedLights))
(define drawer300::Drawer)
(define drawer200::Drawer)
;; derived functions definitions - state 0
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
;; Initial state proof
(define refinedInitState::bool true)
(define existsAbstractInitState::bool true)
(assert (not (=> refinedInitState existsAbstractInitState)))
(set-evidence! true)
(check)
;; unsat

(reset)
(set-evidence! false)
(define-type LedLights(scalar OFF ON LedLightsUNDEF))
(define-type Drugs(scalar TYLENOL ASPIRINE MOMENT DrugsUNDEF))
(define-type Drawer)
;; functions - state 0
(define isOff10::(-> Drawer bool))
(define isOn10::(-> Drawer bool))
(define pillDeadlineHit10::(-> Drawer bool))
(define isOn1ABSTRACT0::(-> Drawer bool))
(define areOthersOn10::(-> Drawer bool))
(define pillDeadlineHit1ABSTRACT0::(-> Drawer bool))
(define isPillTaken10::(-> Drawer bool))
(define isOff1ABSTRACT0::(-> Drawer bool))
(define drug10::(-> Drawer Drugs))
(define time_consumption10::(-> Drawer int))
(define tenMinutes00::Timer)
(define isPillTobeTaken10::(-> Drawer bool))
(define drawer100::Drawer)
(define areOthersOn1ABSTRACT0::(-> Drawer bool))
(define isPillTaken1ABSTRACT0::(-> Drawer bool))
(define drawerLed10::(-> Drawer LedLights))
(define drawer300::Drawer)
(define drawer200::Drawer)
(define isPillTobeTaken11::(-> Drawer bool))
(define drug11::(-> Drawer Drugs))
(define time_consumption11::(-> Drawer int))
(define drawerLed11::(-> Drawer LedLights))
(define drawer0State0::Drawer)
(define isOn11::(-> Drawer bool))
(define areOthersOn11::(-> Drawer bool))
(define drawer101::Drawer)
(define drawer301::Drawer)
(define areOthersOn1ABSTRACT1::(-> Drawer bool))
(define isPillTaken11::(-> Drawer bool))
(define isOn1ABSTRACT1::(-> Drawer bool))
(define isPillTaken1ABSTRACT1::(-> Drawer bool))
(define isOff1ABSTRACT1::(-> Drawer bool))
(define tenMinutes01::Timer)
(define pillDeadlineHit1ABSTRACT1::(-> Drawer bool))
(define isOff11::(-> Drawer bool))
(define pillDeadlineHit11::(-> Drawer bool))
(define drawer201::Drawer)
;; derived functions definitions - state 0
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
;; derived functions definitions - state 1
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(define abstractStep::(-> Drawer bool) (lambda (drawer0StateLambda::Drawer) true))
;; Generic step proof
(define refinedStep::bool true)
(define existsAbstractStep::bool false)
(define stutteringState::bool true)
(assert (not (=> refinedStep (or existsAbstractStep stutteringState))))
(set-evidence! true)
(check)
;; unsat
