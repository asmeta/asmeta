package org.asmeta.asm2java.main;

import asmeta.definitions.ControlledFunction;
import asmeta.definitions.Function;
import asmeta.definitions.MonitoredFunction;
import asmeta.definitions.RuleDeclaration;
import asmeta.definitions.domains.AbstractTd;
import asmeta.definitions.domains.ConcreteDomain;
import asmeta.definitions.domains.Domain;
import asmeta.definitions.domains.EnumTd;
import asmeta.definitions.domains.MapDomain;
import asmeta.definitions.domains.SequenceDomain;
import asmeta.structure.Asm;
import asmeta.transitionrules.basictransitionrules.Rule;
import java.util.ArrayList;
import java.util.List;
import org.asmeta.asm2java.SeqRuleCollector;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Assert;

@SuppressWarnings("all")
public class JavaExeGenerator extends AsmToJavaGenerator {
  public void compileAndWrite(final Asm asm, final String writerPath, final TranslatorOptions userOptions) {
    Assert.assertTrue(writerPath.endsWith(".java"));
    this.compileAndWrite(asm, writerPath, "JAVA", userOptions);
  }

  private List<Rule> seqCalledRules;

  private String supp;

  @Override
  public String compileAsm(final Asm asm) {
    boolean _optimizeSeqMacroRule = this.options.getOptimizeSeqMacroRule();
    if (_optimizeSeqMacroRule) {
      ArrayList<Rule> _arrayList = new ArrayList<Rule>();
      this.seqCalledRules = _arrayList;
      EList<RuleDeclaration> _ruleDeclaration = asm.getBodySection().getRuleDeclaration();
      for (final RuleDeclaration r : _ruleDeclaration) {
        this.seqCalledRules.addAll(new SeqRuleCollector(false).visit(r));
      }
    }
    final String asmName = asm.getName();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ");
    _builder.append(asmName);
    _builder.append("_Exe.java automatically generated from ASM2CODE");
    _builder.newLineIfNotEmpty();
    _builder.append("//Classe per l\'esecuzione dei file java generati dalla traduzione di un programma ASM");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    _builder.append(asmName);
    _builder.append("_Exe {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static void printControlled(");
    _builder.append(asmName, "\t");
    _builder.append(" esecuzione) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _printControlled = this.printControlled(asm);
    _builder.append(_printControlled, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static void askMonitored(");
    _builder.append(asmName, "\t");
    _builder.append(" esecuzione) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _askMonitored = this.askMonitored(asm);
    _builder.append(_askMonitored, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("System.out.println(\"INFO - file java creto e tradotto dal file originale ");
    _builder.append(asmName, "\t\t  ");
    _builder.append(".asm\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  ");
    _builder.append("System.out.println(\"Inizio esecuzione del file ");
    _builder.append(asmName, "\t\t  ");
    _builder.append(".java\\n\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append(asmName, "\t\t  ");
    _builder.append(" esecuzione = new ");
    _builder.append(asmName, "\t\t  ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("String continuare = \"no\";");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("int stato =0;");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("stato++;");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("System.out.println(\"INITIAL STATE: \");");
    _builder.newLine();
    _builder.append("\t\t     ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("do {");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("System.out.println(\"<State \"+ stato +\" (controlled)>\");");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("//Aggiornamento valori dell\'ASM e inserimento dati monitorati");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("printControlled(esecuzione);");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("askMonitored(esecuzione);");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("esecuzione.updateASM();");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("System.out.println(\"</State \"+ stato +\" (controlled)>\");");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("System.out.println(\"\\n<Stato attuale>\");");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("printControlled(esecuzione);");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.newLine();
    _builder.append("\t\t  \t    ");
    _builder.append("System.out.print(\"Vuoi continuare? (yes/no)  \"); ");
    _builder.newLine();
    _builder.append("\t\t  \t    ");
    _builder.append("Scanner input = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("continuare = input.next();");
    _builder.newLine();
    _builder.append("\t\t  \t              ");
    _builder.newLine();
    _builder.append("\t\t  \t   ");
    _builder.append("stato++;");
    _builder.newLine();
    _builder.append("\t\t  \t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t  \t ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("while(continuare.contentEquals(\"yes\") || continuare.contentEquals(\"Yes\") || continuare.contentEquals(\"YES\") );");
    _builder.newLine();
    _builder.append("\t\t  \t     ");
    _builder.newLine();
    _builder.append("\t\t  \t     ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("System.out.println(\"FINAL STATE:\");");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("//Valori finale delle variabili");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("printControlled(esecuzione);");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.newLine();
    _builder.append("\t\t  ");
    _builder.append("System.out.println(\"esecuzione terminata\");");
    _builder.newLine();
    _builder.append("\t\t  \t     ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }

  public String printControlled(final Asm asm) {
    StringBuffer sb = new StringBuffer();
    EList<Domain> _domain = asm.getHeaderSection().getSignature().getDomain();
    for (final Domain dd : _domain) {
      if ((dd instanceof AbstractTd)) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("System.out.print(\"");
        String _name = ((AbstractTd)dd).getName();
        _builder.append(_name);
        _builder.append("\"+ \" = {\");");
        _builder.newLineIfNotEmpty();
        _builder.append("for(int i=0 ; i< esecuzione.");
        String _name_1 = ((AbstractTd)dd).getName();
        _builder.append(_name_1);
        _builder.append("_elemsList.size(); i++)");
        _builder.newLineIfNotEmpty();
        _builder.append("if(i!= esecuzione.");
        String _name_2 = ((AbstractTd)dd).getName();
        _builder.append(_name_2);
        _builder.append("_elemsList.size()-1)");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.print(esecuzione.");
        String _name_3 = ((AbstractTd)dd).getName();
        _builder.append(_name_3);
        _builder.append("_elemsList.get(i) +\", \");");
        _builder.newLineIfNotEmpty();
        _builder.append("else");
        _builder.newLine();
        _builder.append("System.out.print(esecuzione.");
        String _name_4 = ((AbstractTd)dd).getName();
        _builder.append(_name_4);
        _builder.append("_elemsList.get(i));\t");
        _builder.newLineIfNotEmpty();
        _builder.append("System.out.println(\"}\");");
        _builder.newLine();
        sb.append(_builder);
      }
    }
    EList<Function> _function = asm.getHeaderSection().getSignature().getFunction();
    for (final Function fd : _function) {
      if ((fd instanceof ControlledFunction)) {
        Domain _domain_1 = ((ControlledFunction)fd).getDomain();
        boolean _tripleEquals = (_domain_1 == null);
        if (_tripleEquals) {
          Domain _codomain = ((ControlledFunction)fd).getCodomain();
          if ((_codomain instanceof ConcreteDomain)) {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("System.out.println(\"");
            String _name_5 = ((ControlledFunction)fd).getName();
            _builder_1.append(_name_5);
            _builder_1.append(" = \" + esecuzione.");
            String _name_6 = ((ControlledFunction)fd).getName();
            _builder_1.append(_name_6);
            _builder_1.append(".get().value);");
            _builder_1.newLineIfNotEmpty();
            sb.append(_builder_1);
          }
          if (((((ControlledFunction)fd).getCodomain().getName().equals("Integer") || ((ControlledFunction)fd).getCodomain().getName().equals("Boolean")) || 
            ((ControlledFunction)fd).getCodomain().getName().equals("String"))) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("System.out.println(\"");
            String _name_7 = ((ControlledFunction)fd).getName();
            _builder_2.append(_name_7);
            _builder_2.append(" = \" + esecuzione.");
            String _name_8 = ((ControlledFunction)fd).getName();
            _builder_2.append(_name_8);
            _builder_2.append(".get());");
            _builder_2.newLineIfNotEmpty();
            _builder_2.newLine();
            sb.append(_builder_2);
          }
          Domain _codomain_1 = ((ControlledFunction)fd).getCodomain();
          if ((_codomain_1 instanceof MapDomain)) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("System.out.println(\"");
            String _name_9 = ((ControlledFunction)fd).getName();
            _builder_3.append(_name_9);
            _builder_3.append(" = \" + esecuzione.");
            String _name_10 = ((ControlledFunction)fd).getName();
            _builder_3.append(_name_10);
            _builder_3.append(".get());");
            _builder_3.newLineIfNotEmpty();
            sb.append(_builder_3);
          }
          Domain _codomain_2 = ((ControlledFunction)fd).getCodomain();
          if ((_codomain_2 instanceof SequenceDomain)) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("System.out.println(\"");
            String _name_11 = ((ControlledFunction)fd).getName();
            _builder_4.append(_name_11);
            _builder_4.append(" = \" + esecuzione.");
            String _name_12 = ((ControlledFunction)fd).getName();
            _builder_4.append(_name_12);
            _builder_4.append(".get());");
            _builder_4.newLineIfNotEmpty();
            sb.append(_builder_4);
          }
          Domain _codomain_3 = ((ControlledFunction)fd).getCodomain();
          if ((_codomain_3 instanceof EnumTd)) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("System.out.println(\"");
            String _name_13 = ((ControlledFunction)fd).getName();
            _builder_5.append(_name_13);
            _builder_5.append(" = \" + esecuzione.");
            String _name_14 = ((ControlledFunction)fd).getName();
            _builder_5.append(_name_14);
            _builder_5.append(".oldValue.name());");
            _builder_5.newLineIfNotEmpty();
            sb.append(_builder_5);
          }
        } else {
          if (((((ControlledFunction)fd).getDomain() instanceof EnumTd) && (((ControlledFunction)fd).getCodomain() instanceof ConcreteDomain))) {
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("for(int i=0; i < esecuzione.");
            String _name_15 = ((ControlledFunction)fd).getDomain().getName();
            _builder_6.append(_name_15);
            _builder_6.append("_elemsList.size(); i++)");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("{");
            _builder_6.newLine();
            _builder_6.append("\t\t\t");
            _builder_6.append("System.out.println(\" ");
            String _name_16 = ((ControlledFunction)fd).getName();
            _builder_6.append(_name_16, "\t\t\t");
            _builder_6.append(" =>  (\" + esecuzione.");
            String _name_17 = ((ControlledFunction)fd).getDomain().getName();
            _builder_6.append(_name_17, "\t\t\t");
            _builder_6.append("_elemsList.get(i) +\") ");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t\t");
            _builder_6.append("= \" + esecuzione.");
            String _name_18 = ((ControlledFunction)fd).getName();
            _builder_6.append(_name_18, "\t\t\t");
            _builder_6.append(".oldValues.get(esecuzione.");
            String _name_19 = ((ControlledFunction)fd).getDomain().getName();
            _builder_6.append(_name_19, "\t\t\t");
            _builder_6.append("_elemsList.get(i)).value );");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("\t\t");
            _builder_6.append("}");
            _builder_6.newLine();
            sb.append(_builder_6);
          }
          if (((((ControlledFunction)fd).getDomain() instanceof EnumTd) && (((ControlledFunction)fd).getCodomain() instanceof EnumTd))) {
            StringConcatenation _builder_7 = new StringConcatenation();
            _builder_7.append("for(int i=0; i < esecuzione.");
            String _name_20 = ((ControlledFunction)fd).getDomain().getName();
            _builder_7.append(_name_20);
            _builder_7.append("_elemsList.size(); i++)");
            _builder_7.newLineIfNotEmpty();
            _builder_7.append("\t\t");
            _builder_7.append("{");
            _builder_7.newLine();
            _builder_7.append("\t\t\t");
            _builder_7.append("System.out.println(\"");
            String _name_21 = ((ControlledFunction)fd).getName();
            _builder_7.append(_name_21, "\t\t\t");
            _builder_7.append(" =>  (\" + esecuzione.");
            String _name_22 = ((ControlledFunction)fd).getDomain().getName();
            _builder_7.append(_name_22, "\t\t\t");
            _builder_7.append("_elemsList.get(i) +\") ");
            _builder_7.newLineIfNotEmpty();
            _builder_7.append("\t\t\t");
            _builder_7.append("= \"+ esecuzione.");
            String _name_23 = ((ControlledFunction)fd).getName();
            _builder_7.append(_name_23, "\t\t\t");
            _builder_7.append(".oldValues.get(esecuzione.");
            String _name_24 = ((ControlledFunction)fd).getDomain().getName();
            _builder_7.append(_name_24, "\t\t\t");
            _builder_7.append("_elemsList.get(i)));");
            _builder_7.newLineIfNotEmpty();
            _builder_7.append("\t\t");
            _builder_7.append("}");
            _builder_7.newLine();
            sb.append(_builder_7);
          }
        }
      }
    }
    return sb.toString();
  }

  public String askMonitored(final Asm asm) {
    StringBuffer sb = new StringBuffer();
    EList<Function> _function = asm.getHeaderSection().getSignature().getFunction();
    for (final Function fd : _function) {
      if ((fd instanceof MonitoredFunction)) {
        Domain _domain = ((MonitoredFunction)fd).getDomain();
        boolean _tripleEquals = (_domain == null);
        if (_tripleEquals) {
          if ((((MonitoredFunction)fd).getCodomain().getName().equals("Boolean") && (!(((MonitoredFunction)fd).getCodomain() instanceof ConcreteDomain)))) {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("System.out.print(\"Inserire un valore booleano per ");
            String _name = ((MonitoredFunction)fd).getName();
            _builder.append(_name);
            _builder.append(" (true/false):  \");");
            _builder.newLineIfNotEmpty();
            _builder.append("Scanner ");
            String _name_1 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_1);
            _builder.append("input = new Scanner(System.in);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("for(;;) {");
            _builder.newLine();
            _builder.append("\t         ");
            _builder.append("Boolean y;");
            _builder.newLine();
            _builder.append("\t            ");
            _builder.append("String ");
            String _name_2 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_2, "\t            ");
            _builder.append("Controllo = ");
            String _name_3 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_3, "\t            ");
            _builder.append("input.nextLine();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t            ");
            _builder.append("if (");
            String _name_4 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_4, "\t            ");
            _builder.append("Controllo.isEmpty()) break;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t            ");
            _builder.append("try{");
            _builder.newLine();
            _builder.append("\t                ");
            _builder.append("y = Boolean.parseBoolean(");
            String _name_5 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_5, "\t                ");
            _builder.append("Controllo);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t            ");
            _builder.append("}catch (Exception e) {");
            _builder.newLine();
            _builder.append("\t                ");
            _builder.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder.newLine();
            _builder.append("\t                ");
            _builder.append("continue;");
            _builder.newLine();
            _builder.append("\t            ");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t            ");
            _builder.append("// setti la variabile");
            _builder.newLine();
            _builder.append("\t            ");
            _builder.append("esecuzione.");
            String _name_6 = ((MonitoredFunction)fd).getName();
            _builder.append(_name_6, "\t            ");
            _builder.append(".set(y);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t            ");
            _builder.append("break;");
            _builder.newLine();
            _builder.append("         ");
            _builder.append("}");
            _builder.newLine();
            _builder.newLine();
            sb.append(_builder);
          }
          if ((((MonitoredFunction)fd).getCodomain().getName().equals("Integer") && (!(((MonitoredFunction)fd).getCodomain() instanceof ConcreteDomain)))) {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("System.out.print(\"Inserire un valore Intero per ");
            String _name_7 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_7);
            _builder_1.append(" (Integer):  \");");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("Scanner ");
            String _name_8 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_8);
            _builder_1.append("input = new Scanner(System.in);");
            _builder_1.newLineIfNotEmpty();
            _builder_1.newLine();
            _builder_1.append("for(;;) {");
            _builder_1.newLine();
            _builder_1.append("\t         ");
            _builder_1.append("int x;");
            _builder_1.newLine();
            _builder_1.append("\t            ");
            _builder_1.append("String ");
            String _name_9 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_9, "\t            ");
            _builder_1.append("Controllo = ");
            String _name_10 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_10, "\t            ");
            _builder_1.append("input.nextLine();");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t            ");
            _builder_1.append("if (");
            String _name_11 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_11, "\t            ");
            _builder_1.append("Controllo.isEmpty()) break;");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t            ");
            _builder_1.append("try{");
            _builder_1.newLine();
            _builder_1.append("\t                ");
            _builder_1.append("x = Integer.parseInt(");
            String _name_12 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_12, "\t                ");
            _builder_1.append("Controllo);");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t            ");
            _builder_1.append("}catch (Exception e) {");
            _builder_1.newLine();
            _builder_1.append("\t                ");
            _builder_1.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder_1.newLine();
            _builder_1.append("\t                ");
            _builder_1.append("continue;");
            _builder_1.newLine();
            _builder_1.append("\t            ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.append("\t            ");
            _builder_1.newLine();
            _builder_1.append("\t            ");
            _builder_1.append("esecuzione.");
            String _name_13 = ((MonitoredFunction)fd).getName();
            _builder_1.append(_name_13, "\t            ");
            _builder_1.append(".set(x);");
            _builder_1.newLineIfNotEmpty();
            _builder_1.append("\t            ");
            _builder_1.append("break;");
            _builder_1.newLine();
            _builder_1.append("         ");
            _builder_1.append("}");
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.newLine();
            _builder_1.newLine();
            sb.append(_builder_1);
          }
          Domain _codomain = ((MonitoredFunction)fd).getCodomain();
          if ((_codomain instanceof EnumTd)) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("System.out.print(\"Inserire un numero per indicare l\'enumerativo per ");
            String _name_14 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_14);
            _builder_2.append(" \"+ ");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("esecuzione.");
            String _name_15 = ((MonitoredFunction)fd).getCodomain().getName();
            _builder_2.append(_name_15);
            _builder_2.append("_elemsList.toString() +\":  \");");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("Scanner ");
            String _name_16 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_16);
            _builder_2.append("input = new Scanner(System.in);");
            _builder_2.newLineIfNotEmpty();
            _builder_2.newLine();
            _builder_2.append("for(;;) {");
            _builder_2.newLine();
            _builder_2.append("\t         ");
            _builder_2.append("int x;");
            _builder_2.newLine();
            _builder_2.append("\t            ");
            _builder_2.append("String ");
            String _name_17 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_17, "\t            ");
            _builder_2.append("Controllo = ");
            String _name_18 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_18, "\t            ");
            _builder_2.append("input.nextLine();");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("\t            ");
            _builder_2.append("if (");
            String _name_19 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_19, "\t            ");
            _builder_2.append("Controllo.isEmpty()) break;");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("\t            ");
            _builder_2.append("try{");
            _builder_2.newLine();
            _builder_2.append("\t                ");
            _builder_2.append("x = Integer.parseInt(");
            String _name_20 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_20, "\t                ");
            _builder_2.append("Controllo);");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("\t            ");
            _builder_2.append("}catch (Exception e) {");
            _builder_2.newLine();
            _builder_2.append("\t                ");
            _builder_2.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder_2.newLine();
            _builder_2.append("\t                ");
            _builder_2.append("continue;");
            _builder_2.newLine();
            _builder_2.append("\t            ");
            _builder_2.append("}");
            _builder_2.newLine();
            _builder_2.append("\t            ");
            _builder_2.newLine();
            _builder_2.append("\t            ");
            _builder_2.append("esecuzione.");
            String _name_21 = ((MonitoredFunction)fd).getName();
            _builder_2.append(_name_21, "\t            ");
            _builder_2.append(".set(esecuzione.");
            String _name_22 = ((MonitoredFunction)fd).getCodomain().getName();
            _builder_2.append(_name_22, "\t            ");
            _builder_2.append("_elemsList.get(x-1));");
            _builder_2.newLineIfNotEmpty();
            _builder_2.append("\t            ");
            _builder_2.append("break;");
            _builder_2.newLine();
            _builder_2.append("         ");
            _builder_2.append("}\t\t\t\t    \t\t");
            _builder_2.newLine();
            sb.append(_builder_2);
          }
          Domain _codomain_1 = ((MonitoredFunction)fd).getCodomain();
          if ((_codomain_1 instanceof ConcreteDomain)) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("System.out.print(\"Inserire un valore Intero per ");
            String _name_23 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_23);
            _builder_3.append(" (Integer):  \");");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("Scanner ");
            String _name_24 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_24);
            _builder_3.append("input = new Scanner(System.in);");
            _builder_3.newLineIfNotEmpty();
            _builder_3.newLine();
            _builder_3.append("for(;;) {");
            _builder_3.newLine();
            _builder_3.append("\t         ");
            _builder_3.append("int x;");
            _builder_3.newLine();
            _builder_3.append("\t            ");
            _builder_3.append("String ");
            String _name_25 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_25, "\t            ");
            _builder_3.append("Controllo = ");
            String _name_26 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_26, "\t            ");
            _builder_3.append("input.nextLine();");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t            ");
            _builder_3.append("if (");
            String _name_27 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_27, "\t            ");
            _builder_3.append("Controllo.isEmpty()) break;");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t            ");
            _builder_3.append("try{");
            _builder_3.newLine();
            _builder_3.append("\t                ");
            _builder_3.append("x = Integer.parseInt(");
            String _name_28 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_28, "\t                ");
            _builder_3.append("Controllo);");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t            ");
            _builder_3.append("}catch (Exception e) {");
            _builder_3.newLine();
            _builder_3.append("\t                ");
            _builder_3.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder_3.newLine();
            _builder_3.append("\t                ");
            _builder_3.append("continue;");
            _builder_3.newLine();
            _builder_3.append("\t            ");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("\t            ");
            _builder_3.newLine();
            _builder_3.append("\t            ");
            _builder_3.append("esecuzione.");
            String _name_29 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_29, "\t            ");
            _builder_3.append("_supporto.value = x;");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t            ");
            _builder_3.append("esecuzione.");
            String _name_30 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_30, "\t            ");
            _builder_3.append(".set(esecuzione.");
            String _name_31 = ((MonitoredFunction)fd).getName();
            _builder_3.append(_name_31, "\t            ");
            _builder_3.append("_supporto);");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t            ");
            _builder_3.append("break;");
            _builder_3.newLine();
            _builder_3.append("         ");
            _builder_3.append("}\t\t\t\t    \t\t");
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.newLine();
            _builder_3.newLine();
            sb.append(_builder_3);
          }
          Domain _codomain_2 = ((MonitoredFunction)fd).getCodomain();
          if ((_codomain_2 instanceof AbstractTd)) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("\t\t\t\t    \t\t");
            _builder_4.newLine();
            sb.append(_builder_4);
          }
        } else {
          if (((((MonitoredFunction)fd).getDomain() instanceof ConcreteDomain) && ((MonitoredFunction)fd).getCodomain().getName().equals("Boolean"))) {
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("for(int i=0; i< esecuzione.");
            String _name_32 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_5.append(_name_32);
            _builder_5.append("_elems.size() ; i++)");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("{");
            _builder_5.newLine();
            _builder_5.append("esecuzione.");
            String _name_33 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_5.append(_name_33);
            _builder_5.append("_elem.value = esecuzione.");
            String _name_34 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_5.append(_name_34);
            _builder_5.append("_elems.get(i);");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("System.out.print(\"Inserire un valore booleano per ");
            String _name_35 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_35);
            _builder_5.append(", chiave \"+ ");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("esecuzione.");
            String _name_36 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_5.append(_name_36);
            _builder_5.append("_elem.value +\" (true/false):  \");");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("Scanner ");
            String _name_37 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_37);
            _builder_5.append("input = new Scanner(System.in);");
            _builder_5.newLineIfNotEmpty();
            _builder_5.newLine();
            _builder_5.append("for(;;) {");
            _builder_5.newLine();
            _builder_5.append("\t         ");
            _builder_5.append("Boolean y;");
            _builder_5.newLine();
            _builder_5.append("\t            ");
            _builder_5.append("String ");
            String _name_38 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_38, "\t            ");
            _builder_5.append("Controllo = ");
            String _name_39 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_39, "\t            ");
            _builder_5.append("input.nextLine();");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t            ");
            _builder_5.append("if (");
            String _name_40 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_40, "\t            ");
            _builder_5.append("Controllo.isEmpty()) break;");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t            ");
            _builder_5.append("try{");
            _builder_5.newLine();
            _builder_5.append("\t                ");
            _builder_5.append("y = Boolean.parseBoolean(");
            String _name_41 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_41, "\t                ");
            _builder_5.append("Controllo);");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t            ");
            _builder_5.append("}catch (Exception e) {");
            _builder_5.newLine();
            _builder_5.append("\t                ");
            _builder_5.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder_5.newLine();
            _builder_5.append("\t                ");
            _builder_5.append("continue;");
            _builder_5.newLine();
            _builder_5.append("\t            ");
            _builder_5.append("}");
            _builder_5.newLine();
            _builder_5.append("\t            ");
            _builder_5.append("// setti la variabile");
            _builder_5.newLine();
            _builder_5.append("\t            ");
            _builder_5.append("esecuzione.");
            String _name_42 = ((MonitoredFunction)fd).getName();
            _builder_5.append(_name_42, "\t            ");
            _builder_5.append(".set(esecuzione.");
            String _name_43 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_5.append(_name_43, "\t            ");
            _builder_5.append("_elem,y);");
            _builder_5.newLineIfNotEmpty();
            _builder_5.append("\t            ");
            _builder_5.append("break;");
            _builder_5.newLine();
            _builder_5.append("         ");
            _builder_5.append("}\t\t\t\t    \t\t");
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.newLine();
            _builder_5.append("}");
            _builder_5.newLine();
            sb.append(_builder_5);
          }
          if (((((MonitoredFunction)fd).getDomain() instanceof EnumTd) && ((MonitoredFunction)fd).getCodomain().getName().equals("Boolean"))) {
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("for(int i=0; i < esecuzione.");
            String _name_44 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_6.append(_name_44);
            _builder_6.append("_elemsList.size(); i++)");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("{");
            _builder_6.newLine();
            _builder_6.append("  ");
            _builder_6.append("System.out.print(\"Inserire un valore booleano per il dato enumerativo \" + ");
            _builder_6.newLine();
            _builder_6.append("  ");
            _builder_6.append("esecuzione.");
            String _name_45 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_6.append(_name_45, "  ");
            _builder_6.append("_elemsList.get(i) +\" della lista ");
            String _name_46 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_46, "  ");
            _builder_6.append(" (true/false):  \");");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("  ");
            _builder_6.append("Scanner ");
            String _name_47 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_47, "  ");
            _builder_6.append("input = new Scanner(System.in);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append(" ");
            _builder_6.append("for(;;) {");
            _builder_6.newLine();
            _builder_6.append("          ");
            _builder_6.append("Boolean y;");
            _builder_6.newLine();
            _builder_6.append("             ");
            _builder_6.append("String ");
            String _name_48 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_48, "             ");
            _builder_6.append("Controllo = ");
            String _name_49 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_49, "             ");
            _builder_6.append("input.nextLine();");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("             ");
            _builder_6.append("if (");
            String _name_50 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_50, "             ");
            _builder_6.append("Controllo.isEmpty()) break;");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("             ");
            _builder_6.append("try{");
            _builder_6.newLine();
            _builder_6.append("                 ");
            _builder_6.append("y = Boolean.parseBoolean(");
            String _name_51 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_51, "                 ");
            _builder_6.append("Controllo);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("             ");
            _builder_6.append("}catch (Exception e) {");
            _builder_6.newLine();
            _builder_6.append("                 ");
            _builder_6.append("System.out.println(\"hai inserito un valore sbagliato, riprova\");");
            _builder_6.newLine();
            _builder_6.append("                 ");
            _builder_6.append("continue;");
            _builder_6.newLine();
            _builder_6.append("             ");
            _builder_6.append("}");
            _builder_6.newLine();
            _builder_6.append("             ");
            _builder_6.append("// setti la variabile");
            _builder_6.newLine();
            _builder_6.append("              ");
            _builder_6.append("esecuzione.");
            String _name_52 = ((MonitoredFunction)fd).getName();
            _builder_6.append(_name_52, "              ");
            _builder_6.append(".set(esecuzione.");
            String _name_53 = ((MonitoredFunction)fd).getDomain().getName();
            _builder_6.append(_name_53, "              ");
            _builder_6.append("_elemsList.get(i), y);");
            _builder_6.newLineIfNotEmpty();
            _builder_6.append("             ");
            _builder_6.append("break;");
            _builder_6.newLine();
            _builder_6.append("         ");
            _builder_6.append("}\t\t\t\t    \t\t");
            _builder_6.newLine();
            _builder_6.append("}\t\t\t\t    \t\t  ");
            _builder_6.newLine();
            _builder_6.append("  ");
            _builder_6.newLine();
            sb.append(_builder_6);
          }
        }
      }
    }
    return sb.toString();
  }
}
