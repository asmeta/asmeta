package org.asmeta.asm2java.evosuite;

import asmeta.definitions.domains.AbstractTd;
import asmeta.definitions.domains.ConcreteDomain;
import asmeta.structure.Asm;
import org.asmeta.asm2java.DomainToJavaSigDef;
import org.asmeta.asm2java.ToString;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class DomainToJavaEvosuiteSigDef extends DomainToJavaSigDef {
  public DomainToJavaEvosuiteSigDef(final Asm resource) {
    super(resource);
  }

  /**
   * Translates abstract domains.
   * With the static fields private and the toString() method static.
   */
  @Override
  public String visit(final AbstractTd object) {
    StringBuffer sb = new StringBuffer();
    String isStatic = "";
    Boolean _isDynamic = object.getIsDynamic();
    boolean _not = (!(_isDynamic).booleanValue());
    if (_not) {
      isStatic = "static";
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("static class ");
    String _name = object.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static List<");
    String _name_1 = object.getName();
    _builder.append(_name_1, "\t");
    _builder.append("> elems = new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append((isStatic + " "), "\t");
    _builder.append("List<String> val = new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String _name_2 = object.getName();
    _builder.append(_name_2);
    _builder.append(" (String a) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("elems.add(this);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("val.add(a);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("static String toString(");
    String _name_3 = object.getName();
    _builder.append(_name_3, "      ");
    _builder.append(" a) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("if(elems.contains(a)) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return val.get(elems.lastIndexOf(a));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("else return null;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("\t  ");
    String _name_4 = object.getName();
    _builder.append(_name_4, "\t  ");
    _builder.append(" get(String a) {");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("if(val.contains(a)) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return elems.get(val.lastIndexOf(a));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("else return null;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("List<String> ");
    String _name_5 = object.getName();
    _builder.append(_name_5, "      ");
    _builder.append("_elemsList = new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    _builder.append("      ");
    _builder.append("List<");
    String _name_6 = object.getName();
    _builder.append(_name_6, "      ");
    _builder.append("> ");
    String _name_7 = object.getName();
    _builder.append(_name_7, "      ");
    _builder.append("_Class = new ArrayList<>();");
    _builder.newLineIfNotEmpty();
    sb.append(_builder);
    return sb.toString();
  }

  /**
   * Translate concrete domains.
   * With the static fields private.
   */
  @Override
  public String visit(final ConcreteDomain object) {
    StringBuffer sb = new StringBuffer();
    Boolean _isDynamic = object.getIsDynamic();
    if ((_isDynamic).booleanValue()) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("class  ");
      String _name = object.getName();
      _builder.append(_name);
      _builder.append("{");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("List<");
      String _visit = new ToString(this.res).visit(object.getTypeDomain());
      _builder.append(_visit);
      _builder.append("> elems = new ArrayList<>();\t\t\t      ");
      _builder.newLineIfNotEmpty();
      String _visit_1 = new ToString(this.res).visit(object.getTypeDomain());
      _builder.append(_visit_1);
      _builder.append(" value;\t\t\t      ");
      _builder.newLineIfNotEmpty();
      String _name_1 = object.getName();
      _builder.append(_name_1);
      _builder.append("(");
      String _visit_2 = new ToString(this.res).visit(object.getTypeDomain());
      _builder.append(_visit_2);
      _builder.append(" i) { ");
      _builder.newLineIfNotEmpty();
      _builder.append("   ");
      _builder.append("value = i;");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("   ");
      _builder.newLine();
      _builder.append("   ");
      _builder.append("List<");
      String _visit_3 = new ToString(this.res).visit(object.getTypeDomain());
      _builder.append(_visit_3, "   ");
      _builder.append("> ");
      String _name_2 = object.getName();
      _builder.append(_name_2, "   ");
      _builder.append("_elems = new ArrayList<>();");
      _builder.newLineIfNotEmpty();
      sb.append(_builder);
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("static class  ");
      String _name_3 = object.getName();
      _builder_1.append(_name_3);
      _builder_1.append(" {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("private static List<");
      String _visit_4 = new ToString(this.res).visit(object.getTypeDomain());
      _builder_1.append(_visit_4, "\t\t\t\t");
      _builder_1.append("> elems = new ArrayList<>();");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("                ");
      _builder_1.append("private ");
      String _visit_5 = new ToString(this.res).visit(object.getTypeDomain());
      _builder_1.append(_visit_5, "                ");
      _builder_1.append(" value;");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("                ");
      _builder_1.newLine();
      _builder_1.append("                ");
      _builder_1.append("static ");
      String _name_4 = object.getName();
      _builder_1.append(_name_4, "                ");
      _builder_1.append(" valueOf(");
      String _visit_6 = new ToString(this.res).visit(object.getTypeDomain());
      _builder_1.append(_visit_6, "                ");
      _builder_1.append(" val) {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("                \t");
      String _name_5 = object.getName();
      _builder_1.append(_name_5, "                \t");
      _builder_1.append(" n = new ");
      String _name_6 = object.getName();
      _builder_1.append(_name_6, "                \t");
      _builder_1.append("();");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("                \t");
      _builder_1.append("n.value = val;");
      _builder_1.newLine();
      _builder_1.append("                \t");
      _builder_1.append("return n;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("static ");
      String _name_7 = object.getName();
      _builder_1.append(_name_7, "\t\t\t\t");
      _builder_1.append(" valueOf(");
      String _name_8 = object.getName();
      _builder_1.append(_name_8, "\t\t\t\t");
      _builder_1.append(" val) {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t                \t");
      _builder_1.append("return val;");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t");
      _builder_1.append("public boolean equals(Object obj) {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t");
      _builder_1.append("if (!(obj instanceof ");
      String _name_9 = object.getName();
      _builder_1.append(_name_9, "\t\t\t\t\t\t");
      _builder_1.append(")) return false;");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t\t\t");
      _builder_1.append("return value.equals(((");
      String _name_10 = object.getName();
      _builder_1.append(_name_10, "\t\t\t\t\t\t");
      _builder_1.append(")obj).value);");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("@Override");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t");
      _builder_1.append("public int hashCode() {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t\t");
      _builder_1.append("return value.hashCode();");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      String _name_11 = object.getName();
      _builder_1.append(_name_11, "\t\t\t\t");
      _builder_1.append(" ");
      String _name_12 = object.getName();
      _builder_1.append(_name_12, "\t\t\t\t");
      _builder_1.append("_elem = new ");
      String _name_13 = object.getName();
      _builder_1.append(_name_13, "\t\t\t\t");
      _builder_1.append("();");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("List<");
      String _visit_7 = new ToString(this.res).visit(object.getTypeDomain());
      _builder_1.append(_visit_7, "\t\t\t\t");
      _builder_1.append("> ");
      String _name_14 = object.getName();
      _builder_1.append(_name_14, "\t\t\t\t");
      _builder_1.append("_elems = new ArrayList<>();");
      _builder_1.newLineIfNotEmpty();
      sb.append(_builder_1);
    }
    return sb.toString();
  }
}
