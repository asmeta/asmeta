package asmeta.asmetal2java.codegen.translator;

import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * Util class which contains static methods to generate the class definition
 * of the controlled and not-controlled functions
 */
@SuppressWarnings("all")
public class FunctionClassDef {
  /**
   * Get the class definition for a controlled function with null domain and generic codomain D
   */
  public static String getFun0CtrlClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* A generic controlled function class with null domain and codomain D.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param <D> the type of the value to be managed, represents the Codomain of the function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Fun0Ctrl<D> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private D currValue; // the current value");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private D newValue;  // the new value to be assigned");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Sets the new value for this function.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* <p>The provided value is stored as {@code newValue}, representing the value ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* that will replace the current value {@code oldValue} in the next step.</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @param d the new value to be prepared for assignment");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void set(D d) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("newValue = d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Retrieves the function current value.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* <p>The {@code currValue} represents the current state of the function before ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* any pending updates to {@code newValue} are applied.</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @return the current value");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("D get() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return currValue;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Initializes both the current and new values with the provided value.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* <p>This method is meant to be used to set the initial state of the function</p>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @param d the value to initialize both the current and new states");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void init(D d){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("currValue = newValue = d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Updates the current value with the new value.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* <p>This method copies the {@code newValue} into {@code currValue}, ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* effectively promoting the new value to the current value.</p>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void update() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("currValue = newValue;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  /**
   * Get the class definition for a controlled function with generic domain D and generic codomain C
   */
  public static String getFunNCtrlClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* A generic class for controlled functions with domain (not null) and codomain D -> C");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* @param <D> the type of the key in the mappings, represents the Domain of the function.");
    _builder.newLine();
    _builder.append("* @param <C> the type of the value in the mappings, represents the Codomain of the function.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("static class FunNCtrl<D, C> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Map<D, C> currValues = new HashMap<>(); // The current value map");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Map<D, C> newValues = new HashMap<>();  // The new value map to be assigned");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Sets a new value for a given key in the new values map.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* <p>The provided key-value pair is stored in the {@code newValues} map, ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* representing the new state that will replace the current state in the next step.</p>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param d the key for the new value");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param c the new value to be associated with the key");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void set(D d, C c) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newValues.put(d, c);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Retrieves the current value associated with a given key.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* <p>The {@code currValues} map holds the current state of the key-value mappings.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* This method returns the value associated with the specified key in the current state.</p>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param d the key whose associated value is to be returned");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the current value associated with the given key, or {@code null} if the key is not found");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C get(D d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return currValues.get(d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Initializes both the current and new maps with a single key-value pair.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* <p>This method is meant to be used to set the initial state of the function.</p>");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param d the key to be added to both maps");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param c the value to be associated with the key in both maps");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void init(D d, C c){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("currValues.put(d,c);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newValues.put(d,c);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Updates the current value with the new value.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* <p>This method copies the {@code newValues} into {@code currValues}, ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* effectively promoting the new value to the current value.</p>");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("void update() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("currValues = newValues;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  /**
   * Get the class definition for a non controlled function with null domain and generic codomain D
   */
  public static String getFun0Class() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* A generic function class with null domain and codomain D.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param <D> the type of the value to be managed, represents the Codomain of the function.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class Fun0<D> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("D value; // the current value");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Sets the new value for this function.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @param d the new value to be assigned");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void set(D d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("value = d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Retrieves the function current value.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* @return the current value");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("D get() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  /**
   * Get the class definition for a non controlled function with generic domain D and generic codomain C
   */
  public static String getFunNClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* A generic class for functions with domain (not null) and codomain D -> C");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* @param <D> the type of the key in the mappings, represents the Domain of the function.");
    _builder.newLine();
    _builder.append("* @param <C> the type of the value in the mappings, represents the Codomain of the function.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("class FunN<D, C> {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<D, C> values = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Sets a new value for a given key in the new values map.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param d the key for the new value");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param c the new value to be associated with the key");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void set(D d, C c) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("values.put(d, c);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Retrieves the current value associated with a given key.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @param d the key whose associated value is to be returned");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* @return the current value associated with the given key, or {@code null} if the key is not found");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("C get(D d) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return values.get(d);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
