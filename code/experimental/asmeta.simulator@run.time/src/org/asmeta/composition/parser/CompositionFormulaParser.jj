/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CompositionFormulaParser.jj */
/*@egen*/options {
      STATIC = false;
      SUPPORT_CLASS_VISIBILITY_PUBLIC = true;
      ERROR_REPORTING = false;
      JAVA_UNICODE_ESCAPE = true;
      UNICODE_INPUT = true;
                               
                      
                 
}

PARSER_BEGIN(CompositionFormulaParser)
package org.asmeta.composition.parser;

/**
 * parser for compositional formulas
 */
public class CompositionFormulaParser/*@bgen(jjtree)*/implements CompositionFormulaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCompositionFormulaParserState jjtree = new JJTCompositionFormulaParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
//    System.out.println("Reading from standard input...");
//    CompositionFormula t = new CompositionFormula(System.in);
//    try {
//      SimpleNode n = t.Start();
//      n.dump("");
//      System.out.println("Thank you.");
//    } catch (Exception e) {
//      System.out.println("Oops.");
//      System.out.println(e.getMessage());
//      e.printStackTrace();
//    }
  }
}

PARSER_END(CompositionFormulaParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Main production. */
SimpleNode parse() : {/*@bgen(jjtree) parse */
  ASTparse jjtn000 = new ASTparse(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parse */
        try {
/*@egen*/
//  CompositionFormula()
	SimplePipe()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** An Expression. */
//void CompositionFormula() : {}
//{
//  SimplePipe()
//}

/** An Additive Expression. */
void SimplePipe() : {/*@bgen(jjtree) SimplePipe */
  ASTSimplePipe jjtn000 = new ASTSimplePipe(JJTSIMPLEPIPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimplePipe */
  try {
/*@egen*/
  HalfduplexBidirectionalPipe() ( ( "|" ) HalfduplexBidirectionalPipe() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** A Multiplicative Expression. */
void HalfduplexBidirectionalPipe() : {/*@bgen(jjtree) HalfduplexBidirectionalPipe */
  ASTHalfduplexBidirectionalPipe jjtn000 = new ASTHalfduplexBidirectionalPipe(JJTHALFDUPLEXBIDIRECTIONALPIPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HalfduplexBidirectionalPipe */
  try {
/*@egen*/
  UnaryExpression() ( ( "<|>" ) UnaryExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/** A Unary Expression. */
void UnaryExpression() : {/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
//  "(" CompositionFormula() ")" | AsmetaSpec() 
  "(" SimplePipe() ")" | AsmetaSpec()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


/** An Identifier. */
void AsmetaSpec() : {/*@bgen(jjtree) AsmetaSpec */
  ASTAsmetaSpec jjtn000 = new ASTAsmetaSpec(JJTASMETASPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AsmetaSpec */
  try {
/*@egen*/
  <IDENTIFIER>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
