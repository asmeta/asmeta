/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 08 11:05:20 GMT 2025
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ATM3_ATG_ESTest extends ATM3_ATG_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.EXIT;
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      ATM3.MoneySizeSelection aTM3_MoneySizeSelection0 = ATM3.MoneySizeSelection.OTHER;
      aTM3_ATG0.set_standardOrOther(aTM3_MoneySizeSelection0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int3 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int5 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int5);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      aTM3_ATG0.set_insertMoneySizeOther(int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int5);
      assertTrue(int4 == int3);
      
      int int6 = 964;
      aTM3_ATG0.set_insertedPin(int6);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card3();
      assertTrue(boolean0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean1 == boolean0);
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string1);
      
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      
      int int6 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int6);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int7 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int7);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int6);
      
      boolean boolean4 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean4);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int8 = 964;
      aTM3_ATG0.set_insertedPin(int8);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.BALANCE;
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      int int3 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int3);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int6 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int6);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      aTM3_ATG0.set_insertMoneySizeOther(int5);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int6);
      
      int int7 = 964;
      aTM3_ATG0.set_insertedPin(int7);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.EXIT;
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      int int3 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int3);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      ATM3.MoneySizeSelection aTM3_MoneySizeSelection0 = ATM3.MoneySizeSelection.STANDARD;
      aTM3_ATG0.set_standardOrOther(aTM3_MoneySizeSelection0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int6 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int6);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      aTM3_ATG0.set_insertMoneySizeOther(int5);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      
      int int7 = 964;
      aTM3_ATG0.set_insertedPin(int7);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string1);
      
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int3 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int6 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int6);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int7 = 964;
      aTM3_ATG0.set_insertedPin(int7);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      int int0 = 10;
      aTM3_ATG0.set_insertMoneySizeStandard(int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        aTM3_ATG0.set_insertMoneySizeStandard(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int0 = (-3188);
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.EXIT;
      int int2 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      int int3 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int6 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int6);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      aTM3_ATG0.set_insertMoneySizeOther(int5);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      
      int int7 = 964;
      aTM3_ATG0.set_insertedPin(int7);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.BALANCE;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      // Undeclared exception!
      try { 
        aTM3_ATG0.get_numOfBalanceChecks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ATM3_ATG", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      int int0 = 5071;
      // Undeclared exception!
      try { 
        aTM3_ATG0.set_insertMoneySizeStandard(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5061
         //
         verifyException("java.util.Arrays$ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.MoneySizeSelection aTM3_MoneySizeSelection0 = ATM3.MoneySizeSelection.OTHER;
      aTM3_ATG0.set_standardOrOther(aTM3_MoneySizeSelection0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      int int0 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card3();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      int int0 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      aTM3_ATG0.get_atmState();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      int int0 = aTM3_ATG0.get_moneyLeft();
      assertEquals(1000, int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      aTM3_ATG0.set_insertMoneySizeOther(int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card2();
      assertEquals(1652, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      String string0 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      int int0 = 0;
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      String string0 = "branch_r_processMoneyRequest_1 covered";
      // Undeclared exception!
      try { 
        aTM3_ATG0.set_insertedCard(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      // Undeclared exception!
      try { 
        aTM3_ATG0.step();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ATM3", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int0 = 1;
      aTM3_ATG0.set_insertedPin(int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int1 == int0);
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.EXIT;
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      int int2 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int2);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int3);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int5 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int5);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      
      aTM3_ATG0.step();
      assertEquals(0, aTM3_ATG0.get_numOfBalanceChecks());
      assertEquals(ATM3.State.CHOOSE, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      aTM3_ATG0.set_insertMoneySizeOther(int4);
      assertEquals(0, aTM3_ATG0.get_numOfBalanceChecks());
      assertEquals(ATM3.State.CHOOSE, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      
      int int6 = 964;
      aTM3_ATG0.set_insertedPin(int6);
      assertEquals(0, aTM3_ATG0.get_numOfBalanceChecks());
      assertEquals(ATM3.State.CHOOSE, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.BALANCE;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int0 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertNull(string1);
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int1 == int0);
      
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int2 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ATM3.MoneySizeSelection aTM3_MoneySizeSelection0 = ATM3.MoneySizeSelection.STANDARD;
      aTM3_ATG0.set_standardOrOther(aTM3_MoneySizeSelection0);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      int int3 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int4);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      
      int int5 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int5);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      
      Boolean boolean2 = new Boolean(boolean1);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean1 == boolean0);
      
      String string2 = aTM3_ATG0.get_currCard();
      assertEquals("card1", string2);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertNotNull(string2);
      
      boolean boolean3 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean3);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      
      aTM3_ATG0.set_insertMoneySizeOther(int5);
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int0 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNull(string1);
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int1 == int0);
      
      int int2 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int2);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ATM3.MoneySizeSelection aTM3_MoneySizeSelection0 = ATM3.MoneySizeSelection.OTHER;
      aTM3_ATG0.set_standardOrOther(aTM3_MoneySizeSelection0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int3 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int3);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean1 == boolean0);
      
      aTM3_ATG0.step();
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ATM3_ATG aTM3_ATG0 = new ATM3_ATG();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotNull(aTM3_ATG0);
      
      ATM3.Service aTM3_Service0 = ATM3.Service.WITHDRAWAL;
      aTM3_ATG0.set_selectedService(aTM3_Service0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean0 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      boolean boolean1 = aTM3_ATG0.get_accessible_card1();
      assertTrue(boolean1);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean1 == boolean0);
      
      String string0 = "card1";
      aTM3_ATG0.set_insertedCard(string0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int0 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int0);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      String string1 = aTM3_ATG0.get_currCard();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNull(string1);
      
      ATM3.Service aTM3_Service1 = ATM3.Service.EXIT;
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int1 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int1);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int1 == int0);
      
      aTM3_ATG0.set_selectedService(aTM3_Service1);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertNotSame(aTM3_Service1, aTM3_Service0);
      assertFalse(aTM3_Service1.equals((Object)aTM3_Service0));
      
      int int2 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int2);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int3);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      int int4 = aTM3_ATG0.get_balance_card3();
      assertEquals(548, int4);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      
      boolean boolean2 = aTM3_ATG0.get_accessible_card2();
      assertTrue(boolean2);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int5 = aTM3_ATG0.get_balance_card1();
      assertEquals(3000, int5);
      assertEquals(ATM3.State.AWAITCARD, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      
      aTM3_ATG0.step();
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      
      aTM3_ATG0.set_insertMoneySizeOther(int4);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int5);
      assertTrue(int4 == int3);
      
      int int6 = 964;
      aTM3_ATG0.set_insertedPin(int6);
      assertEquals(ATM3.State.AWAITPIN, aTM3_ATG0.get_atmState());
      assertEquals(1000, aTM3_ATG0.get_moneyLeft());
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
  }
}
