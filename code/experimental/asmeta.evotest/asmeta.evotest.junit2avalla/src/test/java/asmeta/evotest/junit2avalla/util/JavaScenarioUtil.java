package asmeta.evotest.junit2avalla.util;

public class JavaScenarioUtil {
	
	/* Constants */
	public static final String NAME = "RegistroDiCassav4";
	public static final String SCENARIO_0 = "RegistroDiCassav4_scenario0";
	public static final String SCENARIO_1 = "RegistroDiCassav4_scenario1";
	public static final String SCENARIO_2 = "RegistroDiCassav4_scenario2";
	public static final String SCENARIO_3 = "RegistroDiCassav4_scenario3";
	public static final String SCENARIO_4 = "RegistroDiCassav4_scenario4";
	public static final String SCENARIO_5 = "RegistroDiCassav4_scenario5";
	public static final String SCENARIO_6 = "RegistroDiCassav4_scenario6";
	public static final String SCENARIO_7 = "RegistroDiCassav4_scenario7";
	/* Monitored */
	public static final String OUT_MESS = "outMess";
	public static final String STATO_CASSA = "statoCassa";
	public static final String TOTALE = "totale";
	/* Controlled */
	public static final String SCELTA_DI_AGGIUNTA_PIZZA =  "sceltaDiAggiuntaPizza";
	public static final String SCELTA_DEL_TIPO_PIZZA = "sceltaDelTipoPizza";
	public static final String SERVIZIO_SELEZIONATO = "servizioSelezionato";
	public static final String PIZZA_INSERITA = "pizzaInserita";
	public static final String INSERT_QUANTITA = "insertQuantita";
	public static final String INSERT_PREZZO = "insertPrezzo";
	
	public static String getJavaFile_RegistroDiCassa(){

    return """
        /*
         * This file was automatically generated by EvoSuite
         * Sun Oct 20 18:24:38 GMT 2024
         */
       
        package org.evoservice.wrapper;
        
        import org.junit.Test;
        import static org.junit.Assert.*;
        
        import org.evosuite.runtime.EvoRunner;
        import org.evosuite.runtime.EvoRunnerParameters;
        import org.junit.runner.RunWith;
       
        @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
        public class RegistroDiCassav4_ATG_ESTest extends RegistroDiCassav4_ATG_ESTest_scaffolding {
        
          @Test(timeout = 4000)
          public void test00()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertNotNull(registroDiCassav4_ATG0);
        
              RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.NO;
              registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              
              registroDiCassav4_ATG0.step();
        
              RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.NEWORDINE;
              registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
        
          }
        
          @Test(timeout = 4000)
          public void test01()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertNotNull(registroDiCassav4_ATG0);
             
              RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.SI;
              registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
             
              RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.NEWORDINE;
              registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
        
              registroDiCassav4_ATG0.step();
              assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("Scegli il tipo di pizza desiderata:", registroDiCassav4_ATG0.get_outMess());
        
              registroDiCassav4_ATG0.set_abstract_pizzaInserita("margherita");
              assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("Scegli il tipo di pizza desiderata:", registroDiCassav4_ATG0.get_outMess());
        
              RegistroDiCassav4.SelezioneTipoDiPizza registroDiCassav4_SelezioneTipoDiPizza0 = RegistroDiCassav4.SelezioneTipoDiPizza.STANDARD;
              registroDiCassav4_ATG0.set_sceltaDelTipoPizza(registroDiCassav4_SelezioneTipoDiPizza0);
              assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("Scegli il tipo di pizza desiderata:", registroDiCassav4_ATG0.get_outMess());
        
              registroDiCassav4_ATG0.step();
              assertEquals(RegistroDiCassav4.Stati.PIZZASTANDARD_SELEZIONATA, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals("Inserisci il nome di una pizza dell'elenco:", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
        
          }
        
          @Test(timeout = 4000)
          public void test02()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertNotNull(registroDiCassav4_ATG0);
              
              RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.EXIT;
              registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());

              registroDiCassav4_ATG0.step();
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("Registro di cassa chiuso!", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.CHIUSO, registroDiCassav4_ATG0.get_statoCassa());
        
              registroDiCassav4_ATG0.step();
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("Registro di cassa chiuso!", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.CHIUSO, registroDiCassav4_ATG0.get_statoCassa());
              // Undeclared exception!
              try { 
                registroDiCassav4_ATG0.step();
                fail("Expecting exception: NullPointerException");
              } catch(NullPointerException e) {
                 //
                 // no message in exception (getMessage() returned null)
                 //
                verifyException("org.evoservice.wrapper.RegistroDiCassav4", e);
              }
          }
        
          @Test(timeout = 4000)
          public void test03()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertNotNull(registroDiCassav4_ATG0);
        
              registroDiCassav4_ATG0.set_insertPrezzo(9);
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
          }

          @Test(timeout = 4000)
          public void test04()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertNotNull(registroDiCassav4_ATG0);

              registroDiCassav4_ATG0.get_statoCassa();
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
          }
          
          @Test(timeout = 4000)
          public void test05()  throws Throwable  {
             RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              String string0 = registroDiCassav4_ATG0.get_outMess();
              assertNotNull(string0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals("", string0);
          }
        
          @Test(timeout = 4000)
          public void test06()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertNotNull(registroDiCassav4_ATG0);
        
              RegistroDiCassav4.SelezioneTipoDiPizza registroDiCassav4_SelezioneTipoDiPizza0 = RegistroDiCassav4.SelezioneTipoDiPizza.OTHER;
              registroDiCassav4_ATG0.set_sceltaDelTipoPizza(registroDiCassav4_SelezioneTipoDiPizza0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              
              RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.SI;
              registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              
              registroDiCassav4_ATG0.step();
              
              // Undeclared exception!
              try { 
                registroDiCassav4_ATG0.step();
                fail("Expecting exception: NullPointerException");
              } catch(NullPointerException e) {
                 //
                 // no message in exception (getMessage() returned null)
                 //
                 verifyException("org.evoservice.wrapper.RegistroDiCassav4", e);
              }
              
              // test that the following instructions are not added to the scenario
              registroDiCassav4_ATG0.step();
              assertEquals("Inserisci il nome di una nuova pizza:", registroDiCassav4_ATG0.get_outMess());
              assertEquals(0, registroDiCassav4_ATG0.get_totale());
              assertEquals(RegistroDiCassav4.Stati.ALTRAPIZZA_SELEZIONATA, registroDiCassav4_ATG0.get_statoCassa());
              
          }
          
          @Test(timeout = 4000)
          public void test07()  throws Throwable  {
              RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              registroDiCassav4_ATG0.step();
              assertEquals(0, integer0); // test no exception is thrown
              // test that the following instructions are not added to the scenario
              assertEquals("", registroDiCassav4_ATG0.get_outMess());
              assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());
              assertNotNull(registroDiCassav4_ATG0);  
              registroDiCassav4_ATG0.step();
          }
          
        }
        """;

  }

}
