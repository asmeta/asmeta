package asmeta.junit2avalla.util;

public class JavaScenarioUtil {
	
	/* Constants */
	public static final String NAME = "RegistroDiCassav4";
	public static final String SCENARIO_0 = "RegistroDiCassav4_scenario0";
	public static final String SCENARIO_1 = "RegistroDiCassav4_scenario1";
	public static final String SCENARIO_2 = "RegistroDiCassav4_scenario2";
	public static final String SCENARIO_3 = "RegistroDiCassav4_scenario3";
	public static final String SCENARIO_4 = "RegistroDiCassav4_scenario4";
	public static final String SCENARIO_5 = "RegistroDiCassav4_scenario5";
	public static final String SCENARIO_6 = "RegistroDiCassav4_scenario6";
	/* Monitored */
	public static final String OUT_MESS = "outMess";
	public static final String STATO_CASSA = "statoCassa";
	public static final String TOTALE = "totale";
	/* Controlled */
	public static final String SCELTA_DI_AGGIUNTA_PIZZA =  "sceltaDiAggiuntaPizza";
	public static final String SCELTA_DEL_TIPO_PIZZA = "sceltaDelTipoPizza";
	public static final String SERVIZIO_SELEZIONATO = "servizioSelezionato";
	public static final String PIZZA_INSERITA = "pizzaInserita";
	public static final String INSERT_QUANTITA = "insertQuantita";
	public static final String INSERT_PREZZO = "insertPrezzo";
	
	public static String getJavaFile_RegistroDiCassa(){

    return
        "/*\r\n"
        + " * This file was automatically generated by EvoSuite\r\n"
        + " * Sun Oct 20 18:24:38 GMT 2024\r\n"
        + " */\r\n"
        + "\r\n"
        + "package org.evoservice.wrapper;\r\n"
        + "\r\n"
        + "import org.junit.Test;\r\n"
        + "import static org.junit.Assert.*;\r\n"
        + "\r\n"
        + "import org.evosuite.runtime.EvoRunner;\r\n"
        + "import org.evosuite.runtime.EvoRunnerParameters;\r\n"
        + "import org.junit.runner.RunWith;\r\n"
        + "\r\n"
        + "@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) \r\n"
        + "public class RegistroDiCassav4_ATG_ESTest extends RegistroDiCassav4_ATG_ESTest_scaffolding {\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test00()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.NO;\r\n"
        + "      registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.NEWORDINE;\r\n"
        + "      registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(\"prezzo totale aggiornato\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(\"prezzo totale aggiornato\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "  }\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test01()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.SI;\r\n"
        + "      registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.NEWORDINE;\r\n"
        + "      registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.set_pizzaInserita(\"margherita\");\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.set_insertQuantita(0);\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.SelezioneTipoDiPizza registroDiCassav4_SelezioneTipoDiPizza0 = RegistroDiCassav4.SelezioneTipoDiPizza.STANDARD;\r\n"
        + "      registroDiCassav4_ATG0.set_sceltaDelTipoPizza(registroDiCassav4_SelezioneTipoDiPizza0);\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.PIZZASTANDARD_SELEZIONATA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(\"Inserisci il nome di una pizza dell'elenco:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(\"prezzo totale aggiornato\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_SE_AGGIUNGERE_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "  }\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test02()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.EXIT;\r\n"
        + "      registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Registro di cassa chiuso!\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.CHIUSO, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"Registro di cassa chiuso!\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.CHIUSO, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      // Undeclared exception!\r\n"
        + "      try { \r\n"
        + "        registroDiCassav4_ATG0.step();\r\n"
        + "        fail(\"Expecting exception: NullPointerException\");\r\n"
        + "      \r\n"
        + "      } catch(NullPointerException e) {\r\n"
        + "         //\r\n"
        + "         // no message in exception (getMessage() returned null)\r\n"
        + "         //\r\n"
        + "         verifyException(\"org.evoservice.wrapper.RegistroDiCassav4\", e);\r\n"
        + "      }"
        + "  }\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test03()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.set_insertPrezzo(9);\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "  }\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test04()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.get_statoCassa();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "  }\r\n"
        + "\r\n"
        + "  @Test(timeout = 4000)\r\n"
        + "  public void test05()  throws Throwable  {\r\n"
        + "      RegistroDiCassav4_ATG registroDiCassav4_ATG0 = new RegistroDiCassav4_ATG();\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertNotNull(registroDiCassav4_ATG0);\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.SelezioneTipoDiPizza registroDiCassav4_SelezioneTipoDiPizza0 = RegistroDiCassav4.SelezioneTipoDiPizza.OTHER;\r\n"
        + "      registroDiCassav4_ATG0.set_sceltaDelTipoPizza(registroDiCassav4_SelezioneTipoDiPizza0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.AggiungiPizza registroDiCassav4_AggiungiPizza0 = RegistroDiCassav4.AggiungiPizza.SI;\r\n"
        + "      registroDiCassav4_ATG0.set_sceltaDiAggiuntaPizza(registroDiCassav4_AggiungiPizza0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      RegistroDiCassav4.Servizio registroDiCassav4_Servizio0 = RegistroDiCassav4.Servizio.NEWORDINE;\r\n"
        + "      registroDiCassav4_ATG0.set_servizioSelezionato(registroDiCassav4_Servizio0);\r\n"
        + "      assertEquals(\"\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ATTENDI_ORDINAZIONI, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.SCEGLI_TIPO_DI_PIZZA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      assertEquals(\"Scegli il tipo di pizza desiderata:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      \r\n"
        + "      registroDiCassav4_ATG0.step();\r\n"
        + "      assertEquals(\"Inserisci il nome di una nuova pizza:\", registroDiCassav4_ATG0.get_outMess());\r\n"
        + "      assertEquals(0, registroDiCassav4_ATG0.get_totale());\r\n"
        + "      assertEquals(RegistroDiCassav4.Stati.ALTRAPIZZA_SELEZIONATA, registroDiCassav4_ATG0.get_statoCassa());\r\n"
        + "      \r\n"
        + "      // Undeclared exception!\r\n"
        + "      try { \r\n"
        + "        registroDiCassav4_ATG0.step();\r\n"
        + "        fail(\"Expecting exception: NullPointerException\");\r\n"
        + "      \r\n"
        + "      } catch(NullPointerException e) {\r\n"
        + "         //\r\n"
        + "         // no message in exception (getMessage() returned null)\r\n"
        + "         //\r\n"
        + "         verifyException(\"org.evoservice.wrapper.RegistroDiCassav4\", e);\r\n"
        + "      }\r\n"
        + "  }"
        + "}";

  }

}
