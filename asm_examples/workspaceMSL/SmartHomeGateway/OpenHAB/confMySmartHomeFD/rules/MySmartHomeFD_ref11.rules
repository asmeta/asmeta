var boolean adaptation_required_a_fd

rule "StartLoop_MySmartHomeFD"
when
	System started
then
	start_a_fd.sendCommand(OFF)
	start_p_fd.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	if (Managing_System_Active.state== ON) Managing_System_Active.postUpdate(OFF) 
	adaptation_required_a_fd = true
end

rule "Analyze_a_fd"
when
	Item start_a_fd received command ON
then
	sendCommand(start_a_fd, OFF)
	//if(((Math::random * 100.0).intValue + 1) <= 50 ){
	//	adaptation_required_a_fd = true
	//}
	//else {
    //		adaptation_required_a_fd = false
    //	}
	if(adaptation_required_a_fd == true){
		sendCommand(start_p_fd, ON)
	}
	else{
		sendCommand(start_m_gf, ON)
		sendCommand(start_m_ff, ON)
	}
end

rule "Plan_p_fd"
when
	Item start_p_fd received command ON
then
	sendCommand(start_p_fd, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_gf_slave"
when
	Item start_e_gf received command ON
then
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)
end

rule "Exec_e_ff_slave"
when
	Item start_e_ff received command ON
then
	//Added in refinement for a demo of the loop execution
    var Number cbTemp = FF_Childrenroom_Temperature.state as Number 
    if (cbTemp > 45){
          FF_Children_Bedroom_Fire_Alarm.sendCommand(ON) 
    }      
   	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)      
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)
end

rule "Monitor_m_gf"
when
	//Item start_m_gf received command ON 
    Item GF_Kitchen_Temperature changed or
	Item GF_LZone1_Temperature changed or
	Item GF_LZone2_Temperature changed or
	Item GF_Bathroom_Temperature changed 
then
    if (start_m_gf.state == ON){
        sendCommand(start_m_gf, OFF)
	    sendCommand(gf_slave_to_fd_master, ON)
    }
end

rule "Monitor_m_ff"
when
	//Item start_m_ff received command ON
    Item FF_Bedroom_Temperature changed or
	Item FF_Childrenroom_Temperature changed
then
    if (start_m_ff.state == ON) {
	    sendCommand(start_m_ff, OFF)
	    sendCommand(ff_slave_to_fd_master, ON)
    }
end

rule "Aggregator_m_gf_m_ff_a_fd"
when
	Item gf_slaveff_slave_to_fd_master received update ON
then
	sendCommand(gf_slave_to_fd_master, OFF)
	sendCommand(ff_slave_to_fd_master, OFF)
	sendCommand(start_a_fd, ON)
end



