var Number counter_ch
var Number exec_counter
var boolean adaptation_required_a_ch

rule "Execution stop countdown"
when
	Item start_m_ch received command ON
then
	if(exec_counter > 0) {
		exec_counter = exec_counter-1
		logInfo("ComfortableHeating.rules", "Execution counter reduced by one. exec_counter = " + exec_counter)
	}
	if(exec_counter <= 0) {
		logInfo("ComfortableHeating.rules", "10 executions have elapsed. Loops will end then stop.")
	}
end

rule "StartLoop_ComfortableHeating"
when
	System started
then
	logInfo("ComfortableHeating.rules", "Loops will run for " + 10 + " iterations.")
	counter_ch = 0
	logInfo("ComfortableHeating.rules", "Starting MAPE loop for group (ch), counter_ch = " + counter_ch)
	exec_counter = 10
	start_m_ch.sendCommand(ON)
	start_a_ch.sendCommand(OFF)
	start_p_ch.sendCommand(OFF)
	start_e_ch.sendCommand(OFF)
end

rule "Monitor_m_ch"
when
	Item start_m_ch received command ON
then
	counter_ch = counter_ch + 1
	logInfo("ComfortableHeating.rules", "Monitor for group (ch) active, counter_ch = " + counter_ch)
	sendCommand(start_m_ch, OFF)
	sendCommand(start_a_ch, ON)
end

rule "Analyze_a_ch"
when
	Item start_a_ch received command ON
then
	counter_ch = counter_ch + 1
	logInfo("ComfortableHeating.rules", "Analyze for group (ch) active, counter_ch = " + counter_ch)
	sendCommand(start_a_ch, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_ch = true
	}
	else {
		adaptation_required_a_ch = false
	}
	if(adaptation_required_a_ch){
		logInfo("ComfortableHeating.rules", "Adaptation required for a_ch, proceeding with loop.")
		sendCommand(start_p_ch, ON)
	}
	else{
		logInfo("ComfortableHeating.rules", "Adaptation not required for a_ch, resetting loop.")
		counter_ch = 0
		if(exec_counter > 0) {
			sendCommand(start_m_ch, ON)
		}
	}
end

rule "Plan_p_ch"
when
	Item start_p_ch received command ON
then
	counter_ch = counter_ch + 1
	logInfo("ComfortableHeating.rules", "Plan for group (ch) active, counter_ch = " + counter_ch)
	sendCommand(start_p_ch, OFF)
	sendCommand(start_e_ch, ON)
end

rule "Exec_e_ch"
when
	Item start_e_ch received command ON
then
	counter_ch = counter_ch + 1
	logInfo("ComfortableHeating.rules", "Exec active for group (ch), counter_ch = " + counter_ch)
	counter_ch = 0
	sendCommand(start_e_ch, OFF)
	if(exec_counter > 0) {
		sendCommand(start_m_ch, ON)
	}
end

